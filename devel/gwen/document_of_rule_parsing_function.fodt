<?xml version="1.0" encoding="UTF-8"?>

<office:document xmlns:office="urn:oasis:names:tc:opendocument:xmlns:office:1.0" xmlns:style="urn:oasis:names:tc:opendocument:xmlns:style:1.0" xmlns:text="urn:oasis:names:tc:opendocument:xmlns:text:1.0" xmlns:table="urn:oasis:names:tc:opendocument:xmlns:table:1.0" xmlns:draw="urn:oasis:names:tc:opendocument:xmlns:drawing:1.0" xmlns:fo="urn:oasis:names:tc:opendocument:xmlns:xsl-fo-compatible:1.0" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:meta="urn:oasis:names:tc:opendocument:xmlns:meta:1.0" xmlns:number="urn:oasis:names:tc:opendocument:xmlns:datastyle:1.0" xmlns:svg="urn:oasis:names:tc:opendocument:xmlns:svg-compatible:1.0" xmlns:chart="urn:oasis:names:tc:opendocument:xmlns:chart:1.0" xmlns:dr3d="urn:oasis:names:tc:opendocument:xmlns:dr3d:1.0" xmlns:math="http://www.w3.org/1998/Math/MathML" xmlns:form="urn:oasis:names:tc:opendocument:xmlns:form:1.0" xmlns:script="urn:oasis:names:tc:opendocument:xmlns:script:1.0" xmlns:config="urn:oasis:names:tc:opendocument:xmlns:config:1.0" xmlns:ooo="http://openoffice.org/2004/office" xmlns:ooow="http://openoffice.org/2004/writer" xmlns:oooc="http://openoffice.org/2004/calc" xmlns:dom="http://www.w3.org/2001/xml-events" xmlns:xforms="http://www.w3.org/2002/xforms" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:rpt="http://openoffice.org/2005/report" xmlns:of="urn:oasis:names:tc:opendocument:xmlns:of:1.2" xmlns:xhtml="http://www.w3.org/1999/xhtml" xmlns:grddl="http://www.w3.org/2003/g/data-view#" xmlns:tableooo="http://openoffice.org/2009/table" xmlns:field="urn:openoffice:names:experimental:ooo-ms-interop:xmlns:field:1.0" xmlns:formx="urn:openoffice:names:experimental:ooxml-odf-interop:xmlns:form:1.0" xmlns:css3t="http://www.w3.org/TR/css3-text/" office:version="1.2" office:mimetype="application/vnd.oasis.opendocument.text">
 <office:meta><meta:initial-creator>gwen </meta:initial-creator><meta:creation-date>2013-07-08T11:48:59</meta:creation-date><meta:generator>LibreOffice/3.5$Linux_x86 LibreOffice_project/350m1$Build-2</meta:generator><dc:date>2014-03-25T10:18:33</dc:date><dc:creator>gwen </dc:creator><meta:editing-duration>P9DT4H22M56S</meta:editing-duration><meta:editing-cycles>78</meta:editing-cycles><meta:document-statistic meta:table-count="0" meta:image-count="0" meta:object-count="0" meta:page-count="153" meta:paragraph-count="3375" meta:word-count="8892" meta:character-count="399683" meta:non-whitespace-character-count="368647"/></office:meta>
 <office:settings>
  <config:config-item-set config:name="ooo:view-settings">
   <config:config-item config:name="ViewAreaTop" config:type="int">4303183</config:config-item>
   <config:config-item config:name="ViewAreaLeft" config:type="int">0</config:config-item>
   <config:config-item config:name="ViewAreaWidth" config:type="int">24449</config:config-item>
   <config:config-item config:name="ViewAreaHeight" config:type="int">17729</config:config-item>
   <config:config-item config:name="ShowRedlineChanges" config:type="boolean">true</config:config-item>
   <config:config-item config:name="InBrowseMode" config:type="boolean">false</config:config-item>
   <config:config-item-map-indexed config:name="Views">
    <config:config-item-map-entry>
     <config:config-item config:name="ViewId" config:type="string">view2</config:config-item>
     <config:config-item config:name="ViewLeft" config:type="int">3429</config:config-item>
     <config:config-item config:name="ViewTop" config:type="int">4309269</config:config-item>
     <config:config-item config:name="VisibleLeft" config:type="int">0</config:config-item>
     <config:config-item config:name="VisibleTop" config:type="int">4303183</config:config-item>
     <config:config-item config:name="VisibleRight" config:type="int">24448</config:config-item>
     <config:config-item config:name="VisibleBottom" config:type="int">4320910</config:config-item>
     <config:config-item config:name="ZoomType" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutColumns" config:type="short">0</config:config-item>
     <config:config-item config:name="ViewLayoutBookMode" config:type="boolean">false</config:config-item>
     <config:config-item config:name="ZoomFactor" config:type="short">100</config:config-item>
     <config:config-item config:name="IsSelectedFrame" config:type="boolean">false</config:config-item>
    </config:config-item-map-entry>
   </config:config-item-map-indexed>
  </config:config-item-set>
  <config:config-item-set config:name="ooo:configuration-settings">
   <config:config-item config:name="ChartAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="IsLabelDocument" config:type="boolean">false</config:config-item>
   <config:config-item config:name="MathBaselineAlignment" config:type="boolean">true</config:config-item>
   <config:config-item config:name="OutlineLevelYieldsNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintLeftPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotJustifyLinesWithManualBreak" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AlignTabStopPosition" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintTextPlaceholder" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseOldNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommand" config:type="string"/>
   <config:config-item config:name="ProtectForm" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintBlackFonts" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspectRTL" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SmallCapsPercentage66" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintControls" config:type="boolean">true</config:config-item>
   <config:config-item config:name="CharacterCompressionType" config:type="short">0</config:config-item>
   <config:config-item config:name="PrintHiddenText" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UseFormerTextWrapping" config:type="boolean">false</config:config-item>
   <config:config-item config:name="IsKernAsianPunctuation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintProspect" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnbreakableNumberings" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintEmptyPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerObjectPositioning" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ConsiderTextWrapOnObjPos" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TableRowKeep" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintReversed" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabsRelativeToIndent" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintRightPages" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintPaperFromSetup" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddFrameOffsets" config:type="boolean">false</config:config-item>
   <config:config-item config:name="AddParaSpacingToTableCells" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UpdateFromTemplate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddExternalLeading" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintSingleJobs" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrinterIndependentLayout" config:type="string">high-resolution</config:config-item>
   <config:config-item config:name="LinkUpdateMode" config:type="short">1</config:config-item>
   <config:config-item config:name="PrintAnnotationMode" config:type="short">0</config:config-item>
   <config:config-item config:name="UseOldPrinterMetrics" config:type="boolean">false</config:config-item>
   <config:config-item config:name="RedlineProtectionKey" config:type="base64Binary"/>
   <config:config-item config:name="PrinterSetup" config:type="base64Binary"/>
   <config:config-item config:name="IgnoreFirstLineIndentInNumbering" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CollapseEmptyCellPara" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrinterName" config:type="string"/>
   <config:config-item config:name="InvertBorderSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintPageBackground" config:type="boolean">true</config:config-item>
   <config:config-item config:name="DoNotCaptureDrawObjsOnPage" config:type="boolean">false</config:config-item>
   <config:config-item config:name="TabOverflow" config:type="boolean">true</config:config-item>
   <config:config-item config:name="ApplyUserData" config:type="boolean">true</config:config-item>
   <config:config-item config:name="TabAtLeftIndentForParagraphsInList" config:type="boolean">false</config:config-item>
   <config:config-item config:name="UnxForceZeroExtLeading" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveVersionOnClose" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintFaxName" config:type="string"/>
   <config:config-item config:name="AddParaTableSpacing" config:type="boolean">true</config:config-item>
   <config:config-item config:name="PrintDrawings" config:type="boolean">true</config:config-item>
   <config:config-item config:name="LoadReadonly" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintGraphics" config:type="boolean">true</config:config-item>
   <config:config-item config:name="FieldAutoUpdate" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AllowPrintJobCancel" config:type="boolean">true</config:config-item>
   <config:config-item config:name="UseFormerLineSpacing" config:type="boolean">false</config:config-item>
   <config:config-item config:name="SaveGlobalDocumentLinks" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseDataSource" config:type="string"/>
   <config:config-item config:name="IgnoreTabsAndBlanksForLineCalculation" config:type="boolean">false</config:config-item>
   <config:config-item config:name="CurrentDatabaseCommandType" config:type="int">0</config:config-item>
   <config:config-item config:name="DoNotResetParaAttrsForNumFont" config:type="boolean">false</config:config-item>
   <config:config-item config:name="ClipAsCharacterAnchoredWriterFlyFrames" config:type="boolean">false</config:config-item>
   <config:config-item config:name="PrintTables" config:type="boolean">true</config:config-item>
   <config:config-item config:name="AddParaTableSpacingAtStart" config:type="boolean">true</config:config-item>
  </config:config-item-set>
 </office:settings>
 <office:scripts>
  <office:script script:language="ooo:Basic">
   <ooo:libraries xmlns:ooo="http://openoffice.org/2004/office" xmlns:xlink="http://www.w3.org/1999/xlink">
    <ooo:library-embedded ooo:name="Standard"/>
   </ooo:libraries>
  </office:script>
 </office:scripts>
 <office:font-face-decls>
  <style:font-face style:name="Lohit Hindi1" svg:font-family="&apos;Lohit Hindi&apos;"/>
  <style:font-face style:name="OpenSymbol" svg:font-family="OpenSymbol"/>
  <style:font-face style:name="Courier 10 Pitch" svg:font-family="&apos;Courier 10 Pitch&apos;" style:font-pitch="fixed"/>
  <style:font-face style:name="LMMono10" svg:font-family="LMMono10" style:font-pitch="fixed"/>
  <style:font-face style:name="Liberation Serif" svg:font-family="&apos;Liberation Serif&apos;" style:font-family-generic="roman" style:font-pitch="variable"/>
  <style:font-face style:name="Liberation Sans" svg:font-family="&apos;Liberation Sans&apos;" style:font-family-generic="swiss" style:font-pitch="variable"/>
  <style:font-face style:name="Droid Sans" svg:font-family="&apos;Droid Sans&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
  <style:font-face style:name="Lohit Hindi" svg:font-family="&apos;Lohit Hindi&apos;" style:font-family-generic="system" style:font-pitch="variable"/>
 </office:font-face-decls>
 <office:styles>
  <style:default-style style:family="graphic">
   <style:graphic-properties svg:stroke-color="#808080" draw:fill-color="#cfe7f5" fo:wrap-option="no-wrap" draw:shadow-offset-x="0.1181in" draw:shadow-offset-y="0.1181in" draw:start-line-spacing-horizontal="0.1114in" draw:start-line-spacing-vertical="0.1114in" draw:end-line-spacing-horizontal="0.1114in" draw:end-line-spacing-vertical="0.1114in" style:flow-with-text="false"/>
   <style:paragraph-properties style:text-autospace="ideograph-alpha" style:line-break="strict" style:writing-mode="lr-tb" style:font-independent-line-spacing="false">
    <style:tab-stops/>
   </style:paragraph-properties>
   <style:text-properties style:use-window-font-color="true" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN"/>
  </style:default-style>
  <style:default-style style:family="paragraph">
   <style:paragraph-properties fo:hyphenation-ladder-count="no-limit" style:text-autospace="ideograph-alpha" style:punctuation-wrap="hanging" style:line-break="strict" style:tab-stop-distance="0.4925in" style:writing-mode="page"/>
   <style:text-properties style:use-window-font-color="true" style:font-name="Liberation Serif" fo:font-size="12pt" fo:language="en" fo:country="US" style:letter-kerning="true" style:font-name-asian="Droid Sans" style:font-size-asian="10.5pt" style:language-asian="zh" style:country-asian="CN" style:font-name-complex="Lohit Hindi" style:font-size-complex="12pt" style:language-complex="hi" style:country-complex="IN" fo:hyphenate="false" fo:hyphenation-remain-char-count="2" fo:hyphenation-push-char-count="2"/>
  </style:default-style>
  <style:default-style style:family="table">
   <style:table-properties table:border-model="collapsing"/>
  </style:default-style>
  <style:default-style style:family="table-row">
   <style:table-row-properties fo:keep-together="auto"/>
  </style:default-style>
  <style:style style:name="Standard" style:family="paragraph" style:class="text"/>
  <style:style style:name="Heading" style:family="paragraph" style:parent-style-name="Standard" style:next-style-name="Text_20_body" style:class="text">
   <style:paragraph-properties fo:margin-top="0.1665in" fo:margin-bottom="0.0835in" fo:keep-with-next="always"/>
   <style:text-properties style:font-name="Liberation Sans" fo:font-size="14pt" style:font-name-asian="Droid Sans" style:font-size-asian="14pt" style:font-name-complex="Lohit Hindi" style:font-size-complex="14pt"/>
  </style:style>
  <style:style style:name="Text_20_body" style:display-name="Text body" style:family="paragraph" style:parent-style-name="Standard" style:class="text">
   <style:paragraph-properties fo:margin-top="0in" fo:margin-bottom="0.0835in"/>
  </style:style>
  <style:style style:name="List" style:family="paragraph" style:parent-style-name="Text_20_body" style:class="list">
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Hindi1"/>
  </style:style>
  <style:style style:name="Caption" style:family="paragraph" style:parent-style-name="Standard" style:class="extra">
   <style:paragraph-properties fo:margin-top="0.0835in" fo:margin-bottom="0.0835in" text:number-lines="false" text:line-number="0"/>
   <style:text-properties fo:font-size="12pt" fo:font-style="italic" style:font-size-asian="12pt" style:font-style-asian="italic" style:font-name-complex="Lohit Hindi1" style:font-size-complex="12pt" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="Index" style:family="paragraph" style:parent-style-name="Standard" style:class="index">
   <style:paragraph-properties text:number-lines="false" text:line-number="0"/>
   <style:text-properties style:font-size-asian="12pt" style:font-name-complex="Lohit Hindi1"/>
  </style:style>
  <style:style style:name="Bullet_20_Symbols" style:display-name="Bullet Symbols" style:family="text">
   <style:text-properties style:font-name="OpenSymbol" style:font-name-asian="OpenSymbol" style:font-name-complex="OpenSymbol"/>
  </style:style>
  <style:style style:name="Numbering_20_Symbols" style:display-name="Numbering Symbols" style:family="text"/>
  <style:style style:name="Internet_20_link" style:display-name="Internet link" style:family="text">
   <style:text-properties fo:color="#000080" fo:language="zxx" fo:country="none" style:text-underline-style="solid" style:text-underline-width="auto" style:text-underline-color="font-color" style:language-asian="zxx" style:country-asian="none" style:language-complex="zxx" style:country-complex="none"/>
  </style:style>
  <text:outline-style style:name="Outline">
   <text:outline-level-style text:level="1" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.3in" fo:text-indent="-0.3in" fo:margin-left="0.3in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="2" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.4in" fo:text-indent="-0.4in" fo:margin-left="0.4in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="3" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.5in" fo:text-indent="-0.5in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="4" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.6in" fo:text-indent="-0.6in" fo:margin-left="0.6in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="5" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.7in" fo:text-indent="-0.7in" fo:margin-left="0.7in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="6" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.8in" fo:text-indent="-0.8in" fo:margin-left="0.8in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="7" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.9in" fo:text-indent="-0.9in" fo:margin-left="0.9in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="8" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1in" fo:text-indent="-1in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="9" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.1in" fo:text-indent="-1.1in" fo:margin-left="1.1in"/>
    </style:list-level-properties>
   </text:outline-level-style>
   <text:outline-level-style text:level="10" style:num-format="">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.2in" fo:text-indent="-1.2in" fo:margin-left="1.2in"/>
    </style:list-level-properties>
   </text:outline-level-style>
  </text:outline-style>
  <text:notes-configuration text:note-class="footnote" style:num-format="1" text:start-value="0" text:footnotes-position="page" text:start-numbering-at="document"/>
  <text:notes-configuration text:note-class="endnote" style:num-format="i" text:start-value="0"/>
  <text:linenumbering-configuration text:number-lines="false" text:offset="0.1965in" style:num-format="1" text:number-position="left" text:increment="5"/>
 </office:styles>
 <office:automatic-styles>
  <style:style style:name="P1" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:font-style="italic" style:font-style-asian="italic" style:font-style-complex="italic"/>
  </style:style>
  <style:style style:name="P2" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="P3" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties style:font-name="Liberation Serif" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P4" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties style:font-name="Liberation Serif" fo:font-weight="normal" style:font-weight-asian="normal" style:font-weight-complex="normal"/>
  </style:style>
  <style:style style:name="P5" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties style:font-name="Courier 10 Pitch"/>
  </style:style>
  <style:style style:name="P6" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties style:text-underline-style="none"/>
  </style:style>
  <style:style style:name="P7" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P8" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties style:font-name="LMMono10"/>
  </style:style>
  <style:style style:name="P9" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0.4925in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
  </style:style>
  <style:style style:name="P10" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0.4925in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="LMMono10"/>
  </style:style>
  <style:style style:name="P11" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0.4925in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="P12" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0.4925in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-weight="normal" style:font-weight-asian="normal" style:font-weight-complex="normal"/>
  </style:style>
  <style:style style:name="P13" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:break-before="page"/>
  </style:style>
  <style:style style:name="P14" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="P15" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P16" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0.9846in" fo:margin-right="0in" fo:text-indent="-0.25in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="P17" style:family="paragraph" style:parent-style-name="Standard">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="P18" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L1"/>
  <style:style style:name="P19" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L1">
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="P20" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L1">
   <style:text-properties style:font-name="Liberation Serif" fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P21" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L6">
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="P22" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L1">
   <style:text-properties style:font-name="Courier 10 Pitch"/>
  </style:style>
  <style:style style:name="P23" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L2"/>
  <style:style style:name="P24" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L3"/>
  <style:style style:name="P25" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L3">
   <style:text-properties style:text-underline-style="none"/>
  </style:style>
  <style:style style:name="P26" style:family="paragraph" style:parent-style-name="Standard">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P27" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L4">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P28" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L1">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P29" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L5">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <style:style style:name="P30" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L1">
   <style:text-properties style:font-name="LMMono10"/>
  </style:style>
  <style:style style:name="P31" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L6"/>
  <style:style style:name="P32" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L1">
   <style:paragraph-properties fo:break-before="page"/>
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="P33" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L1">
   <style:paragraph-properties fo:margin-left="0.4925in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="Liberation Serif" fo:font-weight="normal" style:font-weight-asian="normal" style:font-weight-complex="normal"/>
  </style:style>
  <style:style style:name="P34" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L6">
   <style:paragraph-properties fo:margin-left="0.9846in" fo:margin-right="0in" fo:text-indent="-0.25in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="P35" style:family="paragraph" style:parent-style-name="Standard" style:list-style-name="L6">
   <style:paragraph-properties fo:margin-left="0in" fo:margin-right="0in" fo:text-indent="0in" style:auto-text-indent="false"/>
   <style:text-properties style:font-name="Liberation Serif"/>
  </style:style>
  <style:style style:name="T1" style:family="text">
   <style:text-properties style:font-name="Courier 10 Pitch"/>
  </style:style>
  <style:style style:name="T2" style:family="text">
   <style:text-properties style:text-underline-style="none"/>
  </style:style>
  <style:style style:name="T3" style:family="text">
   <style:text-properties fo:color="#800000"/>
  </style:style>
  <style:style style:name="T4" style:family="text">
   <style:text-properties style:text-underline-style="solid" style:text-underline-type="double" style:text-underline-width="auto" style:text-underline-color="font-color"/>
  </style:style>
  <style:style style:name="T5" style:family="text">
   <style:text-properties fo:font-weight="bold" style:font-weight-asian="bold" style:font-weight-complex="bold"/>
  </style:style>
  <text:list-style style:name="L1">
   <text:list-level-style-number text:level="1" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.5in" fo:text-indent="-0.25in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="2" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.75in" fo:text-indent="-0.25in" fo:margin-left="0.75in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="3" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1in" fo:text-indent="-0.25in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="4" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.25in" fo:text-indent="-0.25in" fo:margin-left="1.25in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="5" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.5in" fo:text-indent="-0.25in" fo:margin-left="1.5in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="6" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.75in" fo:text-indent="-0.25in" fo:margin-left="1.75in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="7" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2in" fo:text-indent="-0.25in" fo:margin-left="2in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="8" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.25in" fo:text-indent="-0.25in" fo:margin-left="2.25in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="9" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.5in" fo:text-indent="-0.25in" fo:margin-left="2.5in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
   <text:list-level-style-number text:level="10" text:style-name="Numbering_20_Symbols" style:num-suffix="." style:num-format="1">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.75in" fo:text-indent="-0.25in" fo:margin-left="2.75in"/>
    </style:list-level-properties>
   </text:list-level-style-number>
  </text:list-style>
  <text:list-style style:name="L2">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.5in" fo:text-indent="-0.25in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.75in" fo:text-indent="-0.25in" fo:margin-left="0.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1in" fo:text-indent="-0.25in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.25in" fo:text-indent="-0.25in" fo:margin-left="1.25in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.5in" fo:text-indent="-0.25in" fo:margin-left="1.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.75in" fo:text-indent="-0.25in" fo:margin-left="1.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2in" fo:text-indent="-0.25in" fo:margin-left="2in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.25in" fo:text-indent="-0.25in" fo:margin-left="2.25in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.5in" fo:text-indent="-0.25in" fo:margin-left="2.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.75in" fo:text-indent="-0.25in" fo:margin-left="2.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L3">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.5in" fo:text-indent="-0.25in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.75in" fo:text-indent="-0.25in" fo:margin-left="0.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1in" fo:text-indent="-0.25in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.25in" fo:text-indent="-0.25in" fo:margin-left="1.25in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.5in" fo:text-indent="-0.25in" fo:margin-left="1.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.75in" fo:text-indent="-0.25in" fo:margin-left="1.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2in" fo:text-indent="-0.25in" fo:margin-left="2in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.25in" fo:text-indent="-0.25in" fo:margin-left="2.25in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.5in" fo:text-indent="-0.25in" fo:margin-left="2.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.75in" fo:text-indent="-0.25in" fo:margin-left="2.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L4">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.5in" fo:text-indent="-0.25in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" text:bullet-char="◦">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.75in" fo:text-indent="-0.25in" fo:margin-left="0.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" text:bullet-char="▪">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1in" fo:text-indent="-0.25in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.25in" fo:text-indent="-0.25in" fo:margin-left="1.25in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" text:bullet-char="◦">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.5in" fo:text-indent="-0.25in" fo:margin-left="1.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" text:bullet-char="▪">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.75in" fo:text-indent="-0.25in" fo:margin-left="1.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2in" fo:text-indent="-0.25in" fo:margin-left="2in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" text:bullet-char="◦">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.25in" fo:text-indent="-0.25in" fo:margin-left="2.25in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" text:bullet-char="▪">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.5in" fo:text-indent="-0.25in" fo:margin-left="2.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.75in" fo:text-indent="-0.25in" fo:margin-left="2.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L5">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.5in" fo:text-indent="-0.25in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" text:bullet-char="◦">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.75in" fo:text-indent="-0.25in" fo:margin-left="0.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" text:bullet-char="▪">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1in" fo:text-indent="-0.25in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.25in" fo:text-indent="-0.25in" fo:margin-left="1.25in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" text:bullet-char="◦">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.5in" fo:text-indent="-0.25in" fo:margin-left="1.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" text:bullet-char="▪">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.75in" fo:text-indent="-0.25in" fo:margin-left="1.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2in" fo:text-indent="-0.25in" fo:margin-left="2in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" text:bullet-char="◦">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.25in" fo:text-indent="-0.25in" fo:margin-left="2.25in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" text:bullet-char="▪">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.5in" fo:text-indent="-0.25in" fo:margin-left="2.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" text:bullet-char="•">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.75in" fo:text-indent="-0.25in" fo:margin-left="2.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
  </text:list-style>
  <text:list-style style:name="L6">
   <text:list-level-style-bullet text:level="1" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.5in" fo:text-indent="-0.25in" fo:margin-left="0.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="2" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="0.75in" fo:text-indent="-0.25in" fo:margin-left="0.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="3" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1in" fo:text-indent="-0.25in" fo:margin-left="1in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="4" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.25in" fo:text-indent="-0.25in" fo:margin-left="1.25in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="5" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.5in" fo:text-indent="-0.25in" fo:margin-left="1.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="6" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="1.75in" fo:text-indent="-0.25in" fo:margin-left="1.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="7" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2in" fo:text-indent="-0.25in" fo:margin-left="2in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="8" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.25in" fo:text-indent="-0.25in" fo:margin-left="2.25in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="9" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.5in" fo:text-indent="-0.25in" fo:margin-left="2.5in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
   <text:list-level-style-bullet text:level="10" text:style-name="Bullet_20_Symbols" text:bullet-char="–">
    <style:list-level-properties text:list-level-position-and-space-mode="label-alignment">
     <style:list-level-label-alignment text:label-followed-by="listtab" text:list-tab-stop-position="2.75in" fo:text-indent="-0.25in" fo:margin-left="2.75in"/>
    </style:list-level-properties>
   </text:list-level-style-bullet>
  </text:list-style>
  <style:page-layout style:name="pm1">
   <style:page-layout-properties fo:page-width="8.5in" fo:page-height="11in" style:num-format="1" style:print-orientation="portrait" fo:margin="0.7874in" fo:margin-top="0.7874in" fo:margin-bottom="0.7874in" fo:margin-left="0.7874in" fo:margin-right="0.7874in" style:writing-mode="lr-tb" style:footnote-max-height="0in">
    <style:footnote-sep style:width="0.0071in" style:distance-before-sep="0.0398in" style:distance-after-sep="0.0398in" style:line-style="solid" style:adjustment="left" style:rel-width="25%" style:color="#000000"/>
   </style:page-layout-properties>
   <style:header-style/>
   <style:footer-style/>
  </style:page-layout>
 </office:automatic-styles>
 <office:master-styles>
  <style:master-page style:name="Standard" style:page-layout-name="pm1"/>
 </office:master-styles>
 <office:body>
  <office:text text:use-soft-page-breaks="true">
   <text:sequence-decls>
    <text:sequence-decl text:display-outline-level="0" text:name="Illustration"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Table"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Text"/>
    <text:sequence-decl text:display-outline-level="0" text:name="Drawing"/>
   </text:sequence-decls>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Result after replace inner sequence to groupref and generate group </text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">(*Elt(name,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(label,Some(Choice(Elt(numberLabel,Some(GroupRef(numberLabel,0,unbounded)),1,1),Elt(symbolLabel,Some(GroupRef(symbolLabel,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(numberLabel,Some(Sequence(Elt(number,Some(SimpleType(nonNegativeInteger)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(symbolLabel,Some(Sequence(GroupRef(symbol,0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(symbol,Some(Choice(Elt(name,Some(GroupRef(name,1,1)),1,1),Elt(sharp,Some(GroupRef(sharp,0,unbounded)),1,1),Elt(labeledSymbol,Some(GroupRef(labeledSymbol,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sharp,Some(Sequence(GroupRef(symbol,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(labeledSymbol,Some(Sequence(GroupRef(symbol,1,1),GroupRef(label,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(var,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(term,Some(Choice(Elt(var,Some(GroupRef(var,1,1)),1,1),Elt(funapp,Some(GroupRef(funapp,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(funapp,Some(Sequence(GroupRef(symbol,1,1),Elt(arg,Some(GroupRef(term,1,1)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rule,Some(Sequence(Elt(lhs,Some(GroupRef(term,1,1)),1,1),Elt(rhs,Some(GroupRef(term,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rules,Some(Sequence(Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalRules,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dps,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trs,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(usableRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(number,Some(Choice(Elt(integer,Some(GroupRef(integer,1,1)),1,1),Elt(rational,Some(GroupRef(rational,0,unbounded)),1,1),Elt(algebraic,Some(GroupRef(algebraic,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rational,Some(Sequence(Elt(numerator,Some(SimpleType(integer)),1,1),Elt(denominator,Some(SimpleType(positiveInteger)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(algebraic,Some(Sequence(GroupRef(number,1,1),GroupRef(number,1,1),GroupRef(number,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(coefficient,Some(Choice(GroupRef(number,1,1),Elt(minusInfinity,None,1,1),Elt(plusInfinity,None,1,1),Elt(vector,Some(SimpleType(vector)),1,1),Elt(matrix,Some(SimpleType(matrix)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(vector,Some(Sequence(Elt(coefficient,Some(SimpleType(coefficient)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(matrix,Some(Sequence(Elt(vector,Some(SimpleType(vector)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(polynomial,Some(Choice(Elt(coefficient,Some(SimpleType(coefficient)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(GroupRef(sum,0,unbounded)),1,1),Elt(product,Some(GroupRef(product,0,unbounded)),1,1),Elt(max,Some(GroupRef(max,0,unbounded)),1,1),Elt(min,Some(GroupRef(min,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sum,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(product,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(max,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(min,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(function,Some(Choice(Elt(polynomial,Some(GroupRef(polynomial,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(arity,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(strictDimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(degree,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(position,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(argumentFilter,Some(Sequence(Elt(argumentFilterEntry,Some(GroupRef(argumentFilterEntry,0,unbounded)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(argumentFilterEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(t11,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t11,Some(Choice(Elt(collapsing,Some(GroupRef(positiveInteger,1,1)),1,1),Elt(nonCollapsing,S<text:soft-page-break/>ome(GroupRef(nonCollapsing,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(nonCollapsing,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(domain,Some(Choice(Elt(naturals,None,1,1),Elt(integers,None,1,1),Elt(rationals,Some(GroupRef(rationals,0,unbounded)),1,1),Elt(algebraicNumbers,Some(GroupRef(algebraicNumbers,0,unbounded)),1,1),Elt(arctic,Some(GroupRef(arctic,0,unbounded)),1,1),Elt(tropical,Some(GroupRef(tropical,0,unbounded)),1,1),Elt(matrices,Some(GroupRef(matrices,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rationals,Some(Sequence(Elt(delta,Some(GroupRef(delta,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(algebraicNumbers,Some(Sequence(Elt(delta,Some(GroupRef(delta,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(delta,Some(Sequence(GroupRef(number,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(arctic,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(tropical,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(matrices,Some(Sequence(Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1),Elt(domain,Some(SimpleType(domain)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(redPair,Some(Choice(Elt(interpretation,Some(GroupRef(interpretation,0,unbounded)),1,1),Elt(pathOrder,Some(GroupRef(pathOrder,0,unbounded)),1,1),Elt(knuthBendixOrder,Some(GroupRef(knuthBendixOrder,0,unbounded)),1,1),Elt(scnp,Some(GroupRef(scnp,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(interpretation,Some(Sequence(Elt(type,Some(GroupRef(type_t9,1,1)),1,1),Elt(interpret,Some(GroupRef(interpret,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(function,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(pathOrder,Some(Sequence(Elt(statusPrecedence,Some(GroupRef(statusPrecedence,0,unbounded)),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(statusPrecedence,Some(Sequence(Elt(statusPrecedenceEntry,Some(GroupRef(statusPrecedenceEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(statusPrecedenceEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),GroupRef(t10,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(knuthBendixOrder,Some(Sequence(Elt(w0,Some(SimpleType(positiveInteger)),1,1),Elt(precedenceWeight,Some(GroupRef(precedenceWeight,0,unbounded)),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(precedenceWeight,Some(Sequence(Elt(precedenceWeightEntry,Some(GroupRef(precedenceWe<text:soft-page-break/>ightEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(precedenceWeightEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),Elt(weight,Some(SimpleType(nonNegativeInteger)),1,1),Elt(subtermCoefficientEntries,Some(GroupRef(subtermCoefficientEntries,0,unbounded)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(subtermCoefficientEntries,Some(Sequence(Elt(entry,Some(SimpleType(positiveInteger)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(scnp,Some(Sequence(Elt(status,Some(GroupRef(status,1,1)),1,1),Elt(levelMapping,Some(GroupRef(levelMapping,0,unbounded)),1,1),Elt(redPair,Some(SimpleType(redPair)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(levelMapping,Some(Sequence(Elt(levelMappingEntry,Some(GroupRef(levelMappingEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(levelMappingEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(positionLevelEntry,Some(GroupRef(positionLevelEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(positionLevelEntry,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(level,Some(SimpleType(nonNegativeInteger)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(type_t9,Some(Choice(Elt(polynomial,Some(GroupRef(polynomial,0,unbounded)),1,1),Elt(matrixInterpretation,Some(GroupRef(matrixInterpretation,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(polynomial,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(degree,Some(SimpleType(degree)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(matrixInterpretation,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t10,Some(Choice(Elt(lex,Some(Choice()),1,1),Elt(mul,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(status,Some(Choice(Elt(ms,None,1,1),Elt(min,None,1,1),Elt(max,None,1,1),Elt(dms,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(arithFunction,Some(Choice(Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(GroupRef(sum,0,unbounded)),1,1),Elt(product,Some(GroupRef(product,0,unbounded)),1,1),Elt(min,Some(GroupRef(min,0,unbounded)),1,1),Elt(max,Some(GroupRef(max,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sum,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(product,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Group(min,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(max,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(model,Some(Choice(Elt(finiteModel,Some(GroupRef(finiteModel,0,unbounded)),1,1),Elt(rootLabeling,Some(GroupRef(rootLabeling,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(finiteModel,Some(Sequence(Elt(carrierSize,Some(SimpleType(positiveInteger)),1,1),Elt(tupleOrder,Some(GroupRef(tupleOrder,1,1)),0,1),Elt(interpret,Some(GroupRef(interpret,0,unbounded)),0,unbounded),Elt(labeling,None,0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(arithFunction,Some(SimpleType(arithFunction)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rootLabeling,Some(Sequence(GroupRef(symbol,0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(tupleOrder,Some(Choice(Elt(pointWise,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(patternTerm,Some(Sequence(GroupRef(term,1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(patternRule,Some(Sequence(Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),GroupRef(t5,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t5,Some(Choice(Elt(originalRule,Some(GroupRef(originalRule,0,unbounded)),1,1),Elt(initialPumping,Some(GroupRef(initialPumping,0,unbounded)),1,1),Elt(initialPumpingContext,Some(GroupRef(initialPumpingContext,0,unbounded)),1,1),Elt(equivalence,Some(GroupRef(equivalence,0,unbounded)),1,1),Elt(narrowing,Some(GroupRef(narrowing,0,unbounded)),1,1),Elt(instantiation,Some(GroupRef(instantiation,0,unbounded)),1,1),Elt(rewriting,Some(GroupRef(rewriting,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(originalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(isPair,Some(SimpleType(boolean)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(initialPumping,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(initialPumpingContext,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(var,Some(SimpleType(var)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equivalence,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),GroupRef(t6,1,1),Elt(patternEquivalence,Some(GroupRef(patternEquivalence,1,1)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(narrowing,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),<text:soft-page-break/>1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(instantiation,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(t7,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rewriting,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t8,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t6,Some(Choice(Elt(left,None,1,1),Elt(right,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(patternEquivalence,Some(Choice(Elt(domainRenaming,Some(GroupRef(domainRenaming,0,unbounded)),1,1),Elt(irrelevant,Some(GroupRef(irrelevant,0,unbounded)),1,1),Elt(simplification,Some(GroupRef(simplification,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(domainRenaming,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(irrelevant,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(simplification,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t7,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Choice()),1,1),Elt(closing,Some(Choice()),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t8,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(GroupRef(pumping,0,unbounded)),1,1),Elt(closing,Some(GroupRef(closing,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(pumping,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(closing,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(substitution,Some(Sequence(Elt(substEntry,Some(GroupRef(substEntry,0,unbounded)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(substEntry,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(context,Some(Choice(Elt(box,None,1,1),Elt(funContext,Some(GroupRef(funContext,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(funContext,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(GroupRef(term,0,unbounded)),1,1),GroupRef(context,1,1),Elt(after,Some(GroupRef(term,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rewriteSequence,Some(Sequence(Elt(startTerm,Some(GroupRef(startTerm,0,unbounded)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rewriteStep,Some(Sequence(Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(rule,<text:soft-page-break/>Some(SimpleType(rule)),1,1),Elt(relative,None,0,1),GroupRef(term,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(state,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(treeAutomaton,Some(Sequence(Elt(finalStates,Some(GroupRef(finalStates,0,unbounded)),1,1),Elt(transitions,Some(GroupRef(transitions,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(transitions,Some(Sequence(Elt(transition,Some(GroupRef(transition,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(transition,Some(Sequence(Elt(lhs,Some(GroupRef(lhs,1,1)),1,1),Elt(rhs,Some(GroupRef(rhs,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rhs,Some(Sequence(Elt(state,Some(SimpleType(state)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(lhs,Some(Choice(GroupRef(lhs,0,unbounded),Elt(state,Some(GroupRef(state,1,1)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(lhs,Some(Sequence(GroupRef(symbol,1,1),Elt(height,Some(SimpleType(nonNegativeInteger)),0,1),Elt(state,Some(SimpleType(state)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(uncurryInformation,Some(Sequence(GroupRef(symbol,1,1),Elt(uncurriedSymbols,Some(GroupRef(uncurriedSymbols,0,unbounded)),1,1),Elt(uncurryRules,Some(GroupRef(uncurryRules,0,unbounded)),1,1),Elt(etaRules,Some(GroupRef(etaRules,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(uncurriedSymbols,Some(Sequence(Elt(uncurriedSymbolEntry,Some(GroupRef(uncurriedSymbolEntry,0,unbounded)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(uncurriedSymbolEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(symbol,1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(uncurryRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(etaRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(loop,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(context,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(nonLoop,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(orderingConstraints,Some(Sequence(Elt(orderingConstraintElement,Some(GroupRef(orderingConstraintElement,0,unbounded)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(orderingConstraintElement,Some(Sequence(Elt(strict,Some(SimpleType(boolean)),1,1),Elt(ceCompatible,Some(SimpleType(boolean)),1,1),Elt(monotonePositions,Some(GroupRef(monotonePositions,1,1)),0,1),Elt(ignoredPositions,Some(GroupRef(ignoredPositions,0,unbounded)),0,1),Elt(rule,Some(<text:soft-page-break/>SimpleType(rule)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ignoredPositions,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(monotonePositions,Some(Choice(Elt(argumentFilter,Some(GroupRef(argumentFilter,1,1)),1,1),Elt(everySymbolAndPosition,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(orderingConstraintProof,Some(Choice(Elt(redPair,Some(SimpleType(redPair)),1,1),Elt(satisfiableAssumption,Some(GroupRef(satisfiableAssumption,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(satisfiableAssumption,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(url,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trsInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(equations,Some(SimpleType(equations)),0,1),Elt(relativeRules,Some(GroupRef(relativeRules,0,unbounded)),0,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(relativeRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(minimal,Some(SimpleType(boolean)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(strategy,Some(Choice(Elt(innermost,None,1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(outermost,None,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conversion,Some(Sequence(Elt(startTerm,Some(GroupRef(startTerm,0,unbounded)),1,1),Elt(equationStep,Some(GroupRef(equationStep,0,unbounded)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(startTerm,Some(Sequence(GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equationStep,Some(Sequence(Elt(positionInTerm,Some(GroupRef(positionInTerm,0,unbounded)),1,1),Elt(rule,Some(SimpleType(rule)),1,1),GroupRef(t4,1,1),GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t4,Some(Choice(Elt(leftRight,None,1,1),Elt(rightLeft,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(subsumptionProof,Some(Sequence(Elt(ruleSubsumptionProof,Some(GroupRef(ruleSubsumptionProof,0,unbounded)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleSubsumptionProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Elt(innermostLhss,Some(Sequence(GroupRef(term,0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexityMeasure,Some(Choice(Elt(derivationalComplexity,Some(GroupRef(derivationalComplexity,0,unbounded)),1,1),Elt(runtimeComplexity,Some(GroupRef(runtimeComplexity,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(derivationalComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(runtimeComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1),Elt(signature,Some(SimpleType(signature)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equationalProofTree,Some(Choice(Elt(refl,Some(GroupRef(refl,0,unbounded)),1,1),Elt(sym,Some(GroupRef(sym,0,unbounded)),1,1),Elt(trans,Some(GroupRef(trans,0,unbounded)),1,1),Elt(assm,Some(GroupRef(assm,0,unbounded)),1,1),Elt(cong,Some(GroupRef(cong,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(refl,Some(Sequence(GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sym,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(trans,Some(Sequence(GroupRef(equationalProofTree,1,1),GroupRef(equationalProofTree,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(assm,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(cong,Some(Sequence(GroupRef(symbol,1,1),GroupRef(equationalProofTree,0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(completionAndNormalization,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(signature,Some(Sequence(Elt(symbol,Some(GroupRef(symbol,0,unbounded)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(symbol,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalConstraint,Some(Choice(Elt(implication,Some(GroupRef(implication,0,unbounded)),1,1),Elt(constraint,Some(GroupRef(constraint,0,unbounded)),1,1),Elt(all,Some(GroupRef(all,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(implication,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(constraint,Some(Sequence(GroupRef(term,1,1),GroupRef(t3,1,1),GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(all,Some(Sequence(Elt(var,Some(SimpleType(string)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(t3,Some(Choice(Elt(rewrite,None,1,1),Elt(strict,None,1,1),Elt(nonStrict,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalConstraintProof,Some(Choice(Elt(final,None,1,1),Elt(differentConstructor,Some(GroupRef(differentConstructor,0,unbounded)),1,1),Elt(sameConstructor,Some(GroupRef(sameConstructor,0,unbounded)),1,1),Elt(deleteCondition,Some(GroupRef(deleteCondition,0,unbounded)),1,1),Elt(variableEquation,Some(GroupRef(variableEquation,0,unbounded)),1,1),Elt(funargIntoVar,Some(GroupRef(funargIntoVar,0,unbounded)),1,1),Elt(simplifyCondition,Some(GroupRef(simplifyCondition,0,unbounded)),1,1),Elt(induction,Some(GroupRef(induction,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(differentConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sameConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(deleteCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(variableEquation,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(funargIntoVar,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(position,Some(SimpleType(position)),1,1),Elt(var,Some(SimpleType(var)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(simplifyCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(induction,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conjuncts,Some(GroupRef(conjuncts,0,unbounded)),1,1),Elt(ruleConstraintProofs,Some(GroupRef(ruleConstraintProofs,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(conjuncts,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleConstraintProofs,Some(Sequence(Elt(ruleConstraintProof,Some(GroupRef(ruleConstraintProof,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleConstraintProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(subtermVarEntries,Some(GroupRef(subtermVarEntries,0,unbounded)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintP<text:soft-page-break/>roof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(subtermVarEntries,Some(Sequence(Elt(subtermVarEntry,Some(GroupRef(subtermVarEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(subtermVarEntry,Some(Sequence(GroupRef(term,1,1),Elt(var,Some(SimpleType(var)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexityClass,Some(Choice(Elt(polynomial,Some(GroupRef(nonNegativeInteger,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(complexityProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleShifting,Some(GroupRef(ruleShifting,0,unbounded)),1,1),Elt(removeNonApplicableRules,Some(GroupRef(removeNonApplicableRules,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleShifting,Some(Sequence(Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(completionProof,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(equivalenceProof,Some(GroupRef(equivalenceProof,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equivalenceProof,Some(Sequence(Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),1,1),Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(crProof,Some(Choice(Elt(wcrAndSN,Some(GroupRef(wcrAndSN,0,unbounded)),1,1),Elt(orthogonal,None,1,1),Elt(stronglyClosed,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(wcrAndSN,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(crDisproof,Some(Choice(Elt(nonWcrAndSN,Some(GroupRef(nonWcrAndSN,0,unbounded)),1,1),Elt(nonJoinableFork,Some(GroupRef(nonJoinableFork,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(nonWcrAndSN,Some(Sequence(Elt(wcrDisproof,Some(GroupRef(wcrDisproof,1,1)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(nonJoinableFork,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t2,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(wcrDisproof,Some(Choice(Elt(nonJoinableCriticalPairsAuto,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t2,Some(Choice(Elt(distinctNormalForms,None,1,1),Elt(capNotUnif,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpRuleRemoval,<text:soft-page-break/>Some(GroupRef(dpRuleRemoval,0,unbounded)),1,1),Elt(infinitenessAssumption,Some(GroupRef(infinitenessAssumption,0,unbounded)),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(innermostLhssRemovalProc,Some(GroupRef(innermostLhssRemovalProc,0,unbounded)),1,1),Elt(innermostLhssIncreaseProc,Some(GroupRef(innermostLhssIncreaseProc,0,unbounded)),1,1),Elt(switchFullStrategyProc,Some(GroupRef(switchFullStrategyProc,0,unbounded)),1,1),Elt(instantiationProc,Some(GroupRef(instantiationProc,0,unbounded)),1,1),Elt(rewritingProc,Some(GroupRef(rewritingProc,0,unbounded)),1,1),Elt(narrowingProc,Some(GroupRef(narrowingProc,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(dpRuleRemoval,Some(Sequence(Elt(dps,Some(SimpleType(dps)),0,1),Elt(trs,Some(SimpleType(trs)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(infinitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(innermostLhssIncreaseProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(switchFullStrategyProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(instantiationProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rewritingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(narrowingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(GroupRef(narrowings,0,unbounded)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpProof,Some(Choice(Elt(pIsEmpty,None,1,1),Elt(depGraphProc,Some(GroupRef(depGraphProc,0,unbounded)),1,1),Elt(redPairProc,Some(GroupRef(redPairProc,0,unbounded)),1,1),Elt(redPairUrProc,Some(GroupRef(redPairUrProc,0,unbounded)),1,1),Elt(monoRedPairProc,Some(GroupRef(monoRedPairProc,0,unbounded)),1,1),Elt(monoRedPairUrProc,Some(GroupRef(monoRedPairUrProc,0,unbounded)),1,1),Elt(subtermProc,Some(GroupRef(subtermProc,0,unbounded)),1,1),Elt(semlabProc,Some(GroupRef(semlabProc,0,unbounded)),1,1),Elt(unlabProc,Some(GroupRef(unlabProc,0,unbounded)),1,1),Elt(sizeChangeProc,Some(GroupRef(sizeChangeProc,0,unbounded)),1,1),Elt(flatContextClosureProc,Some(GroupRef(flatContextClosureProc,0,unbounded)),1,1),Elt(argumentFilterProc,Some(GroupRef(argumentFilterProc,0,unbounded)),1,1),Elt(uncurryProc,Some(GroupRef(uncurryProc,0,unbounded)),1,1),Elt(finitenessAssumption,Some(GroupRef(finitenessAssumption,0,unbounded)),1,1),Elt(usableRulesProc,Some(GroupRef(usableRulesProc,0,unbounded)),1,1),Elt(innermostLhssRemovalProc,Some(GroupRef(innermostLhssRemovalProc,0,unbounded)),1,1),Elt(switchInnermostProc,Some(GroupRef(swit<text:soft-page-break/>chInnermostProc,0,unbounded)),1,1),Elt(rewritingProc,Some(GroupRef(rewritingProc,0,unbounded)),1,1),Elt(instantiationProc,Some(GroupRef(instantiationProc,0,unbounded)),1,1),Elt(forwardInstantiationProc,Some(GroupRef(forwardInstantiationProc,0,unbounded)),1,1),Elt(narrowingProc,Some(GroupRef(narrowingProc,0,unbounded)),1,1),Elt(splitProc,Some(GroupRef(splitProc,0,unbounded)),1,1),Elt(generalRedPairProc,Some(GroupRef(generalRedPairProc,0,unbounded)),1,1),Elt(complexConstantRemovalProc,Some(GroupRef(complexConstantRemovalProc,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(depGraphProc,Some(Sequence(Elt(component,Some(GroupRef(component,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(component,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(realScc,Some(SimpleType(boolean)),1,1),Elt(arcs,Some(GroupRef(arcs,0,unbounded)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(arcs,Some(Sequence(Elt(forwardArc,Some(SimpleType(positiveInteger)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(redPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(redPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(monoRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(monoRedPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(subtermProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(projectedRewriteSequence,Some(GroupRef(projectedRewriteSequence,0,unbounded)),0,unbounded),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(projectedRewriteSequence,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(semlabProc,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unlabProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(sizeChangeProc,Some(Sequence(GroupRef(t1,1,1),Elt(sizeChangeGraph,Some(GroupRef(sizeChangeGraph,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sizeChangeGraph,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(edge,Some(GroupRef(edge,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(edge,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(strict,Some(SimpleType(boolean)),1,1),Elt(position,Some(SimpleType(nonNegativeInteger)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(flatContextClosureProc,Some(Sequence(Elt(freshSymbol,Some(GroupRef(freshSymbol,0,unbounded)),0,1),Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(freshSymbol,Some(Sequence(GroupRef(symbol,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(argumentFilterProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(uncurryProc,Some(Sequence(Elt(applicativeTop,Some(SimpleType(positiveInteger)),0,1),Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(finitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(usableRulesProc,Some(Sequence(Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(switchInnermostProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rewritingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(instantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(GroupRef(instantiations,0,unbounded)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(forwardInstantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(GroupRef(instantiations,0,unbounded)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Group(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(narrowingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(GroupRef(narrowings,0,unbounded)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(narrowings,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(splitProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(generalRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(strict,Some(GroupRef(strict,0,unbounded)),1,1),Elt(bound,Some(GroupRef(bound,0,unbounded)),1,1),Elt(condRedPairProof,Some(GroupRef(condRedPairProof,0,unbounded)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(strict,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(bound,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(condRedPairProof,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(SimpleType(nonNegativeInteger)),1,1),Elt(after,Some(SimpleType(nonNegativeInteger)),1,1),Elt(conditions,Some(GroupRef(conditions,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(conditions,Some(Sequence(Elt(condition,Some(GroupRef(condition,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(condition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(dpSequence,Some(GroupRef(dpSequence,0,unbounded)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(dpSequence,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexConstantRemovalProc,Some(Sequence(GroupRef(term,1,1),Elt(ruleMap,Some(GroupRef(ruleMap,0,unbounded)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleMap,Some(Sequence(Elt(ruleMapEntry,Some(GroupRef(ruleMapEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleMapEntry,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rule,Some(SimpleType(rule)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t1,Some(Choice(Elt(subtermCriterion,None,1,1),Elt(reductionPair,Some(GroupRef(reductionPair,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(reductionPair,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(usableRules,So<text:soft-page-break/>me(SimpleType(usableRules)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equationalProof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1),Elt(equationalProofTree,Some(GroupRef(equationalProofTree,0,unbounded)),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equationalProofTree,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equationalDisproof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(relativeNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(GroupRef(ruleRemoval,0,unbounded)),1,1),Elt(nonterminationAssumption,Some(GroupRef(nonterminationAssumption,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(relativeTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(sIsEmpty,Some(GroupRef(sIsEmpty,0,unbounded)),1,1),Elt(ruleRemoval,Some(GroupRef(ruleRemoval,0,unbounded)),1,1),Elt(semlab,Some(GroupRef(semlab,0,unbounded)),1,1),Elt(unlab,Some(GroupRef(unlab,0,unbounded)),1,1),Elt(stringReversal,Some(GroupRef(stringReversal,0,unbounded)),1,1),Elt(relativeTerminationAssumption,Some(GroupRef(relativeTerminationAssumption,0,unbounded)),1,1),Elt(uncurry,Some(GroupRef(uncurry,0,unbounded)),1,1),Elt(equalityRemoval,Some(GroupRef(equalityRemoval,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sIsEmpty,Some(Sequence(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(relativeTerminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Group(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equalityRemoval,Some(Sequence(Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trsNonterminationProof,Some(Choice(Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(GroupRef(ruleRemoval,0,unbounded)),1,1),Elt(stringReversal,Some(GroupRef(stringReversal,0,unbounded)),1,1),Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpTrans,Some(GroupRef(dpTrans,0,unbounded)),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(nonterminationAssumption,Some(GroupRef(nonterminationAssumption,0,unbounded)),1,1),Elt(innermostLhssIncrease,Some(GroupRef(innermostLhssIncrease,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(innermostLhssIncrease,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trsTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleRemoval,Some(GroupRef(ruleRemoval,0,unbounded)),1,1),Elt(dpTrans,Some(GroupRef(dpTrans,0,unbounded)),1,1),Elt(semlab,Some(GroupRef(semlab,0,unbounded)),1,1),Elt(unlab,Some(GroupRef(unlab,0,unbounded)),1,1),Elt(stringReversal,Some(GroupRef(stringReversal,0,unbounded)),1,1),Elt(flatContextClosure,Some(GroupRef(flatContextClosure,0,unbounded)),1,1),Elt(terminationAssumption,Some(GroupRef(terminationAssumption,0,unbounded)),1,1),Elt(uncurry,Some(GroupRef(uncurry,0,unbounded)),1,1),Elt(bounds,Some(GroupRef(bounds,0,unbounded)),1,1),Elt(switchInnermost,Some(GroupRef(switchInnermost,0,unbounded)),1,1),Elt(split,Some(GroupRef(split,0,unbounded)),1,1),Elt(removeNonApplicableRules,Some(GroupRef(removeNonApplicableRules,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(trsTerminationProof,Some(Simp<text:soft-page-break/>leType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(flatContextClosure,Some(Sequence(Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(terminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(bounds,Some(Sequence(Elt(type,Some(GroupRef(type,1,1)),1,1),Elt(bound,Some(SimpleType(nonNegativeInteger)),1,1),Elt(finalStates,Some(GroupRef(finalStates,0,unbounded)),1,1),Elt(treeAutomaton,Some(SimpleType(treeAutomaton)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(switchInnermost,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(split,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(type,Some(Choice(Elt(roof,None,1,1),Elt(match,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(wcrProof,Some(Choice(Elt(joinableCriticalPairs,Some(GroupRef(joinableCriticalPairs,0,unbounded)),1,1),Elt(joinableCriticalPairsAuto,None,1,1),Elt(joinableCriticalPairsBFS,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(joinableCriticalPairs,Some(Sequence(Elt(joinableCriticalPair,Some(GroupRef(joinableCriticalPair,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(joinableCriticalPair,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(quasiReductiveProof,Some(Choice(Elt(unraveling,Some(GroupRef(unraveling,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(unraveling,Some(Sequence(Elt(unravelingInformation,Some(GroupRef(unravelingInformation,0,unbounded)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unravelingInformation,Some(Sequence(Elt(unravelingEntry,Some(GroupRef(unravelingEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unravelingEntry,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),1,1),Elt(rule,Some(SimpleType(rule)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(proof,Some(Choice(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(crProof,Some(SimpleType(crProof)),1,1),Elt(crDisproof,Some(SimpleType(crDisproof)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1),Elt(equationalProof,Some(SimpleType(equationalProof)),1,1),Elt(equationalDisproof,Some(SimpleType(equationalDisproof)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1),Elt(quasiReductiveProof,Some(SimpleType(quasiReductiveProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(certificationProblem,Some(Sequence(Elt(input,Some(GroupRef(input,1,1)),1,1),Elt(cpfVersion,Some(SimpleType(string)),1,1),Elt(proof,Some(SimpleType(proof)),1,1),Elt(origin,Some(GroupRef(origin,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(origin,Some(Sequence(Elt(proofOrigin,Some(GroupRef(proofOrigin,0,unbounded)),1,1),Elt(inputOrigin,Some(GroupRef(inputOrigin,0,unbounded)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(proofOrigin,Some(Sequence(Elt(tool,Some(GroupRef(tool,0,unbounded)),1,unbounded),Elt(toolUser,Some(GroupRef(toolUser,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(tool,Some(Sequence(Elt(name,Some(SimpleType(string)),1,1),Elt(version,Some(SimpleType(string)),1,1),Elt(strategy,Some(SimpleType(string)),0,1),Elt(url,Some(SimpleType(url)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(toolUser,Some(Sequence(Elt(firstName,Some(SimpleType(string)),1,1),Elt(lastName,Some(SimpleType(string)),1,1),Elt(url,Some(SimpleType(url)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(inputOrigin,Some(Sequence(Elt(tpdbReference,Some(GroupRef(tpdbReference,0,unbounded)),0,1),Elt(source,Some(SimpleType(string)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(tpdbReference,Some(Sequence(Elt(fileName,Some(SimpleType(string)),1,1),Elt(tpdbId,Some(SimpleType(long)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(input,Some(Choice(Elt(trsInput,Some(GroupRef(trsInput,1,1)),1,1),Elt(dpInput,Some(GroupRef(dpInput,1,1)),1,1),Elt(orderingConstraints,Some(GroupRef(orderingConstraints,1,1)),1,1),Elt(completionInput,Some(GroupRef(completionInput,0,unbounded)),1,1),Elt(equationalReasoningInput,Some(G<text:soft-page-break/>roupRef(equationalReasoningInput,0,unbounded)),1,1),Elt(complexityInput,Some(GroupRef(complexityInput,0,unbounded)),1,1),Elt(ctrsInput,Some(GroupRef(ctrsInput,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(completionInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(trs,Some(SimpleType(trs)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equationalReasoningInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(equation,Some(GroupRef(equation,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equation,Some(Sequence(GroupRef(term,1,1),GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexityInput,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1),GroupRef(complexityMeasure,1,1),GroupRef(complexityClass,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ctrsInput,Some(Sequence(Elt(conditionalRules,Some(SimpleType(conditionalRules)),1,1))),1,unbounded)*)</text:p>
   <text:p text:style-name="P14"/>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">and lhs x = get_son &quot;lhs&quot; lhs_val x</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">and lhs_val xs = match xs with</text:p>
   <text:p text:style-name="P2"><text:s text:c="2"/>| x when is_lhs x -&gt;</text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>let item_symbol, xs = parse_one symbol_val [xs] in <text:s text:c="3"/></text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>let item_height1, xs = parse_option (get_son &quot;height&quot; nonNegativeInteger) xs in <text:s text:c="3"/></text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>let item_state, xs = parse_list state xs in</text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>check_emptyness xs;</text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>Lhs_lhs (item_symbol, item_height1, item_state)</text:p>
   <text:p text:style-name="P2"><text:s text:c="2"/>| x when is_state x -&gt;</text:p>
   <text:p text:style-name="P2"><text:s text:c="6"/>let item_state, xs = parse_one state [xs] in</text:p>
   <text:p text:style-name="P2"><text:s text:c="8"/>check_emptyness xs;</text:p>
   <text:p text:style-name="P2"><text:s text:c="6"/>Lhs_state item_state</text:p>
   <text:p text:style-name="P2"><text:s text:c="2"/>| x -&gt; error_xml x &quot;not a lhs&quot;</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Remove all inner sequence by groupref and generate a new group </text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">(*Elt(name,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(label,Some(Choice(Elt(numberLabel,Some(GroupRef(numberLabel,0,unbounded)),1,1),Elt(symbolLabel,Some(GroupRef(symbolLabel,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(numberLabel,Some(Sequence(Elt(number,Some(SimpleType(nonNegativeInteger)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(symbolLabel,Some(Sequence(GroupRef(symbol,0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(symbol,Some(Choice(Elt(name,Some(GroupRef(name,1,1)),1,1),Elt(sharp,Some(GroupRef(sharp,0,unbounded)),1,1),Elt(labeledSymbol,Some(GroupRef(labeledSymbol,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sharp,Some(Sequence(GroupRef(symbol,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(labeledSymbol,Some(Sequence(GroupRef(symbol,1,1),GroupRef(label,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(var,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(term,Some(Choice(Elt(var,Some(GroupRef(var,1,1)),1,1),Elt(funapp,Some(GroupRef(funapp,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(funapp,Some(Sequence(GroupRef(symbol,1,1),Elt(arg,Some(GroupRef(term,1,1)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rule,Some(Sequence(Elt(lhs,Some(GroupRef(term,1,1)),1,1),Elt(rhs,Some(GroupRef(term,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Elt(conditionalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rules,Some(Sequence(Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalRules,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dps,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trs,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(usableRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(number,Some(Choice(Elt(integer,Some(GroupRef(integer,1,1)),1,1),Elt(rational,Some(GroupRef(rational,0,unbounded)),1,1),Elt(algebraic,Some(GroupRef(algebraic,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rational,Some(Sequence(Elt(numerator,Some(SimpleType(integer)),1,1),Elt(denominator,Some(SimpleType(positiveInteger)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(algebraic,Some(Sequence(GroupRef(number,1,1),GroupRef(number,1,1),GroupRef(number,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(coefficient,Some(Choice(GroupRef(number,1,1),Elt(minusInfinity,None,1,1),Elt(plusInfinity,None,1,1),Elt(vector,Some(SimpleType(vector)),1,1),Elt(matrix,Some(SimpleType(matrix)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(vector,Some(Sequence(Elt(coefficient,Some(SimpleType(coefficient)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(matrix,Some(Sequence(Elt(vector,Some(SimpleType(vector)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(polynomial,Some(Choice(Elt(coefficient,Some(SimpleType(coefficient)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(GroupRef(sum_t28,0,unbounded)),1,1),Elt(product,Some(GroupRef(product_t29,0,unbounded)),1,1),Elt(max,Some(GroupRef(max_t30,0,unbounded)),1,1),Elt(min,Some(GroupRef(min_t31,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sum_t28,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(product_t29,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(max_t30,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(min_t31,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(function,Some(Choice(Elt(polynomial,Some(GroupRef(polynomial,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Elt(arity,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(strictDimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(degree,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(position,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(argumentFilter,Some(Sequence(Elt(argumentFilterEntry,Some(GroupRef(argumentFilterEntry,0,unbounded)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(argumentFilterEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(t11,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t11,Some(Choice(Elt(collapsing,Some(GroupRef(positiveInteger,1,1)),1,1),Elt(nonCollapsing,Some(GroupRef(nonCollapsing,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(nonCollapsing,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(domain,Some(Choice(Elt(naturals,None,1,1),Elt(integers,None,1,1),Elt(rationals,Some(GroupRef(rationals,0,unbounded)),1,1),Elt(algebraicNumbers,Some(GroupRef(algebraicNumbers,0,unbounded)),1,1),Elt(arctic,Some(GroupRef(arctic,0,unbounded)),1,1),Elt(tropical,Some(GroupRef(tropical,0,unbounded)),1,1),Elt(matrices,Some(GroupRef(matrices,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rationals,Some(Sequence(Elt(delta,Some(GroupRef(delta,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(algebraicNumbers,Some(Sequence(Elt(delta,Some(GroupRef(delta,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(delta,Some(Sequence(GroupRef(number,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(arctic,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(tropical,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(matrices,Some(Sequence(Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1),Elt(domain,Some(SimpleType(domain)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(redPair,Some(Choice(Elt(interpretation,Some(GroupRef(interpretation,0,unbounded)),1,1),Elt(pathOrder,Some(GroupRef(pathOrder,0,unbounded)),1,1),Elt(knuthBendixOrder,Some(GroupRef(knuthBendixOrder,0,unbounded)),1,1),Elt(scnp,Some(GroupRef(scnp,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(interpretation,Some(Sequence(Elt(type,Some(GroupRef(type_t9,1,1)),1,1),Elt(interpret,Some(G<text:soft-page-break/>roupRef(interpret_t27,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(interpret_t27,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(function,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(pathOrder,Some(Sequence(Elt(statusPrecedence,Some(GroupRef(statusPrecedence,0,unbounded)),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(statusPrecedence,Some(Sequence(Elt(statusPrecedenceEntry,Some(GroupRef(statusPrecedenceEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(statusPrecedenceEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),GroupRef(t10,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(knuthBendixOrder,Some(Sequence(Elt(w0,Some(SimpleType(positiveInteger)),1,1),Elt(precedenceWeight,Some(GroupRef(precedenceWeight,0,unbounded)),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(precedenceWeight,Some(Sequence(Elt(precedenceWeightEntry,Some(GroupRef(precedenceWeightEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(precedenceWeightEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),Elt(weight,Some(SimpleType(nonNegativeInteger)),1,1),Elt(subtermCoefficientEntries,Some(GroupRef(subtermCoefficientEntries,0,unbounded)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(subtermCoefficientEntries,Some(Sequence(Elt(entry,Some(SimpleType(positiveInteger)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(scnp,Some(Sequence(Elt(status,Some(GroupRef(status,1,1)),1,1),Elt(levelMapping,Some(GroupRef(levelMapping,0,unbounded)),1,1),Elt(redPair,Some(SimpleType(redPair)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(levelMapping,Some(Sequence(Elt(levelMappingEntry,Some(GroupRef(levelMappingEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(levelMappingEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(positionLevelEntry,Some(GroupRef(positionLevelEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(positionLevelEntry,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(level,Some(SimpleType(nonNegativeInteger)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(type_t9,Some(Choice(Elt(polynomial,Some(GroupRef(polynomial,0,unbounded)),1,1),Elt(matrixInterpretation,Some(GroupRef(matrixInterpretation,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(polynomial,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(degree,Some(SimpleType(degree)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(matrixInterpretation,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(dimensio<text:soft-page-break/>n,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t10,Some(Choice(Elt(lex,Some(Choice()),1,1),Elt(mul,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(status,Some(Choice(Elt(ms,None,1,1),Elt(min,None,1,1),Elt(max,None,1,1),Elt(dms,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(arithFunction,Some(Choice(Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(GroupRef(sum,0,unbounded)),1,1),Elt(product,Some(GroupRef(product,0,unbounded)),1,1),Elt(min,Some(GroupRef(min,0,unbounded)),1,1),Elt(max,Some(GroupRef(max,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sum,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(product,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(min,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(max,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(model,Some(Choice(Elt(finiteModel,Some(GroupRef(finiteModel,0,unbounded)),1,1),Elt(rootLabeling,Some(GroupRef(rootLabeling,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(finiteModel,Some(Sequence(Elt(carrierSize,Some(SimpleType(positiveInteger)),1,1),Elt(tupleOrder,Some(GroupRef(tupleOrder,1,1)),0,1),Elt(interpret,Some(GroupRef(interpret,0,unbounded)),0,unbounded),Elt(labeling,None,0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(arithFunction,Some(SimpleType(arithFunction)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rootLabeling,Some(Sequence(GroupRef(symbol,0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(tupleOrder,Some(Choice(Elt(pointWise,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(patternTerm,Some(Sequence(GroupRef(term,1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(patternRule,Some(Sequence(Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),GroupRef(t5,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t5,Some(Choice(Elt(originalRule,Some(GroupRef(originalRule,0,unbounded)),1,1),Elt(initialPumping,Some(GroupRef(initialPumping,0,unbounded)),1,1),Elt(initialPumpingContext,Some(GroupRef(initialPumpingContext,0,unbounded)),1,1),Elt(equivalence,Some(GroupRef(equivalence,0,unbounded)),1,1),Elt(narrowing,Some(GroupRef(narrowing,0,unbounded)),1,1),Elt(instantiation,Some(GroupRef(<text:soft-page-break/>instantiation,0,unbounded)),1,1),Elt(rewriting,Some(GroupRef(rewriting,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(originalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(isPair,Some(SimpleType(boolean)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(initialPumping,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(initialPumpingContext,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(var,Some(SimpleType(var)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equivalence,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),GroupRef(t6,1,1),Elt(patternEquivalence,Some(GroupRef(patternEquivalence,1,1)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(narrowing,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(instantiation,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(t7,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rewriting,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t8,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t6,Some(Choice(Elt(left,None,1,1),Elt(right,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(patternEquivalence,Some(Choice(Elt(domainRenaming,Some(GroupRef(domainRenaming,0,unbounded)),1,1),Elt(irrelevant,Some(GroupRef(irrelevant,0,unbounded)),1,1),Elt(simplification,Some(GroupRef(simplification,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(domainRenaming,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(irrelevant,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(simplification,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t7,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Choice()),1,1),Elt(closing,Some(Choice()),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t8,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(GroupRef(pumping,0,unbounded)),1,1),Elt(closing,Some(GroupRef(closing,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(pumping,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(closing,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(substitution,Some(Sequence(Elt(substEntry,Some(GroupRef(substEntry,0,unbounded)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(substEntry,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(context,Some(Choice(Elt(box,None,1,1),Elt(funContext,Some(GroupRef(funContext,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(funContext,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(GroupRef(term,0,unbounded)),1,1),GroupRef(context,1,1),Elt(after,Some(GroupRef(term,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rewriteSequence,Some(Sequence(Elt(startTerm,Some(GroupRef(startTerm,0,unbounded)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rewriteStep,Some(Sequence(Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(rule,Some(SimpleType(rule)),1,1),Elt(relative,None,0,1),GroupRef(term,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(state,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(treeAutomaton,Some(Sequence(Elt(finalStates,Some(GroupRef(finalStates,0,unbounded)),1,1),Elt(transitions,Some(GroupRef(transitions,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(transitions,Some(Sequence(Elt(transition,Some(GroupRef(transition,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(transition,Some(Sequence(Elt(lhs,Some(GroupRef(lhs,1,1)),1,1),Elt(rhs,Some(GroupRef(rhs,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rhs,Some(Sequence(Elt(state,Some(SimpleType(state)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(lhs,Some(Choice(GroupRef(t26,0,unbounded),Elt(state,Some(GroupRef(state,1,1)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t26,Some(Sequence(GroupRef(symbol,1,1),Elt(height,Some(SimpleType(nonNegativeInteger)),0,1),Elt(state,Some(SimpleType(state)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(uncurryInformation,Some(Sequence(GroupRef(symbol,1,1),Elt(uncurriedSymbols,Some(GroupRef(uncurriedSymbols,0,unbounded)),1,1),Elt(uncurryRules,Some(GroupRef(uncurryRules,0,unbounded)),1,1),Elt(etaRules,Some(GroupRef(etaRules,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(uncurriedSymbols,Some(Sequence(Elt(uncurriedSymbolEntry,Some(GroupRef(uncurriedSymbolEntry,0,unbounded)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(uncurriedSymbolEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(symbol,1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(uncurryRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(etaRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(loop,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(context,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(nonLoop,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(orderingConstraints,Some(Sequence(Elt(orderingConstraintElement,Some(GroupRef(orderingConstraintElement,0,unbounded)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(orderingConstraintElement,Some(Sequence(Elt(strict,Some(SimpleType(boolean)),1,1),Elt(ceCompatible,Some(SimpleType(boolean)),1,1),Elt(monotonePositions,Some(GroupRef(monotonePositions,1,1)),0,1),Elt(ignoredPositions,Some(GroupRef(ignoredPositions,0,unbounded)),0,1),Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ignoredPositions,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(monotonePositions,Some(Choice(Elt(argumentFilter,Some(GroupRef(argumentFilter,1,1)),1,1),Elt(everySymbolAndPosition,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(orderingConstraintProof,Some(Choice(Elt(redPair,Some(SimpleType(redPair)),1,1),Elt(satisfiableAssumption,Some(GroupRef(satisfiableAssumption,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(satisfiableAssumption,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(url,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trsInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(equations,Some(SimpleType(equations)),0,1),Elt(relativeRules,Some(GroupRef(relativeRules,0,unbounded)),0,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(relativeRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(minimal,Some(SimpleType(boolean)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(strategy,Some(Choice(Elt(innermost,None,1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(outermost,None,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Elt(conversion,Some(Sequence(Elt(startTerm,Some(GroupRef(startTerm,0,unbounded)),1,1),Elt(equationStep,Some(GroupRef(equationStep,0,unbounded)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(startTerm,Some(Sequence(GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equationStep,Some(Sequence(Elt(positionInTerm,Some(GroupRef(positionInTerm,0,unbounded)),1,1),Elt(rule,Some(SimpleType(rule)),1,1),GroupRef(t4,1,1),GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t4,Some(Choice(Elt(leftRight,None,1,1),Elt(rightLeft,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(subsumptionProof,Some(Sequence(Elt(ruleSubsumptionProof,Some(GroupRef(ruleSubsumptionProof,0,unbounded)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleSubsumptionProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(innermostLhss,Some(Sequence(GroupRef(term,0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexityMeasure,Some(Choice(Elt(derivationalComplexity,Some(GroupRef(derivationalComplexity,0,unbounded)),1,1),Elt(runtimeComplexity,Some(GroupRef(runtimeComplexity,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(derivationalComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(runtimeComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1),Elt(signature,Some(SimpleType(signature)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equationalProofTree,Some(Choice(Elt(refl,Some(GroupRef(refl,0,unbounded)),1,1),Elt(sym,Some(GroupRef(sym,0,unbounded)),1,1),Elt(trans,Some(GroupRef(trans,0,unbounded)),1,1),Elt(assm,Some(GroupRef(assm,0,unbounded)),1,1),Elt(cong,Some(GroupRef(cong,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(refl,Some(Sequence(GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sym,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(trans,Some(Sequence(GroupRef(equationalProofTree,1,1),GroupRef(equationalProofTree,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(assm,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(cong,Some(Sequence(GroupRef(symbol,1,1),GroupRef(equationalProofTree,0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(completionAndNormalization,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(completionP<text:soft-page-break/>roof,Some(SimpleType(completionProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(signature,Some(Sequence(Elt(symbol,Some(GroupRef(symbol,0,unbounded)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(symbol,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalConstraint,Some(Choice(Elt(implication,Some(GroupRef(implication,0,unbounded)),1,1),Elt(constraint,Some(GroupRef(constraint,0,unbounded)),1,1),Elt(all,Some(GroupRef(all,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(implication,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(constraint,Some(Sequence(GroupRef(term,1,1),GroupRef(t3,1,1),GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(all,Some(Sequence(Elt(var,Some(SimpleType(string)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t3,Some(Choice(Elt(rewrite,None,1,1),Elt(strict,None,1,1),Elt(nonStrict,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalConstraintProof,Some(Choice(Elt(final,None,1,1),Elt(differentConstructor,Some(GroupRef(differentConstructor,0,unbounded)),1,1),Elt(sameConstructor,Some(GroupRef(sameConstructor,0,unbounded)),1,1),Elt(deleteCondition,Some(GroupRef(deleteCondition,0,unbounded)),1,1),Elt(variableEquation,Some(GroupRef(variableEquation,0,unbounded)),1,1),Elt(funargIntoVar,Some(GroupRef(funargIntoVar,0,unbounded)),1,1),Elt(simplifyCondition,Some(GroupRef(simplifyCondition,0,unbounded)),1,1),Elt(induction,Some(GroupRef(induction,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(differentConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sameConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(deleteCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(variableEquation,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(funargIntoVar,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(position,Some(SimpleType(position)),1,1),Elt(var,Some(SimpleType(var)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(simplifyCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(induction,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conjuncts,Some(GroupRef(conjuncts,0,unbounded)),1,1),Elt(ruleConstraintProofs,Some(GroupRef(ruleConstraintProofs,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(conjuncts,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleConstraintProofs,Some(Sequence(Elt(ruleConstraintProof,Some(GroupRef(ruleConstraintProof,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleConstraintProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(subtermVarEntries,Some(GroupRef(subtermVarEntries,0,unbounded)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(subtermVarEntries,Some(Sequence(Elt(subtermVarEntry,Some(GroupRef(subtermVarEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(subtermVarEntry,Some(Sequence(GroupRef(term,1,1),Elt(var,Some(SimpleType(var)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexityClass,Some(Choice(Elt(polynomial,Some(GroupRef(nonNegativeInteger,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(complexityProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleShifting,Some(GroupRef(ruleShifting,0,unbounded)),1,1),Elt(removeNonApplicableRules,Some(GroupRef(removeNonApplicableRules_t25,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleShifting,Some(Sequence(Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(removeNonApplicableRules_t25,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(completionProof,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(equivalenceProof,Some(GroupRef(equivalenceProof,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equivalenceProof,Some(Sequence(Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),1,1),Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(crProof,Some(Choice(Elt(wcrAndSN,Some(GroupRef(wcrAndSN,0,unbounded)),1,1),Elt(orthogon<text:soft-page-break/>al,None,1,1),Elt(stronglyClosed,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(wcrAndSN,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(crDisproof,Some(Choice(Elt(nonWcrAndSN,Some(GroupRef(nonWcrAndSN,0,unbounded)),1,1),Elt(nonJoinableFork,Some(GroupRef(nonJoinableFork,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(nonWcrAndSN,Some(Sequence(Elt(wcrDisproof,Some(GroupRef(wcrDisproof,1,1)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(nonJoinableFork,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t2,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(wcrDisproof,Some(Choice(Elt(nonJoinableCriticalPairsAuto,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t2,Some(Choice(Elt(distinctNormalForms,None,1,1),Elt(capNotUnif,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpRuleRemoval,Some(GroupRef(dpRuleRemoval,0,unbounded)),1,1),Elt(infinitenessAssumption,Some(GroupRef(infinitenessAssumption,0,unbounded)),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(innermostLhssRemovalProc,Some(GroupRef(innermostLhssRemovalProc_t21,0,unbounded)),1,1),Elt(innermostLhssIncreaseProc,Some(GroupRef(innermostLhssIncreaseProc,0,unbounded)),1,1),Elt(switchFullStrategyProc,Some(GroupRef(switchFullStrategyProc,0,unbounded)),1,1),Elt(instantiationProc,Some(GroupRef(instantiationProc_t22,0,unbounded)),1,1),Elt(rewritingProc,Some(GroupRef(rewritingProc_t23,0,unbounded)),1,1),Elt(narrowingProc,Some(GroupRef(narrowingProc_t24,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(dpRuleRemoval,Some(Sequence(Elt(dps,Some(SimpleType(dps)),0,1),Elt(trs,Some(SimpleType(trs)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(infinitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(innermostLhssRemovalProc_t21,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(innermostLhssIncreaseProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(switchFullStrategyProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(instantiationProc_t22,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rewritingProc_t23,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleTyp<text:soft-page-break/>e(usableRules)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(narrowingProc_t24,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(GroupRef(narrowings,0,unbounded)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpProof,Some(Choice(Elt(pIsEmpty,None,1,1),Elt(depGraphProc,Some(GroupRef(depGraphProc,0,unbounded)),1,1),Elt(redPairProc,Some(GroupRef(redPairProc,0,unbounded)),1,1),Elt(redPairUrProc,Some(GroupRef(redPairUrProc,0,unbounded)),1,1),Elt(monoRedPairProc,Some(GroupRef(monoRedPairProc,0,unbounded)),1,1),Elt(monoRedPairUrProc,Some(GroupRef(monoRedPairUrProc,0,unbounded)),1,1),Elt(subtermProc,Some(GroupRef(subtermProc,0,unbounded)),1,1),Elt(semlabProc,Some(GroupRef(semlabProc,0,unbounded)),1,1),Elt(unlabProc,Some(GroupRef(unlabProc,0,unbounded)),1,1),Elt(sizeChangeProc,Some(GroupRef(sizeChangeProc,0,unbounded)),1,1),Elt(flatContextClosureProc,Some(GroupRef(flatContextClosureProc,0,unbounded)),1,1),Elt(argumentFilterProc,Some(GroupRef(argumentFilterProc,0,unbounded)),1,1),Elt(uncurryProc,Some(GroupRef(uncurryProc,0,unbounded)),1,1),Elt(finitenessAssumption,Some(GroupRef(finitenessAssumption,0,unbounded)),1,1),Elt(usableRulesProc,Some(GroupRef(usableRulesProc,0,unbounded)),1,1),Elt(innermostLhssRemovalProc,Some(GroupRef(innermostLhssRemovalProc,0,unbounded)),1,1),Elt(switchInnermostProc,Some(GroupRef(switchInnermostProc,0,unbounded)),1,1),Elt(rewritingProc,Some(GroupRef(rewritingProc,0,unbounded)),1,1),Elt(instantiationProc,Some(GroupRef(instantiationProc,0,unbounded)),1,1),Elt(forwardInstantiationProc,Some(GroupRef(forwardInstantiationProc,0,unbounded)),1,1),Elt(narrowingProc,Some(GroupRef(narrowingProc,0,unbounded)),1,1),Elt(splitProc,Some(GroupRef(splitProc,0,unbounded)),1,1),Elt(generalRedPairProc,Some(GroupRef(generalRedPairProc,0,unbounded)),1,1),Elt(complexConstantRemovalProc,Some(GroupRef(complexConstantRemovalProc,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(depGraphProc,Some(Sequence(Elt(component,Some(GroupRef(component,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(component,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(realScc,Some(SimpleType(boolean)),1,1),Elt(arcs,Some(GroupRef(arcs,0,unbounded)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(arcs,Some(Sequence(Elt(forwardArc,Some(SimpleType(positiveInteger)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(redPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(redPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(monoRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(monoRedPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(subtermProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(projectedRewriteSequence,Some(GroupRef(projectedRewriteSequence,0,unbounded)),0,unbounded),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(projectedRewriteSequence,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(semlabProc,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unlabProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sizeChangeProc,Some(Sequence(GroupRef(t1,1,1),Elt(sizeChangeGraph,Some(GroupRef(sizeChangeGraph,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sizeChangeGraph,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(edge,Some(GroupRef(edge,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(edge,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(strict,Some(SimpleType(boolean)),1,1),Elt(position,Some(SimpleType(nonNegativeInteger)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(flatContextClosureProc,Some(Sequence(Elt(freshSymbol,Some(GroupRef(freshSymbol,0,unbounded)),0,1),Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(freshSymbol,Some(Sequence(GroupRef(symbol,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(argumentFilterProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(uncurryProc,Some(Sequence(Elt(applicativeTop,Some(SimpleType(positiveInteger)),0,1),Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(finitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(usableRulesProc,Some(Sequence(Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(switchInnermostProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(rewritingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(instantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(GroupRef(instantiations,0,unbounded)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(forwardInstantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(GroupRef(instantiations,0,unbounded)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(narrowingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(GroupRef(narrowings,0,unbounded)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(narrowings,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(splitProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(generalRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(strict,Some(GroupRef(strict,0,unbounded)),1,1),Elt(bound,Some(GroupRef(bound,0,unbounded)),1,1),Elt(condRedPairProof,Some(GroupRef(condRedPairProof,0,unbounded)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(strict,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(bound,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(condRedPairProof,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(SimpleType(nonNegativeInteger)),1,1),Elt(after,Some(SimpleType(nonNegativeInteger)),1,1),Elt(conditions,Some(GroupRef(conditions,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(conditions,Some(Sequence(Elt(condition,Some(GroupRef(condition,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(condition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),<text:soft-page-break/>1,1),Elt(dpSequence,Some(GroupRef(dpSequence,0,unbounded)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(dpSequence,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexConstantRemovalProc,Some(Sequence(GroupRef(term,1,1),Elt(ruleMap,Some(GroupRef(ruleMap,0,unbounded)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleMap,Some(Sequence(Elt(ruleMapEntry,Some(GroupRef(ruleMapEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleMapEntry,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rule,Some(SimpleType(rule)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t1,Some(Choice(Elt(subtermCriterion,None,1,1),Elt(reductionPair,Some(GroupRef(reductionPair,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(reductionPair,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equationalProof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1),Elt(equationalProofTree,Some(GroupRef(equationalProofTree,0,unbounded)),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equationalProofTree,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equationalDisproof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(relativeNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(GroupRef(ruleRemoval_t20,0,unbounded)),1,1),Elt(nonterminationAssumption,Some(GroupRef(nonterminationAssumption,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleRemoval_t20,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(relativeTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(sIsEmpty,Some(GroupRef(sIsEmpty,0,unbounded)),1,1),Elt(ruleRemoval,Some(GroupRef(ruleRemoval_t15,0,unbounded)),1,1),Elt(semlab,Some(GroupRef(semlab_t16,0,unbounded)),1,1),Elt(unlab,Some(GroupRef(unlab_t17,0,unbounded)),1,1),Elt(stringReversal,Some(GroupRef(stringReversal_t18,0,unbounded)),1,1),Elt(relativeTerminationAssumption,Some(GroupRef(relativeTerminationAssumption,0,unbounded)),1,1),Elt(uncurry,Some(GroupRef(uncurry_t19,0,unbounded)),1,1),Elt(equalityRemoval,Some(GroupRef(equalityRemoval,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(sIsEmpty,Some(Sequence(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(ruleRemoval_t15,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(semlab_t16,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unlab_t17,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(stringReversal_t18,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(relativeTerminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(uncurry_t19,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equalityRemoval,Some(Sequence(Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trsNonterminationProof,Some(Choice(Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(GroupRef(ruleRemoval_t12,0,unbounded)),1,1),Elt(stringReversal,Some(GroupRef(stringReversal_t13,0,unbounded)),1,1),Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpTrans,Some(GroupRef(dpTrans_t14,0,unbounded)),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(nonterminationAssumption,Some(GroupRef(nonterminationAssumption,0,unbounded)),1,1),Elt(innermostLhssIncrease,Some(GroupRef(innermostLhssIncrease,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleRemoval_t12,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(stringReversal_t13,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(dpTrans_t14,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(innermostLhssIncrease,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Elt(trsTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleRemoval,Some(GroupRef(ruleRemoval,0,unbounded)),1,1),Elt(dpTrans,Some(GroupRef(dpTrans,0,unbounded)),1,1),Elt(semlab,Some(GroupRef(semlab,0,unbounded)),1,1),Elt(unlab,Some(GroupRef(unlab,0,unbounded)),1,1),Elt(stringReversal,Some(GroupRef(stringReversal,0,unbounded)),1,1),Elt(flatContextClosure,Some(GroupRef(flatContextClosure,0,unbounded)),1,1),Elt(terminationAssumption,Some(GroupRef(terminationAssumption,0,unbounded)),1,1),Elt(uncurry,Some(GroupRef(uncurry,0,unbounded)),1,1),Elt(bounds,Some(GroupRef(bounds,0,unbounded)),1,1),Elt(switchInnermost,Some(GroupRef(switchInnermost,0,unbounded)),1,1),Elt(split,Some(GroupRef(split,0,unbounded)),1,1),Elt(removeNonApplicableRules,Some(GroupRef(removeNonApplicableRules,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(flatContextClosure,Some(Sequence(Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(terminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(bounds,Some(Sequence(Elt(type,Some(GroupRef(type,1,1)),1,1),Elt(bound,Some(SimpleType(nonNegativeInteger)),1,1),Elt(finalStates,Some(GroupRef(finalStates,0,unbounded)),1,1),Elt(treeAutomaton,Some(SimpleType(treeAutomaton)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(switchInnermost,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(split,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(Simple<text:soft-page-break/>Type(trsTerminationProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(type,Some(Choice(Elt(roof,None,1,1),Elt(match,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(wcrProof,Some(Choice(Elt(joinableCriticalPairs,Some(GroupRef(joinableCriticalPairs,0,unbounded)),1,1),Elt(joinableCriticalPairsAuto,None,1,1),Elt(joinableCriticalPairsBFS,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(joinableCriticalPairs,Some(Sequence(Elt(joinableCriticalPair,Some(GroupRef(joinableCriticalPair,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(joinableCriticalPair,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(quasiReductiveProof,Some(Choice(Elt(unraveling,Some(GroupRef(unraveling,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unraveling,Some(Sequence(Elt(unravelingInformation,Some(GroupRef(unravelingInformation,0,unbounded)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unravelingInformation,Some(Sequence(Elt(unravelingEntry,Some(GroupRef(unravelingEntry,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(unravelingEntry,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),1,1),Elt(rule,Some(SimpleType(rule)),1,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(proof,Some(Choice(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(crProof,Some(SimpleType(crProof)),1,1),Elt(crDisproof,Some(SimpleType(crDisproof)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1),Elt(equationalProof,Some(SimpleType(equationalProof)),1,1),Elt(equationalDisproof,Some(SimpleType(equationalDisproof)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1),Elt(quasiReductiveProof,Some(SimpleType(quasiReductiveProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(certificationProblem,Some(Sequence(Elt(input,Some(GroupRef(input,1,1)),1,1),Elt(cpfVersion,Some(SimpleType(string)),1,1),Elt(proof,Some(SimpleType(proof)),1,1),Elt(origin,Some(GroupRef(origin,0,unbounded)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(origin,Some(Sequence(Elt(proofOrigin,Some(GroupRef(proofOrigin,0,unbounded)),1,1),Elt(inputOrigin,Some(GroupRef(inputOrigin,0,unbounded)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Group(proofOrigin,Some(Sequence(Elt(tool,Some(GroupRef(tool,0,unbounded)),1,unbounded),Elt(toolUser,Some(GroupRef(toolUser,0,unbounded)),0,unbounded))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(tool,Some(Sequence(Elt(name,Some(SimpleType(string)),1,1),Elt(version,Some(SimpleType(string)),1,1),Elt(strategy,Some(SimpleType(string)),0,1),Elt(url,Some(SimpleType(url)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(toolUser,Some(Sequence(Elt(firstName,Some(SimpleType(string)),1,1),Elt(lastName,Some(SimpleType(string)),1,1),Elt(url,Some(SimpleType(url)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(inputOrigin,Some(Sequence(Elt(tpdbReference,Some(GroupRef(tpdbReference,0,unbounded)),0,1),Elt(source,Some(SimpleType(string)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(tpdbReference,Some(Sequence(Elt(fileName,Some(SimpleType(string)),1,1),Elt(tpdbId,Some(SimpleType(long)),0,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(input,Some(Choice(Elt(trsInput,Some(GroupRef(trsInput,1,1)),1,1),Elt(dpInput,Some(GroupRef(dpInput,1,1)),1,1),Elt(orderingConstraints,Some(GroupRef(orderingConstraints,1,1)),1,1),Elt(completionInput,Some(GroupRef(completionInput,0,unbounded)),1,1),Elt(equationalReasoningInput,Some(GroupRef(equationalReasoningInput,0,unbounded)),1,1),Elt(complexityInput,Some(GroupRef(complexityInput,0,unbounded)),1,1),Elt(ctrsInput,Some(GroupRef(ctrsInput,0,unbounded)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(completionInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(trs,Some(SimpleType(trs)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equationalReasoningInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(equation,Some(GroupRef(equation,0,unbounded)),1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equation,Some(Sequence(GroupRef(term,1,1),GroupRef(term,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexityInput,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1),GroupRef(complexityMeasure,1,1),GroupRef(complexityClass,1,1))),1,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(ctrsInput,Some(Sequence(Elt(conditionalRules,Some(SimpleType(conditionalRules)),1,1))),1,unbounded)*)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">(* DO NOT MODIFY THIS FILE. IT HAS BEEN AUTOMATICALLY GENERATED *)</text:p>
   <text:p text:style-name="P14">Correct version of xsd after using flattening and changing simpletype to groupref.</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">(*Elt(name,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(label,Some(Choice(Elt(numberLabel,Some(Sequence(Elt(number,Some(SimpleType(nonNegativeInteger)),0,unbounded))),1,1),Elt(symbolLabel,Some(Sequence(GroupRef(symbol,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(symbol,Some(Choice(Elt(name,Some(GroupRef(name,1,1)),1,1),Elt(sharp,Some(Sequence(GroupRef(symbol,1,1))),1,1),Elt(labeledSymbol,Some(Sequence(GroupRef(symbol,1,1),GroupRef(label,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(var,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(term,Some(Choice(Elt(var,Some(GroupRef(var,1,1)),1,1),Elt(funapp,Some(Sequence(GroupRef(symbol,1,1),Elt(arg,Some(GroupRef(term,1,1)),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rule,Some(Sequence(Elt(lhs,Some(GroupRef(term,1,1)),1,1),Elt(rhs,Some(GroupRef(term,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rules,Some(Sequence(Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalRules,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dps,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trs,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(usableRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(number,Some(Choice(Elt(integer,Some(GroupRef(integer,1,1)),1,1),Elt(rational,Some(Sequence(Elt(numerator,Some(SimpleType(integer)),1,1),Elt(denominator,Some(SimpleType(positiveInteger)),1,1))),1,1),Elt(algebraic,Some(Sequence(GroupRef(number,1,1),GroupRef(number,1,1),GroupRef(number,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(coefficient,Some(Choice(GroupRef(number,1,1),Elt(minusInfinity,None,1,1),Elt(plusInfinity,None,1,1),Elt(vector,Some(SimpleType(vector)),1,1),Elt(matrix,Some(SimpleType(matrix)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(vector,Some(Sequence(Elt(coefficient,Some(SimpleType(coefficient)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(matrix,Some(Sequence(Elt(vector,Some(SimpleType(vector)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(polynomial,Some(Choice(Elt(coefficient,Some(SimpleType(coefficient)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unboun<text:soft-page-break/>ded))),1,1),Elt(min,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(function,Some(Choice(Elt(polynomial,Some(GroupRef(polynomial,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(arity,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(strictDimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(degree,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(position,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(argumentFilter,Some(Sequence(Elt(argumentFilterEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(t11,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t11,Some(Choice(Elt(collapsing,Some(GroupRef(positiveInteger,1,1)),1,1),Elt(nonCollapsing,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(domain,Some(Choice(Elt(naturals,None,1,1),Elt(integers,None,1,1),Elt(rationals,Some(Sequence(Elt(delta,Some(Sequence(GroupRef(number,1,1))),1,1))),1,1),Elt(algebraicNumbers,Some(Sequence(Elt(delta,Some(Sequence(GroupRef(number,1,1))),1,1))),1,1),Elt(arctic,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(tropical,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(matrices,Some(Sequence(Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1),Elt(domain,Some(SimpleType(domain)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(redPair,Some(Choice(Elt(interpretation,Some(Sequence(Elt(type,Some(GroupRef(type_t9,1,1)),1,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(function,1,1))),0,unbounded))),1,1),Elt(pathOrder,Some(Sequence(Elt(statusPrecedence,Some(Sequence(Elt(statusPrecedenceEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),GroupRef(t10,1,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(knuthBendixOrder,Some(Sequence(Elt(w0,Some(SimpleType(positiveInteger)),1,1),Elt(precedenceWeight,Some(Sequence(Elt(precedenceWeightEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),Elt(weight,Some(SimpleType(nonNegativeInteger)),1,1),Elt(subtermCoefficientEntries,Some(Sequence(Elt(entry,Some(SimpleType(positiveInteger)),0,unbounded))),0,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(scnp,Some(Sequence(Elt(status,Some(GroupRef(status,1,1)),1,1),Elt(levelMapping,Some(Sequence(Elt(levelMappingEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(positionLevelEntry,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(level,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(redPair,Some(SimpleType(redPair)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(type_t9,Some(Choice(Elt(polynomial,Some(Sequence(Elt(domain,Some(SimpleType(domain)),<text:soft-page-break/>1,1),Elt(degree,Some(SimpleType(degree)),1,1))),1,1),Elt(matrixInterpretation,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t10,Some(Choice(Elt(lex,Some(Choice()),1,1),Elt(mul,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(status,Some(Choice(Elt(ms,None,1,1),Elt(min,None,1,1),Elt(max,None,1,1),Elt(dms,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(arithFunction,Some(Choice(Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(model,Some(Choice(Elt(finiteModel,Some(Sequence(Elt(carrierSize,Some(SimpleType(positiveInteger)),1,1),Elt(tupleOrder,Some(GroupRef(tupleOrder,1,1)),0,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(arithFunction,Some(SimpleType(arithFunction)),1,1))),0,unbounded),Elt(labeling,None,0,1))),1,1),Elt(rootLabeling,Some(Sequence(GroupRef(symbol,0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(tupleOrder,Some(Choice(Elt(pointWise,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(patternTerm,Some(Sequence(GroupRef(term,1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(patternRule,Some(Sequence(Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),GroupRef(t5,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t5,Some(Choice(Elt(originalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(isPair,Some(SimpleType(boolean)),1,1))),1,1),Elt(initialPumping,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(initialPumpingContext,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(equivalence,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),GroupRef(t6,1,1),Elt(patternEquivalence,Some(GroupRef(patternEquivalence,1,1)),1,1))),1,1),Elt(narrowing,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1),Elt(instantiation,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(t7,1,1))),1,1),Elt(rewriting,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t8,1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t6,Some(Choice(Elt(left,None,1,1),Elt(right,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(patternEquivalence,Some(Choice(Elt(domainRenaming,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(irrelevant,Some(Sequence(Elt(substitution,Some(SimpleType<text:soft-page-break/>(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(simplification,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t7,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Choice()),1,1),Elt(closing,Some(Choice()),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t8,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(closing,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(substitution,Some(Sequence(Elt(substEntry,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(context,Some(Choice(Elt(box,None,1,1),Elt(funContext,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(GroupRef(term,0,unbounded)),1,1),GroupRef(context,1,1),Elt(after,Some(GroupRef(term,0,unbounded)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rewriteSequence,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rewriteStep,Some(Sequence(Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(rule,Some(SimpleType(rule)),1,1),Elt(relative,None,0,1),GroupRef(term,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(state,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(treeAutomaton,Some(Sequence(Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(transitions,Some(Sequence(Elt(transition,Some(Sequence(Elt(lhs,Some(GroupRef(lhs,1,1)),1,1),Elt(rhs,Some(Sequence(Elt(state,Some(SimpleType(state)),1,1))),1,1))),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(lhs,Some(Choice(Sequence(GroupRef(symbol,1,1),Elt(height,Some(SimpleType(nonNegativeInteger)),0,1),Elt(state,Some(SimpleType(state)),0,unbounded)),Elt(state,Some(GroupRef(state,1,1)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(uncurryInformation,Some(Sequence(GroupRef(symbol,1,1),Elt(uncurriedSymbols,Some(Sequence(Elt(uncurriedSymbolEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(symbol,1,unbounded))),1,unbounded))),1,1),Elt(uncurryRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(etaRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(loop,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(context,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(nonLoop,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(orderingConstraints,Some(Sequence(Elt(orderingConstraintElement,Some(Sequence(Elt(strict,Som<text:soft-page-break/>e(SimpleType(boolean)),1,1),Elt(ceCompatible,Some(SimpleType(boolean)),1,1),Elt(monotonePositions,Some(GroupRef(monotonePositions,1,1)),0,1),Elt(ignoredPositions,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1))),0,1),Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(monotonePositions,Some(Choice(Elt(argumentFilter,Some(GroupRef(argumentFilter,1,1)),1,1),Elt(everySymbolAndPosition,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(orderingConstraintProof,Some(Choice(Elt(redPair,Some(SimpleType(redPair)),1,1),Elt(satisfiableAssumption,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(url,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trsInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(equations,Some(SimpleType(equations)),0,1),Elt(relativeRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),0,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(minimal,Some(SimpleType(boolean)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(strategy,Some(Choice(Elt(innermost,None,1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(outermost,None,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conversion,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(equationStep,Some(Sequence(Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1),Elt(rule,Some(SimpleType(rule)),1,1),GroupRef(t4,1,1),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t4,Some(Choice(Elt(leftRight,None,1,1),Elt(rightLeft,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(subsumptionProof,Some(Sequence(Elt(ruleSubsumptionProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(innermostLhss,Some(Sequence(GroupRef(term,0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexityMeasure,Some(Choice(Elt(derivationalComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1))),1,1),Elt(runtimeComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1),Elt(signature,Some(SimpleType(signature)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equationalProofTree,Some(Choice(Elt(refl,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(sym,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(trans,Some(Sequence(GroupRef(equationalProofTree,1,1),GroupRef(equationalProofTree,1,1))),1,1),Elt(assm,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(cong,Some(Sequence(GroupRef(symbol,1,1),GroupRef(equationalProofTree,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(completionAndNormalization,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(completionP<text:soft-page-break/>roof,Some(SimpleType(completionProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(signature,Some(Sequence(Elt(symbol,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalConstraint,Some(Choice(Elt(implication,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,unbounded))),1,1),Elt(constraint,Some(Sequence(GroupRef(term,1,1),GroupRef(t3,1,1),GroupRef(term,1,1))),1,1),Elt(all,Some(Sequence(Elt(var,Some(SimpleType(string)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t3,Some(Choice(Elt(rewrite,None,1,1),Elt(strict,None,1,1),Elt(nonStrict,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalConstraintProof,Some(Choice(Elt(final,None,1,1),Elt(differentConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1),Elt(sameConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(deleteCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(variableEquation,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(funargIntoVar,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(position,Some(SimpleType(position)),1,1),Elt(var,Some(SimpleType(var)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(simplifyCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(induction,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conjuncts,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),0,unbounded))),1,1),Elt(ruleConstraintProofs,Some(Sequence(Elt(ruleConstraintProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(subtermVarEntries,Some(Sequence(Elt(subtermVarEntry,Some(Sequence(GroupRef(term,1,1),Elt(var,Some(SimpleType(var)),0,unbounded))),0,unbounded))),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),0,unbounded))),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexityClass,Some(Choice(Elt(polynomial,Some(GroupRef(nonNegativeInteger,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(complexityProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleShifting,Some(Sequence(Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(completionProof,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(equivalenceProof,Some(Sequence(Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),1,1),Elt(subsumptionProof,Some(SimpleType(sub<text:soft-page-break/>sumptionProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(crProof,Some(Choice(Elt(wcrAndSN,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(orthogonal,None,1,1),Elt(stronglyClosed,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(crDisproof,Some(Choice(Elt(nonWcrAndSN,Some(Sequence(Elt(wcrDisproof,Some(GroupRef(wcrDisproof,1,1)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(nonJoinableFork,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t2,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(wcrDisproof,Some(Choice(Elt(nonJoinableCriticalPairsAuto,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t2,Some(Choice(Elt(distinctNormalForms,None,1,1),Elt(capNotUnif,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpRuleRemoval,Some(Sequence(Elt(dps,Some(SimpleType(dps)),0,1),Elt(trs,Some(SimpleType(trs)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(infinitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(innermostLhssIncreaseProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(switchFullStrategyProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(rewritingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(narrowingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpProof,Some(Choice(Elt(pIsEmpty,None,1,1),Elt(depGraphProc,Some(Sequence(Elt(component,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(realScc,Some(SimpleType(boolean)),1,1),Elt(arcs,Some(Sequence(Elt(forwardArc,Some(SimpleType(positiveInteger)),0,unbounded))),0,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),0,unbounded))),1,1),Elt(redPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(redPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs<text:soft-page-break/>)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(subtermProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(projectedRewriteSequence,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlabProc,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(unlabProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(sizeChangeProc,Some(Sequence(GroupRef(t1,1,1),Elt(sizeChangeGraph,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(edge,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(strict,Some(SimpleType(boolean)),1,1),Elt(position,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(flatContextClosureProc,Some(Sequence(Elt(freshSymbol,Some(Sequence(GroupRef(symbol,1,1))),0,1),Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(argumentFilterProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(uncurryProc,Some(Sequence(Elt(applicativeTop,Some(SimpleType(positiveInteger)),0,1),Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(finitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(usableRulesProc,Some(Sequence(Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(switchInnermostProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(rewritingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(forwardInstantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(narrowingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(splitProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(generalRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(strict,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(bound,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(condRedPairProof,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(SimpleType(nonNegativeInteger)),1,1),Elt(after,Some(SimpleType(nonNegativeInteger)),1,1),Elt(conditions,Some(Sequence(Elt(condition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(dpSequence,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1))),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),1,1),Elt(complexConstantRemovalProc,Some(Sequence(GroupRef(term,1,1),Elt(ruleMap,Some(Sequence(Elt(ruleMapEntry,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rule,Some(SimpleType(rule)),1,1))),0,unbounded))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1))),1,<text:soft-page-break/>1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t1,Some(Choice(Elt(subtermCriterion,None,1,1),Elt(reductionPair,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equationalProof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1),Elt(equationalProofTree,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equationalDisproof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(relativeNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1))),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(relativeTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(sIsEmpty,Some(Sequence(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(relativeTerminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(equalityRemoval,Some(Sequence(Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trsNonterminationProof,Some(Choice(Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(innermostLhssIncrease,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Elt(trsTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(flatContextClosure,Some(Sequence(Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(terminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(bounds,Some(Sequence(Elt(type,Some(GroupRef(type,1,1)),1,1),Elt(bound,Some(SimpleType(nonNegativeInteger)),1,1),Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(treeAutomaton,Some(SimpleType(treeAutomaton)),1,1))),1,1),Elt(switchInnermost,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(split,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(type,Some(Choice(Elt(roof,None,1,1),Elt(match,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(wcrProof,Some(Choice(Elt(joinableCriticalPairs,Some(Sequence(Elt(joinableCriticalPair,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded))),1,1),Elt(joinableCriticalPairsAuto,None,1,1),Elt(joinableCriticalPairsBFS,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(quasiReductiveProof,Some(Choice(Elt(unraveling,Some(Sequence(Elt(unravelingInformation,Some(Sequence(Elt(unravelingEntry,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),1,1),Elt(rule,Some(SimpleType(rule)),1,unbounded))),0,unbounded))),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(proof,Some(Choice(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(crProof,Some(SimpleType(crProof)),1,1),Elt(crDisproof,Some(SimpleType(crDisproof)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1),Elt(equationalProof,Some(SimpleType(equationalProof)),1,1),Elt(equationalDisproof,Some(SimpleType(equationalDisproof)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1),Elt(quasiReductiveProof,Some(SimpleType(quasiReductiveProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Elt(certificationProblem,Some(Sequence(Elt(input,Some(GroupRef(input,1,1)),1,1),Elt(cpfVersion,Some(SimpleType(string)),1,1),Elt(proof,Some(SimpleType(proof)),1,1),Elt(origin,Some(Sequence(Elt(proofOrigin,Some(Sequence(Elt(tool,Some(Sequence(Elt(name,Some(SimpleType(string)),1,1),Elt(version,Some(SimpleType(string)),1,1),Elt(strategy,Some(SimpleType(string)),0,1),Elt(url,Some(SimpleType(url)),0,1))),1,unbounded),Elt(toolUser,Some(Sequence(Elt(firstName,Some(SimpleType(string)),1,1),Elt(lastName,Some(SimpleType(string)),1,1),Elt(url,Some(SimpleType(url)),0,1))),0,unbounded))),1,1),Elt(inputOrigin,Some(Sequence(Elt(tpdbReference,Some(Sequence(Elt(fileName,Some(SimpleType(string)),1,1),Elt(tpdbId,Some(SimpleType(long)),0,1))),0,1),Elt(source,Some(SimpleType(string)),0,1))),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(input,Some(Choice(Elt(trsInput,Some(GroupRef(trsInput,1,1)),1,1),Elt(dpInput,Some(GroupRef(dpInput,1,1)),1,1),Elt(orderingConstraints,Some(GroupRef(orderingConstraints,1,1)),1,1),Elt(completionInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(trs,Some(SimpleType(trs)),1,1))),1,1),Elt(equationalReasoningInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(equation,Some(Sequence(GroupRef(term,1,1),GroupRef(term,1,1))),1,1))),1,1),Elt(complexityInput,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1),GroupRef(complexityMeasure,1,1),GroupRef(complexityClass,1,1))),1,1),Elt(ctrsInput,Some(Sequence(Elt(conditionalRules,Some(SimpleType(conditionalRules)),1,1))),1,1))),0,unbounded)*)</text:p>
   <text:p text:style-name="P14">and lhs x = get_son &quot;lhs&quot; lhs_val x</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">and lhs_val xs = match xs with</text:p>
   <text:p text:style-name="P2"><text:s text:c="2"/>| xs -&gt;</text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>let item_symbol, xs = parse_one symbol_val [xs] in </text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>let item_height, xs = parse_option (get_son &quot;height&quot; nonNegativeInteger) xs in <text:s text:c="5"/></text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>let item_state, xs = parse_list state xs in</text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>check_emptyness xs;</text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>Lhs_lhs (item_symbol, item_height, item_state)</text:p>
   <text:p text:style-name="P2"><text:s text:c="2"/>| Element (&quot;state&quot;, _, _, xs) -&gt; Lhs_state (state_val xs)</text:p>
   <text:p text:style-name="P2"><text:s text:c="2"/>| x -&gt; error_xml x &quot;&quot;</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Definition treeAutomaton := ((list state) *</text:p>
   <text:p text:style-name="P2"><text:s text:c="2"/>(list (((symbol* option nonNegativeInteger * list state) * state) * (state)))).</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">and lhs x = get_sons &quot;lhs&quot; lhs_val x</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">and lhs_val xs =</text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>let item_symbol, xs = parse_one symbol_val xs in <text:s text:c="5"/></text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>let item_height, xs = parse_option (get_son &quot;height&quot; nonNegativeInteger) xs in <text:s text:c="5"/></text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>let item_state, xs = parse_list state xs in</text:p>
   <text:p text:style-name="P2"><text:s text:c="4"/>check_emptyness xs;</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">and transition x = get_sons &quot;transition&quot; transition_val x</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">and transition_val xs = </text:p>
   <text:p text:style-name="P2"><text:s text:c="6"/>let item_lhs, xs = parse_one lhs xs in</text:p>
   <text:p text:style-name="P2"><text:s text:c="6"/>let item_lhs2, xs = parse_list (get_son &quot;lhs&quot; state) xs in</text:p>
   <text:p text:style-name="P2"><text:s text:c="6"/>let item_rhs, xs = parse_one rhs xs in</text:p>
   <text:p text:style-name="P2"><text:s text:c="8"/>check_emptyness xs;</text:p>
   <text:p text:style-name="P2"><text:s text:c="8"/>((item_lhs, item_lhs2, item_rhs))</text:p>
   <text:p text:style-name="P2"/>
   <text:list xml:id="list1224037511" text:style-name="L1">
    <text:list-item>
     <text:list>
      <text:list-item>
       <text:p text:style-name="P19"/>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P19">Testing cpf after insert and flattening.</text:p>
      </text:list-item>
     </text:list>
    </text:list-item>
   </text:list>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">(*Elt(name,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(label,Some(Choice(Elt(numberLabel,Some(Sequence(Elt(number,Some(SimpleType(nonNegativeInteger)),0,unbounded))),1,1),Elt(symbolLabel,Some(Sequence(GroupRef(symbol,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(symbol,Some(Choice(Elt(name,Some(SimpleType(name)),1,1),Elt(sharp,Some(Sequence(GroupRef(symbol,1,1))),1,1),Elt(labeledSymbol,Some(Sequence(GroupRef(symbol,1,1),GroupRef(label,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Elt(var,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(term,Some(Choice(Elt(var,Some(SimpleType(var)),1,1),Elt(funapp,Some(Sequence(GroupRef(symbol,1,1),Elt(arg,Some(GroupRef(term,1,1)),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rule,Some(Sequence(Elt(lhs,Some(GroupRef(term,1,1)),1,1),Elt(rhs,Some(GroupRef(term,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rules,Some(Sequence(Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalRules,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dps,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trs,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(usableRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(number,Some(Choice(Elt(integer,Some(SimpleType(integer)),1,1),Elt(rational,Some(Sequence(Elt(numerator,Some(SimpleType(integer)),1,1),Elt(denominator,Some(SimpleType(positiveInteger)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(coefficient,Some(Choice(GroupRef(number,1,1),Elt(minusInfinity,None,1,1),Elt(plusInfinity,None,1,1),Elt(vector,Some(SimpleType(vector)),1,1),Elt(matrix,Some(SimpleType(matrix)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(vector,Some(Sequence(Elt(coefficient,Some(SimpleType(coefficient)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(matrix,Some(Sequence(Elt(vector,Some(SimpleType(vector)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(polynomial,Some(Choice(Elt(coefficient,Some(SimpleType(coefficient)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(function,Some(Choice(Elt(polynomial,Some(SimpleType(polynomial)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(arity,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(strictDimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(degree,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Elt(position,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(argumentFilter,Some(Sequence(Elt(argumentFilterEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(t11,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t11,Some(Choice(Elt(collapsing,Some(SimpleType(positiveInteger)),1,1),Elt(nonCollapsing,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(domain,Some(Choice(Elt(naturals,None,1,1),Elt(integers,None,1,1),Elt(rationals,Some(Sequence(Elt(delta,Some(Sequence(GroupRef(number,1,1))),1,1))),1,1),Elt(arctic,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(tropical,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(matrices,Some(Sequence(Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1),Elt(domain,Some(SimpleType(domain)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(redPair,Some(Choice(Elt(interpretation,Some(Sequence(Elt(type,Some(GroupRef(type_t9,1,1)),1,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(function,1,1))),0,unbounded))),1,1),Elt(pathOrder,Some(Sequence(Elt(statusPrecedence,Some(Sequence(Elt(statusPrecedenceEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),GroupRef(t10,1,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(knuthBendixOrder,Some(Sequence(Elt(w0,Some(SimpleType(positiveInteger)),1,1),Elt(precedenceWeight,Some(Sequence(Elt(precedenceWeightEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),Elt(weight,Some(SimpleType(nonNegativeInteger)),1,1),Elt(subtermCoefficientEntries,Some(Sequence(Elt(entry,Some(SimpleType(positiveInteger)),0,unbounded))),0,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(scnp,Some(Sequence(Elt(status,Some(GroupRef(status,1,1)),1,1),Elt(levelMapping,Some(Sequence(Elt(levelMappingEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(positionLevelEntry,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(level,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(redPair,Some(SimpleType(redPair)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(type_t9,Some(Choice(Elt(polynomial,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(degree,Some(SimpleType(degree)),1,1))),1,1),Elt(matrixInterpretation,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t10,Some(Choice(Elt(lex,Some(Choice()),1,1),Elt(mul,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(status,Some(Choice(Elt(ms,None,1,1),Elt(min,None,1,1),Elt(max,None,1,1),Elt(dms,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(arithFunction,Some(Choice(Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunct<text:soft-page-break/>ion)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(model,Some(Choice(Elt(finiteModel,Some(Sequence(Elt(carrierSize,Some(SimpleType(positiveInteger)),1,1),Elt(tupleOrder,Some(GroupRef(tupleOrder,1,1)),0,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(arithFunction,Some(SimpleType(arithFunction)),1,1))),0,unbounded),Elt(labeling,None,0,1))),1,1),Elt(rootLabeling,Some(Sequence(GroupRef(symbol,0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(tupleOrder,Some(Choice(Elt(pointWise,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(patternTerm,Some(Sequence(GroupRef(term,1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(patternRule,Some(Sequence(Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),GroupRef(t5,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t5,Some(Choice(Elt(originalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(isPair,Some(SimpleType(boolean)),1,1))),1,1),Elt(initialPumping,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(initialPumpingContext,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(equivalence,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),GroupRef(t6,1,1),Elt(patternEquivalence,Some(GroupRef(patternEquivalence,1,1)),1,1))),1,1),Elt(narrowing,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1),Elt(instantiation,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(t7,1,1))),1,1),Elt(rewriting,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t8,1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2">Definition treeAutomaton := ((list state) *</text:p>
   <text:p text:style-name="P2"><text:s text:c="2"/>(list (((symbol* option nonNegativeInteger * list state) * state) * (state)))).</text:p>
   <text:p text:style-name="P2">Group(t6,Some(Choice(Elt(left,None,1,1),Elt(right,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(patternEquivalence,Some(Choice(Elt(domainRenaming,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(irrelevant,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(simplification,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t7,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Choice()),1,1),Elt(closing,Some(Choice()),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t8,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(closing,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(substitution,Some(Sequence(Elt(substEntry,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Group(context,Some(Choice(Elt(box,None,1,1),Elt(funContext,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(GroupRef(term,0,unbounded)),1,1),GroupRef(context,1,1),Elt(after,Some(GroupRef(term,0,unbounded)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rewriteSequence,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(rewriteStep,Some(Sequence(Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(rule,Some(SimpleType(rule)),1,1),Elt(relative,None,0,1),GroupRef(term,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(state,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(treeAutomaton,Some(Sequence(Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(transitions,Some(Sequence(Elt(transition,Some(Sequence(Elt(lhs,Some(GroupRef(lhs,1,1)),1,1),Elt(rhs,Some(Sequence(Elt(SimpleType(state)),1,1))),1,1))),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(lhs,Some(Choice(Some(Sequence(GroupRef(symbol,1,1),Elt(height,Some(SimpleType(nonNegativeInteger)),0,1),Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(state,Some(SimpleType(state)))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(uncurryInformation,Some(Sequence(GroupRef(symbol,1,1),Elt(uncurriedSymbols,Some(Sequence(Elt(uncurriedSymbolEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(symbol,1,unbounded))),1,unbounded))),1,1),Elt(uncurryRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(etaRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(loop,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(context,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(nonLoop,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(orderingConstraints,Some(Sequence(Elt(orderingConstraintElement,Some(Sequence(Elt(strict,Some(SimpleType(boolean)),1,1),Elt(ceCompatible,Some(SimpleType(boolean)),1,1),Elt(monotonePositions,Some(GroupRef(monotonePositions,1,1)),0,1),Elt(ignoredPositions,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1))),0,1),Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(monotonePositions,Some(Choice(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(everySymbolAndPosition,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(orderingConstraintProof,Some(Choice(Elt(redPair,Some(SimpleType(redPair)),1,1),Elt(satisfiableAssumption,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(url,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="P2"><text:soft-page-break/></text:p>
   <text:p text:style-name="P2">Elt(trsInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(equations,Some(SimpleType(equations)),0,1),Elt(relativeRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),0,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(minimal,Some(SimpleType(boolean)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(strategy,Some(Choice(Elt(innermost,None,1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(outermost,None,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conversion,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(equationStep,Some(Sequence(Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1),Elt(rule,Some(SimpleType(rule)),1,1),GroupRef(t4,1,1),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t4,Some(Choice(Elt(leftRight,None,1,1),Elt(rightLeft,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(subsumptionProof,Some(Sequence(Elt(ruleSubsumptionProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(innermostLhss,Some(Sequence(GroupRef(term,0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexityMeasure,Some(Choice(Elt(derivationalComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1))),1,1),Elt(runtimeComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1),Elt(signature,Some(SimpleType(signature)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(equationalProofTree,Some(Choice(Elt(refl,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(sym,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(trans,Some(Sequence(GroupRef(equationalProofTree,1,1),GroupRef(equationalProofTree,1,1))),1,1),Elt(assm,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(cong,Some(Sequence(GroupRef(symbol,1,1),GroupRef(equationalProofTree,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(completionAndNormalization,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(signature,Some(Sequence(Elt(symbol,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(conditionalConstraint,Some(Choice(Elt(implication,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,unbounded))),1,1),Elt(constraint,Some(Sequence(GroupRef(term,1,1),GroupRef(t3,1,1),GroupRef(term,1,1))),1,1),Elt(all,Some(Sequence(Elt(var,Some(SimpleType(string)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t3,Some(Choice(Elt(rewrite,None,1,1),Elt(strict,None,1,1),Elt(nonStrict,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Elt(conditionalConstraintProof,Some(Choice(Elt(final,None,1,1),Elt(differentConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1),Elt(sameConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(deleteCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(variableEquation,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(funargIntoVar,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(position,Some(SimpleType(position)),1,1),Elt(var,Some(SimpleType(var)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(simplifyCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(induction,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conjuncts,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),0,unbounded))),1,1),Elt(ruleConstraintProofs,Some(Sequence(Elt(ruleConstraintProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(subtermVarEntries,Some(Sequence(Elt(subtermVarEntry,Some(Sequence(GroupRef(term,1,1),Elt(var,Some(SimpleType(var)),0,unbounded))),0,unbounded))),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),0,unbounded))),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(complexityClass,Some(Choice(Elt(polynomial,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(complexityProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleShifting,Some(Sequence(Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(completionProof,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(equivalenceProof,Some(Sequence(Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),1,1),Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(crProof,Some(Choice(Elt(wcrAndSN,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(orthogonal,None,1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(crDisproof,Some(Choice(Elt(nonWcrAndSN,Some(Sequence(Elt(wcrDisproof,Some(GroupRef(wcrDisproof,1,1)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(nonJoinableFork,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t2,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(wcrDisproof,Some(Choice(Elt(nonJoinableCriticalPairsAuto,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"><text:soft-page-break/>Group(t2,Some(Choice(Elt(distinctNormalForms,None,1,1),Elt(capNotUnif,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpRuleRemoval,Some(Sequence(Elt(dps,Some(SimpleType(dps)),0,1),Elt(trs,Some(SimpleType(trs)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(infinitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(innermostLhssIncreaseProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(switchFullStrategyProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(dpProof,Some(Choice(Elt(pIsEmpty,None,1,1),Elt(depGraphProc,Some(Sequence(Elt(component,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(realScc,Some(SimpleType(boolean)),1,1),Elt(arcs,Some(Sequence(Elt(forwardArc,Some(SimpleType(positiveInteger)),0,unbounded))),0,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),0,unbounded))),1,1),Elt(redPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(redPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(subtermProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(projectedRewriteSequence,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlabProc,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(unlabProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(sizeChangeProc,Some(Sequence(GroupRef(t1,1,1),Elt(sizeChangeGraph,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(edge,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(strict,Some(SimpleType(boolean)),1,1),Elt(position,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(flatContextClosureProc,Some(Sequence(Elt(freshSymbol,Some(Sequence(GroupRef(symbol,1,1))),0,1),Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(argumentFilterProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(uncurryProc,Some(Sequence(Elt(applicativeTop,Some(SimpleType(positiveInteger)),0,1),Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(dps,Some(SimpleType(dps<text:soft-page-break/>)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(finitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(usableRulesProc,Some(Sequence(Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(switchInnermostProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(rewritingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(forwardInstantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(narrowingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(splitProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(generalRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(strict,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(bound,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(condRedPairProof,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(SimpleType(nonNegativeInteger)),1,1),Elt(after,Some(SimpleType(nonNegativeInteger)),1,1),Elt(conditions,Some(Sequence(Elt(condition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(dpSequence,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1))),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(t1,Some(Choice(Elt(subtermCriterion,None,1,1),Elt(reductionPair,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equationalProof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1),Elt(equationalProofTree,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(equationalDisproof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(relativeNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1))),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(relativeTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(sIsEmpty,Some(Seq<text:soft-page-break/>uence(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(relativeTerminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(equalityRemoval,Some(Sequence(Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trsNonterminationProof,Some(Choice(Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(innermostLhssIncrease,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(trsTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(flatContextClosure,Some(Sequence(Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(terminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(bounds,Some(Sequence(Elt(type,Some(GroupRef(type,1,1)),1,1),Elt(bound,Some(SimpleType(nonNegativeInteger)),1,1),Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(treeAutomaton,Some(SimpleType(treeAutomaton)),1,1))),1,1),Elt(switchInnermost,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(split,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(remove<text:soft-page-break/>NonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(type,Some(Choice(Elt(roof,None,1,1),Elt(match,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(wcrProof,Some(Choice(Elt(joinableCriticalPairs,Some(Sequence(Elt(joinableCriticalPair,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded))),1,1),Elt(joinableCriticalPairsAuto,None,1,1),Elt(joinableCriticalPairsBFS,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(quasiReductiveProof,Some(Choice(Elt(unraveling,Some(Sequence(Elt(unravelingInformation,Some(Sequence(Elt(unravelingEntry,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),1,1),Elt(rule,Some(SimpleType(rule)),1,unbounded))),0,unbounded))),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(proof,Some(Choice(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(crProof,Some(SimpleType(crProof)),1,1),Elt(crDisproof,Some(SimpleType(crDisproof)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1),Elt(equationalProof,Some(SimpleType(equationalProof)),1,1),Elt(equationalDisproof,Some(SimpleType(equationalDisproof)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1),Elt(quasiReductiveProof,Some(SimpleType(quasiReductiveProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Elt(certificationProblem,Some(Sequence(Elt(input,Some(GroupRef(input,1,1)),1,1),Elt(cpfVersion,Some(SimpleType(string)),1,1),Elt(proof,Some(SimpleType(proof)),1,1),Elt(origin,Some(Sequence(Elt(proofOrigin,Some(Sequence(Elt(tool,Some(Sequence(Elt(name,Some(SimpleType(string)),1,1),Elt(version,Some(SimpleType(string)),1,1),Elt(strategy,Some(SimpleType(string)),0,1),Elt(url,Some(SimpleType(url)),0,1))),1,unbounded),Elt(toolUser,Some(Sequence(Elt(firstName,Some(SimpleType(string)),1,1),Elt(lastName,Some(SimpleType(string)),1,1),Elt(url,Some(SimpleType(url)),0,1))),0,unbounded))),1,1),Elt(inputOrigin,Some(Sequence(Elt(tpdbReference,Some(Sequence(Elt(fileName,Some(SimpleType(string)),1,1),Elt(tpdbId,Some(SimpleType(long)),0,1))),0,1),Elt(source,Some(SimpleType(string)),0,1))),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">Group(input,Some(Choice(Elt(trsInput,Some(SimpleType(trsInput)),1,1),Elt(dpInput,Some(SimpleType(dpInput)),1,1),Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1),Elt(completionInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(trs,Some(SimpleType(trs)),1,1))),1,1),Elt(equationalReasoningInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(equation,Some(Sequence(GroupRef(term,1,1),GroupRef(term,1,1))),1,1))),1,1),Elt(complexityInput,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1),GroupRef(complexityMeasure,1,1),GroupRef(complexityClass,1,1))),1,1),Elt(ctrsInput,Some(Sequence(Elt(conditionalRules,Some(SimpleType(conditionalRules)),1,1))),1,1))),0,unbounded)*)</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P14">An example show how to understand the error message in the parsing function:</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">/home/gwen/Aprove_rainbow/full_strategy/MYNAT_nosorts_noand_iGM.proof.xml----- </text:p>
   <text:p text:style-name="P2">line 1, characters 17907-17923: XML error: unexpected element: </text:p>
   <text:p text:style-name="P2">&lt;argumentFilter&gt;&lt;argumentFilterEntry&gt;&lt;name&gt;active&lt;/name&gt;&lt;arity&gt;1&lt;/arity&gt;&lt;collaps</text:p>
   <text:p text:style-name="P2"/>
   <text:p text:style-name="P2">For example here they raise an error at the function &lt;argumentFilter&gt; then go to the parsing function of <text:s/>&lt;argumentFilter&gt;</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P4">and argumentFilter x = get_sons &quot;argumentFilter&quot; argumentFilter_val x</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P4">and argumentFilter_val xs = </text:p>
   <text:p text:style-name="P4"><text:s text:c="6"/>let item_argumentFilterEntry, xs = parse_list argumentFilterEntry xs in</text:p>
   <text:p text:style-name="P4"><text:s text:c="8"/>check_emptyness xs;</text:p>
   <text:p text:style-name="P4"><text:s text:c="9"/>item_argumentFilterEntry</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P4">and argumentFilterEntry x = get_sons &quot;argumentFilterEntry&quot; argumentFilterEntry_val x</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P4">and argumentFilterEntry_val xs = </text:p>
   <text:p text:style-name="P4"><text:s text:c="6"/>let item_symbol, xs = parse_one symbol_val xs in <text:s text:c="4"/></text:p>
   <text:p text:style-name="P4"><text:s text:c="6"/>let item_arity, xs = parse_one arity xs in <text:s text:c="4"/></text:p>
   <text:p text:style-name="P4"><text:s text:c="6"/><text:span text:style-name="T5">let item_t11, xs = parse_one t11_val xs in</text:span></text:p>
   <text:p text:style-name="P4"><text:s text:c="8"/>check_emptyness xs;</text:p>
   <text:p text:style-name="P4"><text:s text:c="8"/>(((item_symbol, item_arity), item_t11)) </text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P4">Look at the parse function of <text:span text:style-name="T5">t11</text:span></text:p>
   <text:p text:style-name="P3"/>
   <text:p text:style-name="P4">and t11 x = get_son &quot;t11&quot; t11_val x</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P4">and t11_val xs = match xs with </text:p>
   <text:p text:style-name="P3"><text:s text:c="2"/>| Element (&quot;positiveInteger&quot;, _, _, xs) -&gt; </text:p>
   <text:p text:style-name="P4"><text:s text:c="6"/>let item_positiveInteger, xs = parse_one positiveInteger xs in </text:p>
   <text:p text:style-name="P4"><text:s text:c="8"/>check_emptyness xs;</text:p>
   <text:p text:style-name="P4"><text:s text:c="8"/>T11_collapsing item_positiveInteger</text:p>
   <text:p text:style-name="P4"><text:s text:c="2"/>| Element (&quot;nonCollapsing&quot;, _, _, xs) -&gt; </text:p>
   <text:p text:style-name="P4"><text:s text:c="6"/>let item_position, xs = parse_list position xs in</text:p>
   <text:p text:style-name="P4"><text:s text:c="8"/>check_emptyness xs;</text:p>
   <text:p text:style-name="P4"><text:s text:c="8"/>T11_nonCollapsing (item_position)</text:p>
   <text:p text:style-name="P4"><text:s text:c="2"/>| x -&gt; error_xml x &quot;not a t11&quot;</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P4">where the tag &lt;positiveInteger&gt; is not an expected tag in this case: the tag expected is &lt;collapsing&gt;,</text:p>
   <text:p text:style-name="P4"/>
   <text:p text:style-name="P4">Here is what is in the real xsd after using aprove to generate with full strategies.</text:p>
   <text:p text:style-name="P4">&lt;argumentFilter&gt;&lt;argumentFilterEntry&gt;&lt;name&gt;active&lt;/name&gt;&lt;arity&gt;1&lt;/arity&gt;&lt;collapsing&gt;1&lt;/collapsing&gt;&lt;/argumentFilterEntry&gt;&lt;argumentFilterEntry&gt;&lt;name&gt;and&lt;/name&gt;&lt;arity&gt;2&lt;/arity&gt;&lt;nonCollapsing&gt;&lt;position&gt;1&lt;/position&gt;&lt;position&gt;2&lt;/position&gt;&lt;/nonCollapsing&gt;&lt;/argumentFilterEntry&gt;&lt;argumentFilterEntry&gt;&lt;name&gt;tt&lt;/name&gt;&lt;arity&gt;0&lt;/arity&gt;&lt;<text:span text:style-name="T5">nonCollapsing</text:span>/&gt;&lt;/argumentFilterEntry&gt;&lt;argumentFilterEntry&gt;&lt;name&gt;mark&lt;/name&gt;&lt;arity&gt;1&lt;/arity&gt;&lt;<text:span text:style-name="T5">collapsing</text:span>&gt;1&lt;/<text:span text:style-name="T5">collapsing</text:span>&gt;</text:p>
   <text:p text:style-name="P15"/>
   <text:list xml:id="list462772372" text:continue-numbering="true" text:style-name="L1">
    <text:list-item>
     <text:list>
      <text:list-item>
       <text:p text:style-name="P32"/>
      </text:list-item>
     </text:list>
     <text:p text:style-name="P22"/>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P22">Type</text:p>
     <text:p text:style-name="P18"><text:span text:style-name="T1">&lt;sequence&gt; xsd_type1 xsd_type2 … &lt;/sequence&gt;</text:span> : product type ( type_1→ type_2 → ….) </text:p>
     <text:p text:style-name="P18"><text:span text:style-name="T1">&lt;choice&gt; xsd_type1 xsd_type2 …. &lt;/choice&gt; </text:span>: union type ( type_1 * type_2 * ... <text:s/>)</text:p>
     <text:p text:style-name="P18"><text:span text:style-name="T1">&lt;group name = “&lt;name&gt;”&gt; xsd_type &lt;/group&gt; </text:span>: names of type</text:p>
     <text:p text:style-name="P18"><text:span text:style-name="T1">&lt;element name= “&lt;tag&gt;”&gt; xsd_type &lt;/element&gt;</text:span> : declares a tag, its attributes and its possible sons.</text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Xsd type: </text:p>
   <text:list xml:id="list587764766" text:style-name="L2">
    <text:list-item>
     <text:p text:style-name="P23">Elt of string * xsd option * int * bound</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P23">Group of string * xsd option * int * bound</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P23">GroupRef of string * int * bound</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P23">Choice of xsd list</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P23">Sequence of xsd list</text:p>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P23">SimpleType of string</text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Parsing function at the first level:</text:p>
   <text:p text:style-name="Standard">Elt (n, Some t, _, _) =&gt; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>- if Some t = “SimpleType” (base type) print the parsing function as:</text:p>
   <text:p text:style-name="P1">“name xs = get_sons “name” name_val</text:p>
   <text:p text:style-name="P1">and name_val = let item_name, xs = parse_one name xs in</text:p>
   <text:p text:style-name="P1">check_emptyness xs</text:p>
   <text:p text:style-name="P1">item_name”</text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>- if Some t = “Sequence” (list of types) then print the parsing function as:</text:p>
   <text:p text:style-name="P1">“ name x = get_sons “name” name_val x</text:p>
   <text:p text:style-name="P1">and name_val xs = <text:s/>continue to parse depend on the tags inside sequence</text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>- if Some t = “Choice” (different type) then print the parsing function as:</text:p>
   <text:p text:style-name="P1">“ name x = get_son “name” name_val x</text:p>
   <text:p text:style-name="P1">and name_val xs = match xs with</text:p>
   <text:p text:style-name="P1"><text:s/>…. (continue to parse depend on the tags inside choice)</text:p>
   <text:p text:style-name="P1">| x → error_xml x “not a name””</text:p>
   <text:p text:style-name="P1"/>
   <text:p text:style-name="Standard">Group (n, Some t, _, _) =&gt;</text:p>
   <text:p text:style-name="Standard">Same with Elt </text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Parsing function at the second level (those tags inside sequences/ choices, if they have)</text:p>
   <text:list xml:id="list1684393105" text:style-name="L3">
    <text:list-item>
     <text:p text:style-name="P24">Tags inside &lt;Sequence&gt;</text:p>
     <text:list>
      <text:list-item>
       <text:p text:style-name="P24">GroupRef (n, 1, Bound 1): parse_one (parse_one means parse one element)</text:p>
       <text:p text:style-name="P24">let item_name, xs = parse_one name_val xs in (name_val mean go inside the auxiliary function of the name function where it is not parse the name tag “name”)</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P24">GroupRef (n, 0, <text:span text:style-name="T2">) : parse_list (parse_list means parse a list of elements)</text:span> </text:p>
       <text:p text:style-name="P24">let item_name, xs = parse_list name_val xs in</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P24">Elt (n, Some t, 1, Bound 1) : parse_one</text:p>
       <text:p text:style-name="P24">let item_name, xs = parse_one … xs in (parse one element … means go to the third level)</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P24"><text:soft-page-break/>Elt (n, Some t, 0, Bound 1): parse_option (parse_option means has type Ocaml option)</text:p>
       <text:p text:style-name="P24">let item_name, xs = parse_option … xs in (… go to the third level of parsing function)</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P24">Elt (n, Some t, <text:span text:style-name="T2">_, _): parse_list (parse_list means parsing a list of elements)</text:span></text:p>
       <text:p text:style-name="P25">let item_name, xs = parse_list … xs in (go to the third level of parsing function)</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P25">Elt (n, None, 0, Bound 1) : parse_option</text:p>
       <text:p text:style-name="P25">let item_name, xs = parse_option (get_son “name” boolean) xs in (this case parsing the name tag of the son has type boolean, output exactly name of type “boolean” here because Ocaml type for boolean is “boolean” and not “bool” like in Coq type.</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P25">Sequences xs: print the type inside </text:p>
       <text:list>
        <text:list-header>
         <text:p text:style-name="P24"/>
        </text:list-header>
       </text:list>
      </text:list-item>
     </text:list>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P24">Tags inside &lt;Choice&gt;</text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Standard"/>
   <text:list xml:id="list681505542" text:continue-list="list462772372" text:style-name="L1">
    <text:list-header>
     <text:p text:style-name="P18"/>
    </text:list-header>
   </text:list>
   <text:list xml:id="list754429842" text:style-name="L4">
    <text:list-item>
     <text:p text:style-name="P27">Format 1: &lt;xs: element name = “name” type = “xs: string”&gt; &lt;/xs:element&gt;</text:p>
    </text:list-item>
   </text:list>
   <text:list xml:id="list2147137846" text:continue-list="list681505542" text:style-name="L1">
    <text:list-header>
     <text:p text:style-name="P19">output of type:</text:p>
     <text:p text:style-name="P30">Definition name = string</text:p>
     <text:p text:style-name="P20"/>
    </text:list-header>
    <text:list-item>
     <text:p text:style-name="P28">Parsing function</text:p>
     <text:p text:style-name="P28"/>
    </text:list-item>
   </text:list>
   <text:list xml:id="list418249091" text:style-name="L5">
    <text:list-item>
     <text:p text:style-name="P29">Format 1: &lt;xs: element name = “name” type = “xs: string”&gt; &lt;/xs:element&gt;</text:p>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P9">output of parsing function:<text:tab/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P10">name xs = get_sons “name” name_val xs</text:p>
   <text:p text:style-name="P10"/>
   <text:p text:style-name="P10">and name_val xs =</text:p>
   <text:p text:style-name="P10"><text:s text:c="3"/>let item_name, xs = parse_one string xs in</text:p>
   <text:p text:style-name="P10"><text:s text:c="4"/>check_emptyness xs;</text:p>
   <text:p text:style-name="P10"><text:s text:c="3"/>item_name</text:p>
   <text:p text:style-name="P12"/>
   <text:list xml:id="list168017302" text:continue-list="list2147137846" text:style-name="L1">
    <text:list-header>
     <text:p text:style-name="P33">- get_sons: use when it is a sequence or an element</text:p>
    </text:list-header>
   </text:list>
   <text:p text:style-name="P11"/>
   <text:p text:style-name="P11">List of tags in cpf.xsd has format 1:</text:p>
   <text:list xml:id="list1985891580" text:style-name="L6">
    <text:list-item>
     <text:list>
      <text:list-item>
       <text:p text:style-name="P34">name</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P34">url</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P34">state</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P34">var</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P34">arity</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P34">dimension</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P34">strictDimension</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P34">degree</text:p>
      </text:list-item>
      <text:list-item>
       <text:p text:style-name="P34">position</text:p>
       <text:p text:style-name="P35"/>
      </text:list-item>
     </text:list>
    </text:list-item>
    <text:list-item>
     <text:p text:style-name="P21">Format 2: </text:p>
     <text:p text:style-name="P21">&lt;xs: element name = “innermostLhss”&gt;</text:p>
     <text:p text:style-name="P21"><text:s text:c="2"/>&lt;xs:sequence&gt;</text:p>
     <text:p text:style-name="P21"><text:soft-page-break/><text:s text:c="4"/>&lt;xs: group ref = “term” maxOccurs = “unbounded” minOccurs = “0” /&gt;</text:p>
     <text:p text:style-name="P21"><text:s text:c="3"/>&lt;/sequence&gt;</text:p>
     <text:p text:style-name="P21">Output of parsing function:</text:p>
     <text:p text:style-name="P21"/>
     <text:p text:style-name="P21">innermostLhss x= get_sons “innermostLhss” innermostLhss_val x</text:p>
     <text:p text:style-name="P21">and innermostLhss_val xs =</text:p>
     <text:p text:style-name="P21"><text:s text:c="3"/>let item_term, xs = parse_list term_val xs in</text:p>
     <text:p text:style-name="P21"><text:s text:c="2"/>check_emptyness xs;</text:p>
     <text:p text:style-name="P21"><text:s text:c="3"/>item_term</text:p>
     <text:p text:style-name="P21"/>
     <text:p text:style-name="P31">- Output by ocaml debug for list of xsds inside &lt;cpf.xsd&gt; version 2.1:</text:p>
     <text:list>
      <text:list-header>
       <text:p text:style-name="P31"/>
      </text:list-header>
     </text:list>
    </text:list-item>
   </text:list>
   <text:p text:style-name="Standard"><text:tab/>&gt; display xsds </text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P1">xsds : Xsd.xsd list = Total: 73 elements, 9 xsd.groups</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s text:c="2"/>[Xsd.Elt (...); <text:span text:style-name="T3">Xsd.Group</text:span> (...); <text:span text:style-name="T3">Xsd.Group (...);</text:span> Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/><text:span text:style-name="T3">Xsd.Group (...)</text:span>; Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/><text:span text:style-name="T3">Xsd.Group (...);</text:span> Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...);<text:span text:style-name="T3"> Xsd.Group (...)</text:span>; Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); <text:span text:style-name="T3">Xsd.Group (...);</text:span> Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); <text:span text:style-name="T3">Xsd.Group (...); Xsd.Group (...)</text:span>; Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...);<text:span text:style-name="T3"> Xsd.Group (...); </text:span></text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); Xsd.Elt (...); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (...)] </text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P13">(*Elt(name,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(label,Some(Choice(Elt(numberLabel,Some(Sequence(Elt(number,Some(SimpleType(nonNegativeInteger)),0,unbounded))),1,1),Elt(symbolLabel,Some(Sequence(GroupRef(symbol,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(symbol,Some(Choice(Elt(name,Some(SimpleType(name)),1,1),</text:p>
   <text:p text:style-name="Standard">Elt(sharp,Some(Sequence(GroupRef(symbol,1,1))),1,1),</text:p>
   <text:p text:style-name="Standard">Elt(labeledSymbol,Some(Sequence(GroupRef(symbol,1,1),GroupRef(label,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(var,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(term,Some(Choice(Elt(var,Some(SimpleType(var)),1,1),Elt(funapp,Some(Sequence(GroupRef(symbol,1,1),Elt(arg,Some(GroupRef(term,1,1)),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rule,Some(Sequence(Elt(lhs,Some(GroupRef(term,1,1)),1,1),Elt(rhs,Some(GroupRef(term,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rules,Some(Sequence(Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalRules,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dps,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trs,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(usableRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(number,Some(Choice(Elt(integer,Some(SimpleType(integer)),1,1),Elt(rational,Some(Sequence(Elt(numerator,Some(SimpleType(integer)),1,1),Elt(denominator,Some(SimpleType(positiveInteger)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(coefficient,Some(Choice(GroupRef(number,1,1),Elt(minusInfinity,None,1,1),Elt(plusInfinity,None,1,1),Elt(vector,Some(SimpleType(vector)),1,1),Elt(matrix,Some(SimpleType(matrix)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(vector,Some(Sequence(Elt(coefficient,Some(SimpleType(coefficient)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(matrix,Some(Sequence(Elt(vector,Some(SimpleType(vector)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(polynomial,Some(Choice(Elt(coefficient,Some(SimpleType(coefficient)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>Group(function,Some(Choice(Elt(polynomial,Some(SimpleType(polynomial)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(arity,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(strictDimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(degree,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(position,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(argumentFilter,Some(Sequence(Elt(argumentFilterEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(t11,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t11,Some(Choice(Elt(collapsing,Some(SimpleType(positiveInteger)),1,1),Elt(nonCollapsing,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(domain,Some(Choice(Elt(naturals,None,1,1),Elt(integers,None,1,1),Elt(rationals,Some(Sequence(Elt(delta,Some(Sequence(GroupRef(number,1,1))),1,1))),1,1),Elt(arctic,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(tropical,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(matrices,Some(Sequence(Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1),Elt(domain,Some(SimpleType(domain)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(redPair,Some(Choice(Elt(interpretation,Some(Sequence(Elt(type,Some(GroupRef(type_t9,1,1)),1,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(function,1,1))),0,unbounded))),1,1),Elt(pathOrder,Some(Sequence(Elt(statusPrecedence,Some(Sequence(Elt(statusPrecedenceEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),GroupRef(t10,1,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(knuthBendixOrder,Some(Sequence(Elt(w0,Some(SimpleType(positiveInteger)),1,1),Elt(precedenceWeight,Some(Sequence(Elt(precedenceWeightEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),Elt(weight,Some(SimpleType(nonNegativeInteger)),1,1),Elt(subtermCoefficientEntries,Some(Sequence(Elt(entry,Some(SimpleType(positiveInteger)),0,unbounded))),0,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(scnp,Some(Sequence(Elt(status,Some(GroupRef(status,1,1)),1,1),Elt(levelMapping,Some(Sequence(Elt(levelMappingEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(positionLevelEntry,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(level,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(redPair,Some(SimpleType(redPair)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(type_t9,Some(Choice(Elt(polynomial,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(degree,Some(SimpleType(degree)),1,1))),1,1),Elt(matrixInterpretation,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>Group(t10,Some(Choice(Elt(lex,Some(Choice()),1,1),Elt(mul,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(status,Some(Choice(Elt(ms,None,1,1),Elt(min,None,1,1),Elt(max,None,1,1),Elt(dms,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(arithFunction,Some(Choice(Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(model,Some(Choice(Elt(finiteModel,Some(Sequence(Elt(carrierSize,Some(SimpleType(positiveInteger)),1,1),Elt(tupleOrder,Some(GroupRef(tupleOrder,1,1)),0,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(arithFunction,Some(SimpleType(arithFunction)),1,1))),0,unbounded),Elt(labeling,None,0,1))),1,1),Elt(rootLabeling,Some(Sequence(GroupRef(symbol,0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(tupleOrder,Some(Choice(Elt(pointWise,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(patternTerm,Some(Sequence(GroupRef(term,1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(patternRule,Some(Sequence(Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),GroupRef(t5,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t5,Some(Choice(Elt(originalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(isPair,Some(SimpleType(boolean)),1,1))),1,1),Elt(initialPumping,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(initialPumpingContext,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(equivalence,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),GroupRef(t6,1,1),Elt(patternEquivalence,Some(GroupRef(patternEquivalence,1,1)),1,1))),1,1),Elt(narrowing,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1),Elt(instantiation,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(t7,1,1))),1,1),Elt(rewriting,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t8,1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t6,Some(Choice(Elt(left,None,1,1),Elt(right,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(patternEquivalence,Some(Choice(Elt(domainRenaming,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(irrelevant,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(simplification,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>Group(t7,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Choice()),1,1),Elt(closing,Some(Choice()),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t8,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(closing,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(substitution,Some(Sequence(Elt(substEntry,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(context,Some(Choice(Elt(box,None,1,1),Elt(funContext,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(GroupRef(term,0,unbounded)),1,1),GroupRef(context,1,1),Elt(after,Some(GroupRef(term,0,unbounded)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rewriteSequence,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rewriteStep,Some(Sequence(Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(rule,Some(SimpleType(rule)),1,1),Elt(relative,None,0,1),GroupRef(term,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(state,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(treeAutomaton,Some(Sequence(Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(transitions,Some(Sequence(Elt(transition,Some(Sequence(Elt(lhs,Some(GroupRef(lhs,1,1)),1,1),Elt(rhs,Some(Sequence(Elt(state,Some(SimpleType(state)),1,1))),1,1))),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(lhs,Some(Choice(Elt(lhs,Some(Sequence(GroupRef(symbol,1,1),Elt(height,Some(SimpleType(nonNegativeInteger)),0,1),Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(state,Some(SimpleType(state)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(uncurryInformation,Some(Sequence(GroupRef(symbol,1,1),Elt(uncurriedSymbols,Some(Sequence(Elt(uncurriedSymbolEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(symbol,1,unbounded))),1,unbounded))),1,1),Elt(uncurryRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(etaRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(loop,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(context,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(nonLoop,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(orderingConstraints,Some(Sequence(Elt(orderingConstraintElement,Some(Sequence(Elt(strict,Some(SimpleType(boolean)),1,1),Elt(ceCompatible,Some(SimpleType(boolean)),1,1),Elt(monotonePositions,Some(GroupRef(monotonePositions,1,1)),0,1),Elt(ignoredPositions,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1))),0,1),Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">Group(monotonePositions,Some(Choice(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(everySymbolAndPosition,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(orderingConstraintProof,Some(Choice(Elt(redPair,Some(SimpleType(redPair)),1,1),Elt(satisfiableAssumption,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(url,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(equations,Some(SimpleType(equations)),0,1),Elt(relativeRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),0,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(minimal,Some(SimpleType(boolean)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(strategy,Some(Choice(Elt(innermost,None,1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(outermost,None,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conversion,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(equationStep,Some(Sequence(Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1),Elt(rule,Some(SimpleType(rule)),1,1),GroupRef(t4,1,1),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t4,Some(Choice(Elt(leftRight,None,1,1),Elt(rightLeft,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(subsumptionProof,Some(Sequence(Elt(ruleSubsumptionProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(innermostLhss,Some(Sequence(GroupRef(term,0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(complexityMeasure,Some(Choice(Elt(derivationalComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1))),1,1),Elt(runtimeComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1),Elt(signature,Some(SimpleType(signature)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(equationalProofTree,Some(Choice(Elt(refl,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(sym,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(trans,Some(Sequence(GroupRef(equationalProofTree,1,1),GroupRef(eqeuationalProofTree,1,1))),1,1),Elt(assm,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(cong,Some(Sequence(GroupRef(symbol,1,1),GroupRef(equationalProofTree,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(completionAndNormalization,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(signature,Some(Sequence(Elt(symbol,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">Elt(conditionalConstraint,Some(Choice(Elt(implication,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,unbounded))),1,1),Elt(constraint,Some(Sequence(GroupRef(term,1,1),GroupRef(t3,1,1),GroupRef(term,1,1))),1,1),Elt(all,Some(Sequence(Elt(var,Some(SimpleType(string)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t3,Some(Choice(Elt(rewrite,None,1,1),Elt(strict,None,1,1),Elt(nonStrict,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalConstraintProof,Some(Choice(Elt(final,None,1,1),Elt(differentConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1),Elt(sameConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(deleteCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(variableEquation,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(funargIntoVar,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(position,Some(SimpleType(position)),1,1),Elt(var,Some(SimpleType(var)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(simplifyCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(induction,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conjuncts,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),0,unbounded))),1,1),Elt(ruleConstraintProofs,Some(Sequence(Elt(ruleConstraintProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(subtermVarEntries,Some(Sequence(Elt(subtermVarEntry,Some(Sequence(GroupRef(term,1,1),Elt(var,Some(SimpleType(var)),0,unbounded))),0,unbounded))),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),0,unbounded))),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(complexityClass,Some(Choice(Elt(polynomial,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(complexityProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleShifting,Some(Sequence(Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(completionProof,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(equivalenceProof,Some(Sequence(Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),1,1),Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(crProof,Some(Choice(Elt(wcrAndSN,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(orthogonal,None,<text:soft-page-break/>1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(crDisproof,Some(Choice(Elt(nonWcrAndSN,Some(Sequence(Elt(wcrDisproof,Some(GroupRef(wcrDisproof,1,1)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(nonJoinableFork,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t2,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(wcrDisproof,Some(Choice(Elt(nonJoinableCriticalPairsAuto,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t2,Some(Choice(Elt(distinctNormalForms,None,1,1),Elt(capNotUnif,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpRuleRemoval,Some(Sequence(Elt(dps,Some(SimpleType(dps)),0,1),Elt(trs,Some(SimpleType(trs)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(infinitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(innermostLhssIncreaseProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(switchFullStrategyProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpProof,Some(Choice(Elt(pIsEmpty,None,1,1),Elt(depGraphProc,Some(Sequence(Elt(component,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(realScc,Some(SimpleType(boolean)),1,1),Elt(arcs,Some(Sequence(Elt(forwardArc,Some(SimpleType(positiveInteger)),0,unbounded))),0,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),0,unbounded))),1,1),Elt(redPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(redPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(subtermProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(projectedRewriteSequence,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlabProc,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(unlabProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(sizeChangeProc,Some(Sequence(GroupRef(t1,1,1),Elt(sizeChangeGraph,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(edge,Som<text:soft-page-break/>e(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(strict,Some(SimpleType(boolean)),1,1),Elt(position,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(flatContextClosureProc,Some(Sequence(Elt(freshSymbol,Some(Sequence(GroupRef(symbol,1,1))),0,1),Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(argumentFilterProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(uncurryProc,Some(Sequence(Elt(applicativeTop,Some(SimpleType(positiveInteger)),0,1),Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(finitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(usableRulesProc,Some(Sequence(Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(switchInnermostProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(rewritingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(forwardInstantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(narrowingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(splitProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(generalRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(strict,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(bound,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(condRedPairProof,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(SimpleType(nonNegativeInteger)),1,1),Elt(after,Some(SimpleType(nonNegativeInteger)),1,1),Elt(conditions,Some(Sequence(Elt(condition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(dpSequence,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1))),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t1,Some(Choice(Elt(subtermCriterion,None,1,1),Elt(reductionPair,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equationalProof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1),Elt(equationalProofTree,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equationalDisproof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">Elt(relativeNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1))),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(relativeTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(sIsEmpty,Some(Sequence(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(relativeTerminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(equalityRemoval,Some(Sequence(Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsNonterminationProof,Some(Choice(Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(innermostLhssIncrease,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(flatContextClosure,Some(Sequence(Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(terminationAssumption,Some(Sequence(Elt<text:soft-page-break/>(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(bounds,Some(Sequence(Elt(type,Some(GroupRef(type,1,1)),1,1),Elt(bound,Some(SimpleType(nonNegativeInteger)),1,1),Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(treeAutomaton,Some(SimpleType(treeAutomaton)),1,1))),1,1),Elt(switchInnermost,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(split,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(type,Some(Choice(Elt(roof,None,1,1),Elt(match,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(wcrProof,Some(Choice(Elt(joinableCriticalPairs,Some(Sequence(Elt(joinableCriticalPair,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded))),1,1),Elt(joinableCriticalPairsAuto,None,1,1),Elt(joinableCriticalPairsBFS,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(quasiReductiveProof,Some(Choice(Elt(unraveling,Some(Sequence(Elt(unravelingInformation,Some(Sequence(Elt(unravelingEntry,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),1,1),Elt(rule,Some(SimpleType(rule)),1,unbounded))),0,unbounded))),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(proof,Some(Choice(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(crProof,Some(SimpleType(crProof)),1,1),Elt(crDisproof,Some(SimpleType(crDisproof)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1),Elt(equationalProof,Some(SimpleType(equationalProof)),1,1),Elt(equationalDisproof,Some(SimpleType(equationalDisproof)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1),Elt(quasiReductiveProof,Some(SimpleType(quasiReductiveProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(certificationProblem,Some(Sequence(Elt(input,Some(GroupRef(input,1,1)),1,1),Elt(cpfVersion,Some(SimpleType(string)),1,1),Elt(proof,Some(SimpleType(proof)),1,1),Elt(origin,Some(Sequence(Elt(proofOrigin,Some(Sequence(Elt(tool,Some(Sequence(Elt(name,Some(SimpleType(string)),1,1),Elt(version,Some(SimpleType(string)),1,1),Elt(strategy,Some(SimpleType(string)),0,1),Elt(url,Some(SimpleType(url)),0,1))),1,unbounded),Elt(toolUser,Some(Sequence(Elt(firstName,Some(SimpleType(string)),1,1),Elt(lastName,Some(SimpleType(string)),1,1),Elt(url,Some(SimpleType(url)),0,1))),0,unbounded))),1,1),Elt(inputOrigin,Some(Sequence(Elt(tpdbReference,Some(Sequence(Elt(fileName,Some(SimpleType(string)),1,1),Elt(tpdbId,Some(SimpleType(long)),0,1))),0,1),Elt(source,Some(SimpleType(string)),0,1))),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(input,Some(Choice(Elt(trsInput,Some(SimpleType(trsInput)),1,1),Elt(dpInput,Some(SimpleType(dpInput)),1,1),Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1),Elt(completionInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(trs,Some(SimpleType(trs)),<text:soft-page-break/>1,1))),1,1),Elt(equationalReasoningInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(equation,Some(Sequence(GroupRef(term,1,1),GroupRef(term,1,1))),1,1))),1,1),Elt(complexityInput,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1),GroupRef(complexityMeasure,1,1),GroupRef(complexityClass,1,1))),1,1),Elt(ctrsInput,Some(Sequence(Elt(conditionalRules,Some(SimpleType(conditionalRules)),1,1))),1,1))),0,unbounded)*)</text:p>
   <text:p text:style-name="P13"/>
   <text:p text:style-name="Standard">(* list of tag name after flatten and order *)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">type t2 wcrDisproof t3 t4 url state t7 t6 tupleOrder status t10 var t8 name boolean long positiveInteger position t11 positionInTerm strictDimension dimension integer number domain matrix vector coefficient polynomial function nonNegativeInteger complexityClass arithFunction degree type_t9 arity symbol label signature complexity Measure lhs treeAutomaton model argumentFilter monotonePositions redPair term conditional Constraint innermostLhss strategy context substitution patternEquivalence patternTerm rule conditionalConstraintProof equationalProofTree conversion subsumptionProof orderingConstraints orderingConstraintProof rewriteStep rewriteSequence wcrProof loop t5 patternRule nonLoop rules equations uncurryInformation usableRules t1 trs complexityProof trsInput dps dpInput dpProof trsTerminationProof relativeTerminationProof dpNonterminationProof trsNonterminationProof relativeNonterminationProof crDisproofcrProof completionProof completionAndNormalization equationalDisproof equationalProof conditionalRule quasiReductiveProof proof conditionalRules input certificationProblem</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">91 </text:p>
   <text:p text:style-name="Standard">81 </text:p>
   <text:p text:style-name="Standard">80 </text:p>
   <text:p text:style-name="Standard">73 </text:p>
   <text:p text:style-name="Standard">65 </text:p>
   <text:p text:style-name="Standard">59 </text:p>
   <text:p text:style-name="Standard">50 </text:p>
   <text:p text:style-name="Standard">44 </text:p>
   <text:p text:style-name="Standard">42 </text:p>
   <text:p text:style-name="Standard">38 </text:p>
   <text:p text:style-name="Standard">35 </text:p>
   <text:p text:style-name="Standard">34 </text:p>
   <text:p text:style-name="Standard">8 </text:p>
   <text:p text:style-name="Standard">45 </text:p>
   <text:p text:style-name="Standard">5 </text:p>
   <text:p text:style-name="Standard">4 </text:p>
   <text:p text:style-name="Standard">3 </text:p>
   <text:p text:style-name="Standard">2 </text:p>
   <text:p text:style-name="Standard">27 </text:p>
   <text:p text:style-name="Standard">30 </text:p>
   <text:p text:style-name="Standard">28 </text:p>
   <text:p text:style-name="Standard">25 </text:p>
   <text:p text:style-name="Standard">24 </text:p>
   <text:p text:style-name="Standard">1 </text:p>
   <text:p text:style-name="Standard">17 </text:p>
   <text:p text:style-name="Standard">31 </text:p>
   <text:p text:style-name="Standard">20 </text:p>
   <text:p text:style-name="Standard">19 </text:p>
   <text:p text:style-name="Standard">18 </text:p>
   <text:p text:style-name="Standard">21 </text:p>
   <text:p text:style-name="Standard">22 </text:p>
   <text:p text:style-name="Standard">0 </text:p>
   <text:p text:style-name="Standard">75 </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>36 </text:p>
   <text:p text:style-name="Standard">26 </text:p>
   <text:p text:style-name="Standard">33 </text:p>
   <text:p text:style-name="Standard">23 </text:p>
   <text:p text:style-name="Standard">7 </text:p>
   <text:p text:style-name="Standard">6 </text:p>
   <text:p text:style-name="Standard">71 </text:p>
   <text:p text:style-name="Standard">68 </text:p>
   <text:p text:style-name="Standard">52 </text:p>
   <text:p text:style-name="Standard">51 </text:p>
   <text:p text:style-name="Standard">37 </text:p>
   <text:p text:style-name="Standard">29 </text:p>
   <text:p text:style-name="Standard">57 </text:p>
   <text:p text:style-name="Standard">32 </text:p>
   <text:p text:style-name="Standard">9 </text:p>
   <text:p text:style-name="Standard">72 </text:p>
   <text:p text:style-name="Standard">67 </text:p>
   <text:p text:style-name="Standard">62 </text:p>
   <text:p text:style-name="Standard">47 </text:p>
   <text:p text:style-name="Standard">46 </text:p>
   <text:p text:style-name="Standard">43 </text:p>
   <text:p text:style-name="Standard">39 </text:p>
   <text:p text:style-name="Standard">10 </text:p>
   <text:p text:style-name="Standard">74 </text:p>
   <text:p text:style-name="Standard">69 </text:p>
   <text:p text:style-name="Standard">64 </text:p>
   <text:p text:style-name="Standard">66 </text:p>
   <text:p text:style-name="Standard">56 </text:p>
   <text:p text:style-name="Standard">58 </text:p>
   <text:p text:style-name="Standard">49 </text:p>
   <text:p text:style-name="Standard">48 </text:p>
   <text:p text:style-name="Standard">92 </text:p>
   <text:p text:style-name="Standard">54 </text:p>
   <text:p text:style-name="Standard">41 </text:p>
   <text:p text:style-name="Standard">40 </text:p>
   <text:p text:style-name="Standard">55 </text:p>
   <text:p text:style-name="Standard">12 </text:p>
   <text:p text:style-name="Standard">63 </text:p>
   <text:p text:style-name="Standard">53 </text:p>
   <text:p text:style-name="Standard">16 </text:p>
   <text:p text:style-name="Standard">84 </text:p>
   <text:p text:style-name="Standard">15 </text:p>
   <text:p text:style-name="Standard">76 </text:p>
   <text:p text:style-name="Standard">60 </text:p>
   <text:p text:style-name="Standard">14 </text:p>
   <text:p text:style-name="Standard">61 </text:p>
   <text:p text:style-name="Standard">83 </text:p>
   <text:p text:style-name="Standard">90 </text:p>
   <text:p text:style-name="Standard">88 </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/>82 </text:p>
   <text:p text:style-name="Standard">89 </text:p>
   <text:p text:style-name="Standard">87 </text:p>
   <text:p text:style-name="Standard">79 </text:p>
   <text:p text:style-name="Standard">78 </text:p>
   <text:p text:style-name="Standard">77 </text:p>
   <text:p text:style-name="Standard">70 </text:p>
   <text:p text:style-name="Standard">86 </text:p>
   <text:p text:style-name="Standard">85 </text:p>
   <text:p text:style-name="Standard">11 </text:p>
   <text:p text:style-name="Standard">93 </text:p>
   <text:p text:style-name="Standard">94 </text:p>
   <text:p text:style-name="Standard">13 </text:p>
   <text:p text:style-name="Standard">96 </text:p>
   <text:p text:style-name="Standard">95 </text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">(* return a name of Group alone, other xsd return an empty list *)</text:p>
   <text:p text:style-name="Standard">debug at the “matrix” function, then print the output of pair_xsds.</text:p>
   <text:p text:style-name="Standard">set print_length 1000 and set print_depth 100.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">p pair_xsds </text:p>
   <text:p text:style-name="Standard">pair_xsds : (string * string list) list = </text:p>
   <text:p text:style-name="Standard"><text:s text:c="2"/>[(&quot;&quot;, []); (&quot;label&quot;, [&quot;nonNegativeInteger&quot;; &quot;symbol&quot;]); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;symbol&quot;, [&quot;name&quot;; &quot;symbol&quot;; &quot;symbol&quot;; &quot;label&quot;]); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;term&quot;, [&quot;var&quot;; &quot;symbol&quot;; &quot;term&quot;]); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;number&quot;, [&quot;integer&quot;; &quot;integer&quot;; &quot;positiveInteger&quot;]); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;&quot;, []); (&quot;function&quot;, [&quot;polynomial&quot;]); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;t22&quot;, [&quot;positiveInteger&quot;; &quot;position&quot;]); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;type_t20&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>[&quot;domain&quot;; &quot;degree&quot;; &quot;domain&quot;; &quot;dimension&quot;; &quot;strictDimension&quot;]); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;t21&quot;, [&quot;lex&quot;; &quot;mul&quot;]); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;t16&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>[&quot;rule&quot;; &quot;boolean&quot;; &quot;patternRule&quot;; &quot;substitution&quot;; &quot;substitution&quot;; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>&quot;patternRule&quot;; &quot;substitution&quot;; &quot;positionInTerm&quot;; &quot;var&quot;; &quot;patternRule&quot;; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>&quot;t17&quot;; &quot;patternEquivalence&quot;; &quot;patternRule&quot;; &quot;patternRule&quot;; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>&quot;positionInTerm&quot;; &quot;patternRule&quot;; &quot;substitution&quot;; &quot;t18&quot;; &quot;patternRule&quot;; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>&quot;rewriteSequence&quot;; &quot;t19&quot;]); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;t17&quot;, [&quot;left&quot;; &quot;right&quot;]); (&quot;t18&quot;, [&quot;base&quot;; &quot;pumping&quot;; &quot;closing&quot;]); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;t19&quot;, [&quot;base&quot;; &quot;var&quot;; &quot;var&quot;]); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;context&quot;, [&quot;box&quot;; &quot;symbol&quot;; &quot;term&quot;; &quot;context&quot;; &quot;term&quot;]); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;t15&quot;, [&quot;leftRight&quot;; &quot;rightLeft&quot;]); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;complexityMeasure&quot;, [&quot;signature&quot;; &quot;signature&quot;; &quot;signature&quot;]); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;equationalProofTree&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>[&quot;term&quot;; &quot;equationalProofTree&quot;; &quot;equationalProofTree&quot;; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>&quot;equationalProofTree&quot;; &quot;rule&quot;; &quot;substitution&quot;; &quot;symbol&quot;; </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="5"/>&quot;equationalProofTree&quot;]); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;t14&quot;, [&quot;rewrite&quot;; &quot;strict&quot;; &quot;nonStrict&quot;]); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;complexityClass&quot;, [&quot;nonNegativeInteger&quot;]); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;&quot;, []); (&quot;t13&quot;, [&quot;distinctNormalForms&quot;; &quot;capNotUnif&quot;]); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;t12&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>[&quot;subtermCriterion&quot;; &quot;orderingConstraints&quot;; &quot;orderingConstraintProof&quot;; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>&quot;usableRules&quot;]); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, []); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>(&quot;&quot;, []); (&quot;&quot;, []); (&quot;&quot;, [])] </text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">(*********************************************************************************)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">After apply the [insert] function: &lt;lhs&gt;<text:tab/></text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(lhs,Some(Choice(Elt(lhs,Some(Sequence(GroupRef(symbol,1,1),Elt(height,Some(SimpleType(nonNegativeInteger)),0,1),Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(state,Some(SimpleType(state)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">(*********************************************************************************)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">after replace + &lt;Group&gt; &lt;Choice&gt; &lt;SimpleType&gt; to &lt;Group&gt; &lt;Choice&gt; &lt;GroupRef&gt;</text:p>
   <text:p text:style-name="Standard">(*Elt(name,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(label,Some(Choice(Elt(numberLabel,Some(Sequence(Elt(number,Some(SimpleType(nonNegativeInteger)),0,unbounded))),1,1),Elt(symbolLabel,Some(Sequence(GroupRef(symbol,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(symbol,Some(Choice(Elt(name,Some(GroupRef(name,1,1)),1,1),Elt(sharp,Some(Sequence(GroupRef(symbol,1,1))),1,1),Elt(labeledSymbol,Some(Sequence(GroupRef(symbol,1,1),GroupRef(label,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(var,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(term,Some(Choice(Elt(var,Some(GroupRef(var,1,1)),1,1),Elt(funapp,Some(Sequence(GroupRef(symbol,1,1),Elt(arg,Some(GroupRef(term,1,1)),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rule,Some(Sequence(Elt(lhs,Some(GroupRef(term,1,1)),1,1),Elt(rhs,Some(GroupRef(term,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rules,Some(Sequence(Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalRules,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>Elt(dps,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trs,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(usableRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(number,Some(Choice(Elt(integer,Some(GroupRef(integer,1,1)),1,1),Elt(rational,Some(Sequence(Elt(numerator,Some(SimpleType(integer)),1,1),Elt(denominator,Some(SimpleType(positiveInteger)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(coefficient,Some(Choice(GroupRef(number,1,1),Elt(minusInfinity,None,1,1),Elt(plusInfinity,None,1,1),Elt(vector,Some(SimpleType(vector)),1,1),Elt(matrix,Some(SimpleType(matrix)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(vector,Some(Sequence(Elt(coefficient,Some(SimpleType(coefficient)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(matrix,Some(Sequence(Elt(vector,Some(SimpleType(vector)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(polynomial,Some(Choice(Elt(coefficient,Some(SimpleType(coefficient)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(function,Some(Choice(Elt(polynomial,Some(GroupRef(polynomial,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(arity,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(strictDimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(degree,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(position,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(argumentFilter,Some(Sequence(Elt(argumentFilterEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(t11,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t11,Some(Choice(Elt(collapsing,Some(GroupRef(positiveInteger,1,1)),1,1),Elt(nonCollapsing,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(domain,Some(Choice(Elt(naturals,None,1,1),Elt(integers,None,1,1),Elt(rationals,Some(Sequence(Elt(delta,Some(Sequence(GroupRef(number,1,1))),1,1))),1,1),Elt(arctic,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(tropical,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(matrices,Some(Sequence(Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1),Elt(domain,Some(SimpleType(domain)),1,1))),1,<text:soft-page-break/>1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(redPair,Some(Choice(Elt(interpretation,Some(Sequence(Elt(type,Some(GroupRef(type_t9,1,1)),1,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(function,1,1))),0,unbounded))),1,1),Elt(pathOrder,Some(Sequence(Elt(statusPrecedence,Some(Sequence(Elt(statusPrecedenceEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),GroupRef(t10,1,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(knuthBendixOrder,Some(Sequence(Elt(w0,Some(SimpleType(positiveInteger)),1,1),Elt(precedenceWeight,Some(Sequence(Elt(precedenceWeightEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),Elt(weight,Some(SimpleType(nonNegativeInteger)),1,1),Elt(subtermCoefficientEntries,Some(Sequence(Elt(entry,Some(SimpleType(positiveInteger)),0,unbounded))),0,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(scnp,Some(Sequence(Elt(status,Some(GroupRef(status,1,1)),1,1),Elt(levelMapping,Some(Sequence(Elt(levelMappingEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(positionLevelEntry,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(level,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(redPair,Some(SimpleType(redPair)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(type_t9,Some(Choice(Elt(polynomial,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(degree,Some(SimpleType(degree)),1,1))),1,1),Elt(matrixInterpretation,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t10,Some(Choice(Elt(lex,Some(Choice()),1,1),Elt(mul,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(status,Some(Choice(Elt(ms,None,1,1),Elt(min,None,1,1),Elt(max,None,1,1),Elt(dms,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(arithFunction,Some(Choice(Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(model,Some(Choice(Elt(finiteModel,Some(Sequence(Elt(carrierSize,Some(SimpleType(positiveInteger)),1,1),Elt(tupleOrder,Some(GroupRef(tupleOrder,1,1)),0,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(arithFunction,Some(SimpleType(arithFunction)),1,1))),0,unbounded),Elt(labeling,None,0,1))),1,1),Elt(rootLabeling,Some(Sequence(GroupRef(symbol,0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(tupleOrder,Some(Choice(Elt(pointWise,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(patternTerm,Some(Sequence(GroupRef(term,1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(patternRule,Some(Sequence(Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),GroupRef(t5,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">Group(t5,Some(Choice(Elt(originalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(isPair,Some(SimpleType(boolean)),1,1))),1,1),Elt(initialPumping,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(initialPumpingContext,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(equivalence,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),GroupRef(t6,1,1),Elt(patternEquivalence,Some(GroupRef(patternEquivalence,1,1)),1,1))),1,1),Elt(narrowing,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1),Elt(instantiation,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(t7,1,1))),1,1),Elt(rewriting,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t8,1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t6,Some(Choice(Elt(left,None,1,1),Elt(right,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(patternEquivalence,Some(Choice(Elt(domainRenaming,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(irrelevant,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(simplification,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t7,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Choice()),1,1),Elt(closing,Some(Choice()),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t8,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(closing,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(substitution,Some(Sequence(Elt(substEntry,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(context,Some(Choice(Elt(box,None,1,1),Elt(funContext,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(GroupRef(term,0,unbounded)),1,1),GroupRef(context,1,1),Elt(after,Some(GroupRef(term,0,unbounded)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rewriteSequence,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rewriteStep,Some(Sequence(Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(rule,Some(SimpleType(rule)),1,1),Elt(relative,None,0,1),GroupRef(term,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(state,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(treeAutomaton,Some(Sequence(Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(transitions,Some(Sequence(Elt(transition,Some(Sequence(Elt(lhs,Some(GroupRef(lhs,1,1)),1,1),Elt(rhs,Some(Sequence(Elt(state,Some(SimpleType(state)),1,1))),1,1))),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">Group(lhs,Some(Choice(Sequence(GroupRef(symbol,1,1),Elt(height,Some(SimpleType(nonNegativeInteger)),0,1),Elt(state,Some(SimpleType(state)),0,unbounded)),Elt(state,Some(GroupRef(state,1,1)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(uncurryInformation,Some(Sequence(GroupRef(symbol,1,1),Elt(uncurriedSymbols,Some(Sequence(Elt(uncurriedSymbolEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(symbol,1,unbounded))),1,unbounded))),1,1),Elt(uncurryRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(etaRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(loop,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(context,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(nonLoop,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(orderingConstraints,Some(Sequence(Elt(orderingConstraintElement,Some(Sequence(Elt(strict,Some(SimpleType(boolean)),1,1),Elt(ceCompatible,Some(SimpleType(boolean)),1,1),Elt(monotonePositions,Some(GroupRef(monotonePositions,1,1)),0,1),Elt(ignoredPositions,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1))),0,1),Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(monotonePositions,Some(Choice(Elt(argumentFilter,Some(GroupRef(argumentFilter,1,1)),1,1),Elt(everySymbolAndPosition,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(orderingConstraintProof,Some(Choice(Elt(redPair,Some(SimpleType(redPair)),1,1),Elt(satisfiableAssumption,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(url,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(equations,Some(SimpleType(equations)),0,1),Elt(relativeRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),0,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(minimal,Some(SimpleType(boolean)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(strategy,Some(Choice(Elt(innermost,None,1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(outermost,None,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conversion,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(equationStep,Some(Sequence(Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1),Elt(rule,Some(SimpleType(rule)),1,1),GroupRef(t4,1,1),GroupRef(term,1,1))),0,unbou<text:soft-page-break/>nded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t4,Some(Choice(Elt(leftRight,None,1,1),Elt(rightLeft,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(subsumptionProof,Some(Sequence(Elt(ruleSubsumptionProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(innermostLhss,Some(Sequence(GroupRef(term,0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(complexityMeasure,Some(Choice(Elt(derivationalComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1))),1,1),Elt(runtimeComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1),Elt(signature,Some(SimpleType(signature)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(equationalProofTree,Some(Choice(Elt(refl,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(sym,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(trans,Some(Sequence(GroupRef(equationalProofTree,1,1),GroupRef(equationalProofTree,1,1))),1,1),Elt(assm,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(cong,Some(Sequence(GroupRef(symbol,1,1),GroupRef(equationalProofTree,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(completionAndNormalization,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(signature,Some(Sequence(Elt(symbol,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalConstraint,Some(Choice(Elt(implication,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,unbounded))),1,1),Elt(constraint,Some(Sequence(GroupRef(term,1,1),GroupRef(t3,1,1),GroupRef(term,1,1))),1,1),Elt(all,Some(Sequence(Elt(var,Some(SimpleType(string)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t3,Some(Choice(Elt(rewrite,None,1,1),Elt(strict,None,1,1),Elt(nonStrict,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalConstraintProof,Some(Choice(Elt(final,None,1,1),Elt(differentConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1),Elt(sameConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(deleteCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(variableEquation,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(funargIntoVar,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(position,Some(SimpleType(position)),1,1),Elt(var,Some(SimpleType(var)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(simplifyCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(induction,Some(Sequence(Elt<text:soft-page-break/>(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conjuncts,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),0,unbounded))),1,1),Elt(ruleConstraintProofs,Some(Sequence(Elt(ruleConstraintProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(subtermVarEntries,Some(Sequence(Elt(subtermVarEntry,Some(Sequence(GroupRef(term,1,1),Elt(var,Some(SimpleType(var)),0,unbounded))),0,unbounded))),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),0,unbounded))),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(complexityClass,Some(Choice(Elt(polynomial,Some(GroupRef(nonNegativeInteger,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(complexityProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleShifting,Some(Sequence(Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(completionProof,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(equivalenceProof,Some(Sequence(Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),1,1),Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(crProof,Some(Choice(Elt(wcrAndSN,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(orthogonal,None,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(crDisproof,Some(Choice(Elt(nonWcrAndSN,Some(Sequence(Elt(wcrDisproof,Some(GroupRef(wcrDisproof,1,1)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(nonJoinableFork,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t2,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(wcrDisproof,Some(Choice(Elt(nonJoinableCriticalPairsAuto,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t2,Some(Choice(Elt(distinctNormalForms,None,1,1),Elt(capNotUnif,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpRuleRemoval,Some(Sequence(Elt(dps,Some(SimpleType(dps)),0,1),Elt(trs,Some(SimpleType(trs)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(infinitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(innermostLhssIncreaseProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(switchFullStrategyProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpProof,Some(Choice(Elt(pIsEmpty,None,1,1),Elt(depGraphProc,Some(Sequence(Elt(component,<text:soft-page-break/>Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(realScc,Some(SimpleType(boolean)),1,1),Elt(arcs,Some(Sequence(Elt(forwardArc,Some(SimpleType(positiveInteger)),0,unbounded))),0,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),0,unbounded))),1,1),Elt(redPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(redPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(subtermProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(projectedRewriteSequence,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlabProc,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(unlabProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(sizeChangeProc,Some(Sequence(GroupRef(t1,1,1),Elt(sizeChangeGraph,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(edge,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(strict,Some(SimpleType(boolean)),1,1),Elt(position,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(flatContextClosureProc,Some(Sequence(Elt(freshSymbol,Some(Sequence(GroupRef(symbol,1,1))),0,1),Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(argumentFilterProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(uncurryProc,Some(Sequence(Elt(applicativeTop,Some(SimpleType(positiveInteger)),0,1),Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(finitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(usableRulesProc,Some(Sequence(Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(switchInnermostProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(rewritingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(forwardInstantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(narrowingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpP<text:soft-page-break/>roof)),1,1))),1,1),Elt(splitProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(generalRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(strict,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(bound,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(condRedPairProof,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(SimpleType(nonNegativeInteger)),1,1),Elt(after,Some(SimpleType(nonNegativeInteger)),1,1),Elt(conditions,Some(Sequence(Elt(condition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(dpSequence,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1))),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t1,Some(Choice(Elt(subtermCriterion,None,1,1),Elt(reductionPair,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equationalProof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1),Elt(equationalProofTree,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equationalDisproof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(relativeNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1))),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(relativeTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(sIsEmpty,Some(Sequence(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(relativeTerminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(equalityRemoval,Some(Sequence(Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>Elt(trsNonterminationProof,Some(Choice(Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(innermostLhssIncrease,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(flatContextClosure,Some(Sequence(Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(terminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(bounds,Some(Sequence(Elt(type,Some(GroupRef(type,1,1)),1,1),Elt(bound,Some(SimpleType(nonNegativeInteger)),1,1),Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(treeAutomaton,Some(SimpleType(treeAutomaton)),1,1))),1,1),Elt(switchInnermost,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(split,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(type,Some(Choice(Elt(roof,None,1,1),Elt(match,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(wcrProof,Some(Choice(Elt(joinableCriticalPairs,Some(Sequence(Elt(joinableCriticalPair,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded))),1,1),Elt(joinableCriticalPairsAuto,None,1,1),Elt(joinableCriticalPairsBFS,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(quasiReductiveProof,Some(Choice(Elt(unraveling,Some(Sequence(Elt(unravelingInformation,Some(Sequence(Elt(unravelingEntry,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),1,1),Elt(rule,Some(SimpleType(rule)),1,unbounded))),0,unbounded))),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(proof,Some(Choice(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsN<text:soft-page-break/>onterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(crProof,Some(SimpleType(crProof)),1,1),Elt(crDisproof,Some(SimpleType(crDisproof)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1),Elt(equationalProof,Some(SimpleType(equationalProof)),1,1),Elt(equationalDisproof,Some(SimpleType(equationalDisproof)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1),Elt(quasiReductiveProof,Some(SimpleType(quasiReductiveProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(certificationProblem,Some(Sequence(Elt(input,Some(GroupRef(input,1,1)),1,1),Elt(cpfVersion,Some(SimpleType(string)),1,1),Elt(proof,Some(SimpleType(proof)),1,1),Elt(origin,Some(Sequence(Elt(proofOrigin,Some(Sequence(Elt(tool,Some(Sequence(Elt(name,Some(SimpleType(string)),1,1),Elt(version,Some(SimpleType(string)),1,1),Elt(strategy,Some(SimpleType(string)),0,1),Elt(url,Some(SimpleType(url)),0,1))),1,unbounded),Elt(toolUser,Some(Sequence(Elt(firstName,Some(SimpleType(string)),1,1),Elt(lastName,Some(SimpleType(string)),1,1),Elt(url,Some(SimpleType(url)),0,1))),0,unbounded))),1,1),Elt(inputOrigin,Some(Sequence(Elt(tpdbReference,Some(Sequence(Elt(fileName,Some(SimpleType(string)),1,1),Elt(tpdbId,Some(SimpleType(long)),0,1))),0,1),Elt(source,Some(SimpleType(string)),0,1))),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(input,Some(Choice(Elt(trsInput,Some(GroupRef(trsInput,1,1)),1,1),Elt(dpInput,Some(GroupRef(dpInput,1,1)),1,1),Elt(orderingConstraints,Some(GroupRef(orderingConstraints,1,1)),1,1),Elt(completionInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(trs,Some(SimpleType(trs)),1,1))),1,1),Elt(equationalReasoningInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(equation,Some(Sequence(GroupRef(term,1,1),GroupRef(term,1,1))),1,1))),1,1),Elt(complexityInput,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1),GroupRef(complexityMeasure,1,1),GroupRef(complexityClass,1,1))),1,1),Elt(ctrsInput,Some(Sequence(Elt(conditionalRules,Some(SimpleType(conditionalRules)),1,1))),1,1))),0,unbounded)*)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P13">(*********************************************************************************)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Xsd list before flatenning (orginial xsds):</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">(*Elt(name,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(label,Some(Choice(Elt(numberLabel,Some(Sequence(Elt(number,Some(SimpleType(nonNegativeInteger)),0,unbounded))),1,1),Elt(symbolLabel,Some(Sequence(GroupRef(symbol,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(symbol,Some(Choice(Elt(name,Some(SimpleType(name)),1,1),Elt(sharp,Some(Sequence(GroupRef(symbol,1,1))),1,1),Elt(labeledSymbol,Some(Sequence(GroupRef(symbol,1,1),GroupRef(label,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(var,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(term,Some(Choice(Elt(var,Some(SimpleType(var)),1,1),Elt(funapp,Some(Sequence(GroupRef(symbol,1,1),Elt(arg,Some(GroupRef(term,1,1)),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rule,Some(Sequence(Elt(lhs,Some(GroupRef(term,1,1)),1,1),Elt(rhs,Some(GroupRef(term,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rules,Some(Sequence(Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalRules,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dps,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trs,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(usableRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(number,Some(Choice(Elt(integer,Some(SimpleType(integer)),1,1),Elt(rational,Some(Sequence(Elt(numerator,Some(SimpleType(integer)),1,1),Elt(denominator,Some(SimpleType(positiveInteger)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(coefficient,Some(Choice(GroupRef(number,1,1),Elt(minusInfinity,None,1,1),Elt(plusInfinity,None,1,1),Elt(vector,Some(SimpleType(vector)),1,1),Elt(matrix,Some(SimpleType(matrix)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(vector,Some(Sequence(Elt(coefficient,Some(SimpleType(coefficient)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(matrix,Some(Sequence(Elt(vector,Some(SimpleType(vector)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(polynomial,Some(Choice(Elt(coefficient,Some(SimpleType(coefficient)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1<text:soft-page-break/>,unbounded))),1,1),Elt(max,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(function,Some(Choice(Elt(polynomial,Some(SimpleType(polynomial)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(arity,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(strictDimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(degree,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(position,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(argumentFilter,Some(Sequence(Elt(argumentFilterEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Choice(Elt(collapsing,Some(SimpleType(positiveInteger)),1,1),Elt(nonCollapsing,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1)))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(domain,Some(Choice(Elt(naturals,None,1,1),Elt(integers,None,1,1),</text:p>
   <text:p text:style-name="Standard">Elt(rationals,Some(Sequence(Elt(delta,Some(Sequence(GroupRef(number,1,1))),1,1))),1,1),Elt(arctic,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(tropical,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(matrices,Some(Sequence(Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1),Elt(domain,Some(SimpleType(domain)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(redPair,Some(Choice(Elt(interpretation,Some(Sequence(Elt(type,Some(Choice(Elt(polynomial,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(degree,Some(SimpleType(degree)),1,1))),1,1),Elt(matrixInterpretation,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1))),1,1))),1,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(function,1,1))),0,unbounded))),1,1),Elt(pathOrder,Some(Sequence(Elt(statusPrecedence,Some(Sequence(Elt(statusPrecedenceEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),Choice(Elt(lex,Some(Choice()),1,1),Elt(mul,None,1,1)))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(knuthBendixOrder,Some(Sequence(Elt(w0,Some(SimpleType(positiveInteger)),1,1),Elt(precedenceWeight,Some(Sequence(Elt(precedenceWeightEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),Elt(weight,Some(SimpleType(nonNegativeInteger)),1,1),Elt(subtermCoefficientEntries,Some(Sequence(Elt(entry,Some(SimpleType(positiveInteger)),0,unbounded))),0,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(scnp,Some(Sequence(Elt(status,Some(Choice(Elt(ms,None,1,1),Elt(min,None,1,1),Elt(max,None,1,1),Elt(dms,None,1,1))),1,1),Elt(levelMapping,Some(Sequence(Elt(levelMappingEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(positionLevelEntry,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(level,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unb<text:soft-page-break/>ounded))),1,1),Elt(redPair,Some(SimpleType(redPair)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(arithFunction,Some(Choice(Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(model,Some(Choice(Elt(finiteModel,Some(Sequence(Elt(carrierSize,Some(SimpleType(positiveInteger)),1,1),Elt(tupleOrder,Some(Choice(Elt(pointWise,None,1,1))),0,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(arithFunction,Some(SimpleType(arithFunction)),1,1))),0,unbounded),Elt(labeling,None,0,1))),1,1),Elt(rootLabeling,Some(Sequence(GroupRef(symbol,0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(patternTerm,Some(Sequence(GroupRef(term,1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(patternRule,Some(Sequence(Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),Choice(Elt(originalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(isPair,Some(SimpleType(boolean)),1,1))),1,1),Elt(initialPumping,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(initialPumpingContext,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(equivalence,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Choice(Elt(left,None,1,1),Elt(right,None,1,1)),Elt(patternEquivalence,Some(Choice(Elt(domainRenaming,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(irrelevant,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(simplification,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1))),1,1))),1,1),Elt(narrowing,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1),Elt(instantiation,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Choice(Elt(base,None,1,1),Elt(pumping,Some(Choice()),1,1),Elt(closing,Some(Choice()),1,1)))),1,1),Elt(rewriting,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Choice(Elt(base,None,1,1),Elt(pumping,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(closing,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1)))),1,1)))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(substitution,Some(Sequence(Elt(substEntry,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(context,Some(Choice(Elt(box,None,1,1),Elt(funContext,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(GroupRef(term,0,unbounded)),1,1),GroupRef(context,1,1),Elt(after,Some(GroupRef(term,0,unbounded)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rewriteSequence,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">Elt(rewriteStep,Some(Sequence(Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(rule,Some(SimpleType(rule)),1,1),Elt(relative,None,0,1),GroupRef(term,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(state,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(treeAutomaton,Some(Sequence(Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(transitions,Some(Sequence(Elt(transition,Some(Sequence(Elt(lhs,Some(Choice(Sequence(GroupRef(symbol,1,1),Elt(height,Some(SimpleType(nonNegativeInteger)),0,1),Elt(state,Some(SimpleType(state)),0,unbounded)),Elt(state,Some(SimpleType(state)),1,1))),1,1),Elt(rhs,Some(Sequence(Elt(state,Some(SimpleType(state)),1,1))),1,1))),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(uncurryInformation,Some(Sequence(GroupRef(symbol,1,1),Elt(uncurriedSymbols,Some(Sequence(Elt(uncurriedSymbolEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(symbol,1,unbounded))),1,unbounded))),1,1),Elt(uncurryRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(etaRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(loop,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(context,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(nonLoop,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(orderingConstraints,Some(Sequence(Elt(orderingConstraintElement,Some(Sequence(Elt(strict,Some(SimpleType(boolean)),1,1),Elt(ceCompatible,Some(SimpleType(boolean)),1,1),Elt(monotonePositions,Some(Choice(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(everySymbolAndPosition,None,1,1))),0,1),Elt(ignoredPositions,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1))),0,1),Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(orderingConstraintProof,Some(Choice(Elt(redPair,Some(SimpleType(redPair)),1,1),Elt(satisfiableAssumption,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(url,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(equations,Some(SimpleType(equations)),0,1),Elt(relativeRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),0,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(minimal,Some(SimpleType(boolean)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(strategy,Some(Choice(Elt(innermost,None,1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(outermost,None,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">Elt(conversion,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(equationStep,Some(Sequence(Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1),Elt(rule,Some(SimpleType(rule)),1,1),Choice(Elt(leftRight,None,1,1),Elt(rightLeft,None,1,1)),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(subsumptionProof,Some(Sequence(Elt(ruleSubsumptionProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(innermostLhss,Some(Sequence(GroupRef(term,0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(complexityMeasure,Some(Choice(Elt(derivationalComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1))),1,1),Elt(runtimeComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1),Elt(signature,Some(SimpleType(signature)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(equationalProofTree,Some(Choice(Elt(refl,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(sym,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(trans,Some(Sequence(GroupRef(equationalProofTree,1,1),GroupRef(equationalProofTree,1,1))),1,1),Elt(assm,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(cong,Some(Sequence(GroupRef(symbol,1,1),GroupRef(equationalProofTree,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(completionAndNormalization,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(signature,Some(Sequence(Elt(symbol,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalConstraint,Some(Choice(Elt(implication,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,unbounded))),1,1),Elt(constraint,Some(Sequence(GroupRef(term,1,1),Choice(Elt(rewrite,None,1,1),Elt(strict,None,1,1),Elt(nonStrict,None,1,1)),GroupRef(term,1,1))),1,1),Elt(all,Some(Sequence(Elt(var,Some(SimpleType(string)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalConstraintProof,Some(Choice(Elt(final,None,1,1),Elt(differentConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1),Elt(sameConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(deleteCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(variableEquation,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(funargIntoVar,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(position,Some(SimpleType(position)),1,1),Elt(var,Some(SimpleType(var)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(simplifyCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(induction,Some(Sequence(Elt<text:soft-page-break/>(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conjuncts,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),0,unbounded))),1,1),Elt(ruleConstraintProofs,Some(Sequence(Elt(ruleConstraintProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(subtermVarEntries,Some(Sequence(Elt(subtermVarEntry,Some(Sequence(GroupRef(term,1,1),Elt(var,Some(SimpleType(var)),0,unbounded))),0,unbounded))),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),0,unbounded))),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(complexityClass,Some(Choice(Elt(polynomial,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(complexityProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleShifting,Some(Sequence(Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(completionProof,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(equivalenceProof,Some(Sequence(Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),1,1),Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(crProof,Some(Choice(Elt(wcrAndSN,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(orthogonal,None,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(crDisproof,Some(Choice(Elt(nonWcrAndSN,Some(Sequence(Elt(wcrDisproof,Some(Choice(Elt(nonJoinableCriticalPairsAuto,None,1,1))),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(nonJoinableFork,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Choice(Elt(distinctNormalForms,None,1,1),Elt(capNotUnif,None,1,1)))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpNonterminationProof,Some(Choice<text:span text:style-name="T4">(Elt(loop,Some(SimpleType(loop)),1,1</text:span>),Elt(dpRuleRemoval,Some(Sequence(Elt(dps,Some(SimpleType(dps)),0,1),Elt(trs,Some(SimpleType(trs)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(infinitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(innermostLhssIncreaseProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(switchFullStrategyProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpProof,Some(Choice(Elt(pIsEmpty,None,1,1),Elt(depGraphProc,Some(Sequence(Elt(component,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(realScc,Some(SimpleType(boolean)),1,1),Elt(arcs,Some(Sequence(Elt(forwardArc,Some(SimpleType(positiveInteger)),0,unbounded))),0,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),0,unbounded))),1,1),Elt(redPairProc,Some(Sequence(Elt(order<text:soft-page-break/>ingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(redPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(subtermProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(projectedRewriteSequence,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlabProc,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(unlabProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(sizeChangeProc,Some(Sequence(Choice(Elt(subtermCriterion,None,1,1),Elt(reductionPair,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1))),1,1)),Elt(sizeChangeGraph,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(edge,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(strict,Some(SimpleType(boolean)),1,1),Elt(position,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(flatContextClosureProc,Some(Sequence(Elt(freshSymbol,Some(Sequence(GroupRef(symbol,1,1))),0,1),Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(argumentFilterProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(uncurryProc,Some(Sequence(Elt(applicativeTop,Some(SimpleType(positiveInteger)),0,1),Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(finitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(usableRulesProc,Some(Sequence(Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(switchInnermostProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(rewritingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(forwardInstantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(narrowingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(splitProc,Some(S<text:soft-page-break/>equence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(generalRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(strict,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(bound,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(condRedPairProof,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(SimpleType(nonNegativeInteger)),1,1),Elt(after,Some(SimpleType(nonNegativeInteger)),1,1),Elt(conditions,Some(Sequence(Elt(condition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(dpSequence,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1))),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equationalProof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1),Elt(equationalProofTree,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equationalDisproof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(relativeNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1))),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(relativeTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(sIsEmpty,Some(Sequence(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(relativeTerminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(equalityRemoval,Some(Sequence(Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsNonterminationProof,Some(Choice(Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dp<text:soft-page-break/>NonterminationProof)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(innermostLhssIncrease,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(flatContextClosure,Some(Sequence(Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(terminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(bounds,Some(Sequence(Elt(type,Some(Choice(Elt(roof,None,1,1),Elt(match,None,1,1))),1,1),Elt(bound,Some(SimpleType(nonNegativeInteger)),1,1),Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(treeAutomaton,Some(SimpleType(treeAutomaton)),1,1))),1,1),Elt(switchInnermost,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(split,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(wcrProof,Some(Choice(Elt(joinableCriticalPairs,Some(Sequence(Elt(joinableCriticalPair,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded))),1,1),Elt(joinableCriticalPairsAuto,None,1,1),Elt(joinableCriticalPairsBFS,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(quasiReductiveProof,Some(Choice(Elt(unraveling,Some(Sequence(Elt(unravelingInformation,Some(Sequence(Elt(unravelingEntry,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),1,1),Elt(rule,Some(SimpleType(rule)),1,unbounded))),0,unbounded))),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(proof,Some(Choice(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(crProof,Some(SimpleType(crProof)),1,1),Elt(crDisproof,Some(SimpleType(crDisproof)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1),Elt(equationalProof,Some(SimpleType(equationalProof)),1,1),Elt(equationalDisproof,Some(SimpleType(equationalDisproof)),1,1),Elt(complexityProof,Some(SimpleTy<text:soft-page-break/>pe(complexityProof)),1,1),Elt(quasiReductiveProof,Some(SimpleType(quasiReductiveProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(certificationProblem,Some(Sequence(Elt(input,Some(Choice(Elt(trsInput,Some(SimpleType(trsInput)),1,1),Elt(dpInput,Some(SimpleType(dpInput)),1,1),Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1),Elt(completionInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(trs,Some(SimpleType(trs)),1,1))),1,1),Elt(equationalReasoningInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(equation,Some(Sequence(GroupRef(term,1,1),GroupRef(term,1,1))),1,1))),1,1),Elt(complexityInput,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1),GroupRef(complexityMeasure,1,1),GroupRef(complexityClass,1,1))),1,1),Elt(ctrsInput,Some(Sequence(Elt(conditionalRules,Some(SimpleType(conditionalRules)),1,1))),1,1))),1,1),Elt(cpfVersion,Some(SimpleType(string)),1,1),Elt(proof,Some(SimpleType(proof)),1,1),Elt(origin,Some(Sequence(Elt(proofOrigin,Some(Sequence(Elt(tool,Some(Sequence(Elt(name,Some(SimpleType(string)),1,1),Elt(version,Some(SimpleType(string)),1,1),Elt(strategy,Some(SimpleType(string)),0,1),Elt(url,Some(SimpleType(url)),0,1))),1,unbounded),Elt(toolUser,Some(Sequence(Elt(firstName,Some(SimpleType(string)),1,1),Elt(lastName,Some(SimpleType(string)),1,1),Elt(url,Some(SimpleType(url)),0,1))),0,unbounded))),1,1),Elt(inputOrigin,Some(Sequence(Elt(tpdbReference,Some(Sequence(Elt(fileName,Some(SimpleType(string)),1,1),Elt(tpdbId,Some(SimpleType(long)),0,1))),0,1),Elt(source,Some(SimpleType(string)),0,1))),0,1))),1,1))),1,1)*)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P13"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">(**********************************************************************************)</text:p>
   <text:p text:style-name="Standard">The detail of xsds list: after flatening</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">(*Elt(name,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(label,Some(Choice(Elt(numberLabel,Some(Sequence(Elt(number,Some(SimpleType(nonNegativeInteger)),0,unbounded))),1,1),Elt(symbolLabel,Some(Sequence(GroupRef(symbol,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(symbol,Some(Choice(Elt(name,Some(SimpleType(name)),1,1),Elt(sharp,Some(Sequence(GroupRef(symbol,1,1))),1,1),Elt(labeledSymbol,Some(Sequence(GroupRef(symbol,1,1),GroupRef(label,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(var,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(term,Some(Choice(Elt(var,Some(SimpleType(var)),1,1),Elt(funapp,Some(Sequence(GroupRef(symbol,1,1),Elt(arg,Some(GroupRef(term,1,1)),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rule,Some(Sequence(Elt(lhs,Some(GroupRef(term,1,1)),1,1),Elt(rhs,Some(GroupRef(term,1,1)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rules,Some(Sequence(Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalRules,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dps,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trs,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(usableRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(number,Some(Choice(Elt(integer,Some(SimpleType(integer)),1,1),Elt(rational,Some(Sequence(Elt(numerator,Some(SimpleType(integer)),1,1),Elt(denominator,Some(SimpleType(positiveInteger)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(coefficient,Some(Choice(GroupRef(number,1,1),Elt(minusInfinity,None,1,1),Elt(plusInfinity,None,1,1),Elt(vector,Some(SimpleType(vector)),1,1),Elt(matrix,Some(SimpleType(matrix)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(vector,Some(Sequence(Elt(coefficient,Some(SimpleType(coefficient)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(matrix,Some(Sequence(Elt(vector,Some(SimpleType(vector)),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(polynomial,Some(Choice(Elt(coefficient,Some(SimpleType(coefficient)),1,1),Elt(variable,Some(Si<text:soft-page-break/>mpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(polynomial,Some(SimpleType(polynomial)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(function,Some(Choice(Elt(polynomial,Some(SimpleType(polynomial)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(arity,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(strictDimension,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(degree,Some(SimpleType(nonNegativeInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(position,Some(SimpleType(positiveInteger)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(argumentFilter,Some(Sequence(Elt(argumentFilterEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(t11,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t11,Some(Choice(Elt(collapsing,Some(SimpleType(positiveInteger)),1,1),Elt(nonCollapsing,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(domain,Some(Choice(Elt(naturals,None,1,1),Elt(integers,None,1,1),Elt(rationals,Some(Sequence(Elt(delta,Some(Sequence(GroupRef(number,1,1))),1,1))),1,1),Elt(arctic,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(tropical,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1))),1,1),Elt(matrices,Some(Sequence(Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1),Elt(domain,Some(SimpleType(domain)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(redPair,Some(Choice(Elt(interpretation,Some(Sequence(Elt(type,Some(GroupRef(type_t9,1,1)),1,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(function,1,1))),0,unbounded))),1,1),Elt(pathOrder,Some(Sequence(Elt(statusPrecedence,Some(Sequence(Elt(statusPrecedenceEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),GroupRef(t10,1,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(knuthBendixOrder,Some(Sequence(Elt(w0,Some(SimpleType(positiveInteger)),1,1),Elt(precedenceWeight,Some(Sequence(Elt(precedenceWeightEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(precedence,Some(SimpleType(nonNegativeInteger)),1,1),Elt(weight,Some(SimpleType(nonNegativeInteger)),1,1),Elt(subtermCoefficientEntries,Some(Sequence(Elt(entry,Some(SimpleType(positiveInteger)),0,unbounded))),0,1))),0,unbounded))),1,1),Elt(argumentFilter,Some(SimpleType(argumentFilter)),0,1))),1,1),Elt(scnp,Some(Sequence(Elt(status,Some(GroupRef(status,1,1)),1,1),Elt(levelMapping,Some(Sequence(Elt(levelMappingEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(positionLevelEntry,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(level,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(redPair,Some(SimpleType(redPair)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">Group(type_t9,Some(Choice(Elt(polynomial,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(degree,Some(SimpleType(degree)),1,1))),1,1),Elt(matrixInterpretation,Some(Sequence(Elt(domain,Some(SimpleType(domain)),1,1),Elt(dimension,Some(SimpleType(dimension)),1,1),Elt(strictDimension,Some(SimpleType(strictDimension)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t10,Some(Choice(Elt(lex,Some(Choice()),1,1),Elt(mul,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(status,Some(Choice(Elt(ms,None,1,1),Elt(min,None,1,1),Elt(max,None,1,1),Elt(dms,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(arithFunction,Some(Choice(Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(variable,Some(SimpleType(positiveInteger)),1,1),Elt(sum,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(product,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(min,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1),Elt(max,Some(Sequence(Elt(arithFunction,Some(SimpleType(arithFunction)),1,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(model,Some(Choice(Elt(finiteModel,Some(Sequence(Elt(carrierSize,Some(SimpleType(positiveInteger)),1,1),Elt(tupleOrder,Some(GroupRef(tupleOrder,1,1)),0,1),Elt(interpret,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),Elt(arithFunction,Some(SimpleType(arithFunction)),1,1))),0,unbounded),Elt(labeling,None,0,1))),1,1),Elt(rootLabeling,Some(Sequence(GroupRef(symbol,0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(tupleOrder,Some(Choice(Elt(pointWise,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(patternTerm,Some(Sequence(GroupRef(term,1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(patternRule,Some(Sequence(Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),Elt(patternTerm,Some(SimpleType(patternTerm)),1,1),GroupRef(t5,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t5,Some(Choice(Elt(originalRule,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(isPair,Some(SimpleType(boolean)),1,1))),1,1),Elt(initialPumping,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(initialPumpingContext,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(equivalence,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),GroupRef(t6,1,1),Elt(patternEquivalence,Some(GroupRef(patternEquivalence,1,1)),1,1))),1,1),Elt(narrowing,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1),Elt(instantiation,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(t7,1,1))),1,1),Elt(rewriting,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t8,1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t6,Some(Choice(Elt(left,None,1,1),Elt(right,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>Group(patternEquivalence,Some(Choice(Elt(domainRenaming,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(irrelevant,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(simplification,Some(Sequence(Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t7,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Choice()),1,1),Elt(closing,Some(Choice()),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t8,Some(Choice(Elt(base,None,1,1),Elt(pumping,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1),Elt(closing,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(substitution,Some(Sequence(Elt(substEntry,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(context,Some(Choice(Elt(box,None,1,1),</text:p>
   <text:p text:style-name="Standard">Elt(funContext,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(GroupRef(term,0,unbounded)),1,1),GroupRef(context,1,1),Elt(after,Some(GroupRef(term,0,unbounded)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rewriteSequence,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(rewriteStep,Some(Sequence(Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(rule,Some(SimpleType(rule)),1,1),Elt(relative,None,0,1),GroupRef(term,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(state,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(treeAutomaton,Some(Sequence(Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(transitions,Some(Sequence(Elt(transition,Some(Sequence(Elt(lhs,Some(GroupRef(lhs,1,1)),1,1),Elt(rhs,Some(Sequence(Elt(state,Some(SimpleType(state)),1,1))),1,1))),0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(lhs,Some(Choice(Sequence(GroupRef(symbol,1,1),Elt(height,Some(SimpleType(nonNegativeInteger)),0,1),Elt(state,Some(SimpleType(state)),0,unbounded)),Elt(state,Some(SimpleType(state)),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(uncurryInformation,Some(Sequence(GroupRef(symbol,1,1),Elt(uncurriedSymbols,Some(Sequence(Elt(uncurriedSymbolEntry,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1),GroupRef(symbol,1,unbounded))),1,unbounded))),1,1),Elt(uncurryRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(etaRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(loop,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),GroupRef(context,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(nonLoop,Some(Sequence(Elt(patternRule,Some(SimpleType(patternRule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(natural,Some(SimpleType(nonNegativeInteger)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">Elt(orderingConstraints,Some(Sequence(Elt(orderingConstraintElement,Some(Sequence(Elt(strict,Some(SimpleType(boolean)),1,1),Elt(ceCompatible,Some(SimpleType(boolean)),1,1),Elt(monotonePositions,Some(GroupRef(monotonePositions,1,1)),0,1),Elt(ignoredPositions,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1))),0,1),Elt(rule,Some(SimpleType(rule)),0,unbounded))),1,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(monotonePositions,Some(Choice(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(everySymbolAndPosition,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(orderingConstraintProof,Some(Choice(Elt(redPair,Some(SimpleType(redPair)),1,1),Elt(satisfiableAssumption,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(url,Some(SimpleType(string)),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(equations,Some(SimpleType(equations)),0,1),Elt(relativeRules,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),0,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpInput,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(strategy,Some(SimpleType(strategy)),0,1),Elt(minimal,Some(SimpleType(boolean)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(strategy,Some(Choice(Elt(innermost,None,1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(outermost,None,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conversion,Some(Sequence(Elt(startTerm,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(equationStep,Some(Sequence(Elt(positionInTerm,Some(Sequence(Elt(position,Some(SimpleType(position)),0,unbounded))),1,1),Elt(rule,Some(SimpleType(rule)),1,1),GroupRef(t4,1,1),GroupRef(term,1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t4,Some(Choice(Elt(leftRight,None,1,1),Elt(rightLeft,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(subsumptionProof,Some(Sequence(Elt(ruleSubsumptionProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(innermostLhss,Some(Sequence(GroupRef(term,0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(complexityMeasure,Some(Choice(Elt(derivationalComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1))),1,1),Elt(runtimeComplexity,Some(Sequence(Elt(signature,Some(SimpleType(signature)),1,1),Elt(signature,Some(SimpleType(signature)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(equationalProofTree,Some(Choice(Elt(refl,Some(Sequence(GroupRef(term,1,1))),1,1),Elt(sym,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(trans,Some(Sequence(GroupRef(equationalProofTree,1,1),GroupRef(equationalProofTree,1,1))),1,1),Elt(assm,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1))),1,1),Elt(cong,Some(Sequence(GroupRef(symbol,1,1),GroupRef(equationalProofTree,0,unbounded))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/></text:p>
   <text:p text:style-name="Standard">Elt(completionAndNormalization,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(signature,Some(Sequence(Elt(symbol,Some(Sequence(GroupRef(symbol,1,1),Elt(arity,Some(SimpleType(arity)),1,1))),0,unbounded))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalConstraint,Some(Choice(Elt(implication,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,unbounded))),1,1),Elt(constraint,Some(Sequence(GroupRef(term,1,1),GroupRef(t3,1,1),GroupRef(term,1,1))),1,1),Elt(all,Some(Sequence(Elt(var,Some(SimpleType(string)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t3,Some(Choice(Elt(rewrite,None,1,1),Elt(strict,None,1,1),Elt(nonStrict,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(conditionalConstraintProof,Some(Choice(Elt(final,None,1,1),Elt(differentConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1))),1,1),Elt(sameConstructor,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(deleteCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(variableEquation,Some(Sequence(Elt(var,Some(SimpleType(var)),1,1),GroupRef(term,1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(funargIntoVar,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(position,Some(SimpleType(position)),1,1),Elt(var,Some(SimpleType(var)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(simplifyCondition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(substitution,Some(SimpleType(substitution)),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1),Elt(induction,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conjuncts,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),0,unbounded))),1,1),Elt(ruleConstraintProofs,Some(Sequence(Elt(ruleConstraintProof,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(subtermVarEntries,Some(Sequence(Elt(subtermVarEntry,Some(Sequence(GroupRef(term,1,1),Elt(var,Some(SimpleType(var)),0,unbounded))),0,unbounded))),1,1),Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),0,unbounded))),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(complexityClass,Some(Choice(Elt(polynomial,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(complexityProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleShifting,Some(Sequence(Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(completionProof,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminati<text:soft-page-break/>onProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(equivalenceProof,Some(Sequence(Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),1,1),Elt(subsumptionProof,Some(SimpleType(subsumptionProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(crProof,Some(Choice(Elt(wcrAndSN,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(orthogonal,None,1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(crDisproof,Some(Choice(Elt(nonWcrAndSN,Some(Sequence(Elt(wcrDisproof,Some(GroupRef(wcrDisproof,1,1)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(nonJoinableFork,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),GroupRef(t2,1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(wcrDisproof,Some(Choice(Elt(nonJoinableCriticalPairsAuto,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t2,Some(Choice(Elt(distinctNormalForms,None,1,1),Elt(capNotUnif,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpRuleRemoval,Some(Sequence(Elt(dps,Some(SimpleType(dps)),0,1),Elt(trs,Some(SimpleType(trs)),0,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(infinitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(innermostLhssIncreaseProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(switchFullStrategyProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(dpProof,Some(Choice(Elt(pIsEmpty,None,1,1),Elt(depGraphProc,Some(Sequence(Elt(component,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(realScc,Some(SimpleType(boolean)),1,1),Elt(arcs,Some(Sequence(Elt(forwardArc,Some(SimpleType(positiveInteger)),0,unbounded))),0,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),0,unbounded))),1,1),Elt(redPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(redPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(monoRedPairUrProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(subtermProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(projectedRewriteSequence,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded),Elt(dps,Some(SimpleType(dps)),1,1),<text:soft-page-break/>Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlabProc,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(unlabProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(sizeChangeProc,Some(Sequence(GroupRef(t1,1,1),Elt(sizeChangeGraph,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(edge,Some(Sequence(Elt(position,Some(SimpleType(nonNegativeInteger)),1,1),Elt(strict,Some(SimpleType(boolean)),1,1),Elt(position,Some(SimpleType(nonNegativeInteger)),1,1))),0,unbounded))),0,unbounded))),1,1),Elt(flatContextClosureProc,Some(Sequence(Elt(freshSymbol,Some(Sequence(GroupRef(symbol,1,1))),0,1),Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(argumentFilterProc,Some(Sequence(Elt(argumentFilter,Some(SimpleType(argumentFilter)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(uncurryProc,Some(Sequence(Elt(applicativeTop,Some(SimpleType(positiveInteger)),0,1),Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(finitenessAssumption,Some(Sequence(Elt(dpInput,Some(SimpleType(dpInput)),1,1))),1,1),Elt(usableRulesProc,Some(Sequence(Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(innermostLhssRemovalProc,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(switchInnermostProc,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(rewritingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(rewriteStep,Some(SimpleType(rewriteStep)),1,1),Elt(rule,Some(SimpleType(rule)),0,1),Elt(usableRules,Some(SimpleType(usableRules)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(instantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(forwardInstantiationProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(instantiations,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(narrowingProc,Some(Sequence(Elt(rule,Some(SimpleType(rule)),1,1),Elt(positionInTerm,Some(SimpleType(positionInTerm)),1,1),Elt(narrowings,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(splitProc,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(generalRedPairProc,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(strict,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(bound,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(condRedPairProof,Some(Sequence(GroupRef(symbol,1,1),Elt(before,Some(SimpleType(nonNegativeInteger)),1,1),Elt(after,Some(SimpleType(nonNegativeInteger)),1,1),Elt(conditions,Some(Sequence(Elt(condition,Some(Sequence(Elt(conditionalConstraint,Some(SimpleType(conditionalConstraint)),1,1),Elt(dpSequence,Some(Sequence(Elt(rules,Some(SimpleType(rules)),1,1))),1,1),Elt(conditionalConstraintProof,Some(SimpleType(conditionalConstraintProof)),1,1))),1,1))),1,1))),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(t1,Some(Choice(Elt(subtermCriterion,None,1,1),Elt(reductionPair,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(usableRules,Some(SimpleType(usableRules)),0,1))),1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:soft-page-break/>Elt(equationalProof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1),Elt(equationalProofTree,Some(Sequence(GroupRef(equationalProofTree,1,1))),1,1),Elt(conversion,Some(SimpleType(conversion)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(equationalDisproof,Some(Choice(Elt(completionAndNormalization,Some(SimpleType(completionAndNormalization)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(relativeNonterminationProof,Some(Choice(Elt(loop,Some(SimpleType(loop)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1))),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(relativeTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(sIsEmpty,Some(Sequence(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(relativeTerminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1),Elt(equalityRemoval,Some(Sequence(Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsNonterminationProof,Some(Choice(Elt(variableConditionViolated,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1),Elt(loop,Some(SimpleType(loop)),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1))),1,1),Elt(nonLoop,Some(SimpleType(nonLoop)),1,1),Elt(nonterminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(innermostLhssIncrease,Some(Sequence(Elt(innermostLhss,Some(SimpleType(innermostLhss)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(trsTerminationProof,Some(Choice(Elt(rIsEmpty,Some(Choice()),1,1),Elt(ruleRemoval,Some(Sequence(Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),0,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(dpTrans,Some(Sequence(Elt(dps,Some(SimpleType(dps)),1,1),Elt(markedSymbols,Some(SimpleType(boolean)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1))),1,1),Elt(semlab,Some(Sequence(Elt(model,Some(SimpleType(model)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(innermostLhss,Some(SimpleType(innermostLhss)),0,1),Elt(trsTerm<text:soft-page-break/>inationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(unlab,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(stringReversal,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(flatContextClosure,Some(Sequence(Elt(flatContexts,Some(GroupRef(context,1,unbounded)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(terminationAssumption,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1))),1,1),Elt(uncurry,Some(Sequence(Elt(uncurryInformation,Some(SimpleType(uncurryInformation)),1,1),Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(bounds,Some(Sequence(Elt(type,Some(GroupRef(type,1,1)),1,1),Elt(bound,Some(SimpleType(nonNegativeInteger)),1,1),Elt(finalStates,Some(Sequence(Elt(state,Some(SimpleType(state)),0,unbounded))),1,1),Elt(treeAutomaton,Some(SimpleType(treeAutomaton)),1,1))),1,1),Elt(switchInnermost,Some(Sequence(Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(split,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1),Elt(removeNonApplicableRules,Some(Sequence(Elt(trs,Some(SimpleType(trs)),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(type,Some(Choice(Elt(roof,None,1,1),Elt(match,None,1,1))),0,unbounded)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(wcrProof,Some(Choice(Elt(joinableCriticalPairs,Some(Sequence(Elt(joinableCriticalPair,Some(Sequence(Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1),Elt(rewriteSequence,Some(SimpleType(rewriteSequence)),1,1))),0,unbounded))),1,1),Elt(joinableCriticalPairsAuto,None,1,1),Elt(joinableCriticalPairsBFS,Some(SimpleType(nonNegativeInteger)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(quasiReductiveProof,Some(Choice(Elt(unraveling,Some(Sequence(Elt(unravelingInformation,Some(Sequence(Elt(unravelingEntry,Some(Sequence(Elt(conditionalRule,Some(SimpleType(conditionalRule)),1,1),Elt(rule,Some(SimpleType(rule)),1,unbounded))),0,unbounded))),1,1),Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(proof,Some(Choice(Elt(trsTerminationProof,Some(SimpleType(trsTerminationProof)),1,1),Elt(trsNonterminationProof,Some(SimpleType(trsNonterminationProof)),1,1),Elt(relativeTerminationProof,Some(SimpleType(relativeTerminationProof)),1,1),Elt(relativeNonterminationProof,Some(SimpleType(relativeNonterminationProof)),1,1),Elt(dpProof,Some(SimpleType(dpProof)),1,1),Elt(dpNonterminationProof,Some(SimpleType(dpNonterminationProof)),1,1),Elt(orderingConstraintProof,Some(SimpleType(orderingConstraintProof)),1,1),Elt(wcrProof,Some(SimpleType(wcrProof)),1,1),Elt(crProof,Some(SimpleType(crProof)),1,1),Elt(crDisproof,Some(SimpleType(crDisproof)),1,1),Elt(completionProof,Some(SimpleType(completionProof)),1,1),Elt(equationalProof,Some(SimpleType(equationalProof)),1,1),Elt(equationalDisproof,Some(SimpleType(equationalDisproof)),1,1),Elt(complexityProof,Some(SimpleType(complexityProof)),1,1),Elt(quasiReductiveProof,Some(SimpleType(quasiReductiveProof)),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Elt(certificationProblem,Some(Sequence(Elt(input,Some(GroupRef(input,1,1)),1,1),Elt(cpfVersion,Some(SimpleType(string)),1,1),Elt(proof,Some(SimpleType(proof)),1,1),Elt(origin,Some(Sequence(Elt(proofOrigin,Some(Sequence(Elt(tool,Some(Sequence(Elt(name,Some(SimpleType(string)),1,1),Elt(version,Some(SimpleType(string)),1,1),Elt(strategy,Some(SimpleType(string)),0,1),Elt(url,Some(SimpleType(url)),0,1))),1,unbounded),Elt(toolUser,Some(Sequence(Elt(firstName,Some(SimpleType(string)),1,1),Elt(lastName,Some(SimpleType(string)),1,1),Elt(url,Some(SimpleType(url)),0,1))),0,unbounded))),1,1),Elt(inputOrigin,Some(Sequence(Elt(tpdbReference,Some(Sequence(Elt(fileName,Some(SimpleType(<text:soft-page-break/>string)),1,1),Elt(tpdbId,Some(SimpleType(long)),0,1))),0,1),Elt(source,Some(SimpleType(string)),0,1))),0,1))),1,1))),1,1)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Group(input,Some(Choice(Elt(trsInput,Some(SimpleType(trsInput)),1,1),Elt(dpInput,Some(SimpleType(dpInput)),1,1),Elt(orderingConstraints,Some(SimpleType(orderingConstraints)),1,1),Elt(completionInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(trs,Some(SimpleType(trs)),1,1))),1,1),Elt(equationalReasoningInput,Some(Sequence(Elt(equations,Some(SimpleType(equations)),1,1),Elt(equation,Some(Sequence(GroupRef(term,1,1),GroupRef(term,1,1))),1,1))),1,1),Elt(complexityInput,Some(Sequence(Elt(trsInput,Some(SimpleType(trsInput)),1,1),GroupRef(complexityMeasure,1,1),GroupRef(complexityClass,1,1))),1,1),Elt(ctrsInput,Some(Sequence(Elt(conditionalRules,Some(SimpleType(conditionalRules)),1,1))),1,1))),0,unbounded)*)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">(* output in debug mode *)</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s/>[Xsd.Elt (&quot;name&quot;, Some (Xsd.SimpleType &quot;string&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Group (&quot;label&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some <text:tab/></text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;numberLabel&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;number&quot;, Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;symbolLabel&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.Sequence [Xsd.GroupRef (&quot;symbol&quot;, 0, Xsd.Unbounded)]), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Group (&quot;symbol&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;name&quot;, Some (Xsd.SimpleType &quot;name&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;sharp&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.Sequence [Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1)]), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;labeledSymbol&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.GroupRef (&quot;label&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;var&quot;, Some (Xsd.SimpleType &quot;string&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Group (&quot;term&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="7"/>[Xsd.Elt (&quot;var&quot;, Some (Xsd.SimpleType &quot;var&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;funapp&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;arg&quot;, Some (Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;rule&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;lhs&quot;, Some (Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;rhs&quot;, Some (Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;conditionalRule&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;rules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;conditionalRules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;conditionalRule&quot;, Some (Xsd.SimpleType &quot;conditionalRule&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;dps&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;trs&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;usableRules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Group (&quot;number&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;integer&quot;, Some (Xsd.SimpleType &quot;integer&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;rational&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;numerator&quot;, Some (Xsd.SimpleType &quot;integer&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;denominator&quot;, Some (Xsd.SimpleType &quot;positiveInteger&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;coefficient&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.GroupRef (&quot;number&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;minusInfinity&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;plusInfinity&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;vector&quot;, Some (Xsd.SimpleType &quot;vector&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;matrix&quot;, Some (Xsd.SimpleType &quot;matrix&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;vector&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;coefficient&quot;, Some (Xsd.SimpleType &quot;coefficient&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;matrix&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;vector&quot;, Some (Xsd.SimpleType &quot;vector&quot;), 1, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;polynomial&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;coefficient&quot;, Some (Xsd.SimpleType &quot;coefficient&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;variable&quot;, Some (Xsd.SimpleType &quot;positiveInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;sum&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;polynomial&quot;, Some (Xsd.SimpleType &quot;polynomial&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;product&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;polynomial&quot;, Some (Xsd.SimpleType &quot;polynomial&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="14"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;max&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;polynomial&quot;, Some (Xsd.SimpleType &quot;polynomial&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;min&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;polynomial&quot;, Some (Xsd.SimpleType &quot;polynomial&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Group (&quot;function&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;polynomial&quot;, Some (Xsd.SimpleType &quot;polynomial&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;arity&quot;, Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;dimension&quot;, Some (Xsd.SimpleType &quot;positiveInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;strictDimension&quot;, Some (Xsd.SimpleType &quot;positiveInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;degree&quot;, Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;position&quot;, Some (Xsd.SimpleType &quot;positiveInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;positionInTerm&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;position&quot;, Some (Xsd.SimpleType &quot;position&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;argumentFilter&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;argumentFilterEntry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;arity&quot;, Some (Xsd.SimpleType &quot;arity&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;collapsing&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>Some (Xsd.SimpleType &quot;positiveInteger&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;nonCollapsing&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="16"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>[Xsd.Elt (&quot;position&quot;, Some (Xsd.SimpleType &quot;position&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1)]]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;domain&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;naturals&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;integers&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;rationals&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;delta&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.Sequence [Xsd.GroupRef (&quot;number&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;arctic&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;domain&quot;, Some (Xsd.SimpleType &quot;domain&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;tropical&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;domain&quot;, Some (Xsd.SimpleType &quot;domain&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;matrices&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;dimension&quot;, Some (Xsd.SimpleType &quot;dimension&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;strictDimension&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;strictDimension&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;domain&quot;, Some (Xsd.SimpleType &quot;domain&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;redPair&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;interpretation&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;type&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;polynomial&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;domain&quot;, Some (Xsd.SimpleType &quot;domain&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;degree&quot;, Some (Xsd.SimpleType &quot;degree&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;matrixInterpretation&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;domain&quot;, Some (Xsd.SimpleType &quot;domain&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;dimension&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;dimension&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;strictDimension&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;strictDimension&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;interpret&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;arity&quot;, Some (Xsd.SimpleType &quot;arity&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.GroupRef (&quot;function&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;pathOrder&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;statusPrecedence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;statusPrecedenceEntry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;arity&quot;, Some (Xsd.SimpleType &quot;arity&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;precedence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>[Xsd.Elt (&quot;lex&quot;, Some (Xsd.Choice []), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="25"/>Xsd.Elt (&quot;mul&quot;, None, 1, Xsd.Bound 1)]]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;argumentFilter&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;argumentFilter&quot;), 0, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;knuthBendixOrder&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;w0&quot;, Some (Xsd.SimpleType &quot;positiveInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;precedenceWeight&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;precedenceWeightEntry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;arity&quot;, Some (Xsd.SimpleType &quot;arity&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;precedence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;weight&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;subtermCoefficientEntries&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="25"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="27"/>[Xsd.Elt (&quot;entry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>Some (Xsd.SimpleType &quot;positiveInteger&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>0, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;argumentFilter&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;argumentFilter&quot;), 0, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s/>Xsd.Elt (&quot;scnp&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;status&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;ms&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;min&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;max&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;dms&quot;, None, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="13"/>Xsd.Elt (&quot;levelMapping&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;levelMappingEntry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;arity&quot;, Some (Xsd.SimpleType &quot;arity&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;positionLevelEntry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="25"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="27"/>[Xsd.Elt (&quot;position&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="28"/>Xsd.Elt (&quot;level&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;redPair&quot;, Some (Xsd.SimpleType &quot;redPair&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;arithFunction&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;natural&quot;, Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;variable&quot;, Some (Xsd.SimpleType &quot;positiveInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;sum&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;arithFunction&quot;, Some (Xsd.SimpleType &quot;arithFunction&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;product&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;arithFunction&quot;, Some (Xsd.SimpleType &quot;arithFunction&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;min&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;arithFunction&quot;, Some (Xsd.SimpleType &quot;arithFunction&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;max&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;arithFunction&quot;, Some (Xsd.SimpleType &quot;arithFunction&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;model&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;finiteModel&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;carrierSize&quot;, Some (Xsd.SimpleType &quot;positiveInteger&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;tupleOrder&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.Choice [Xsd.Elt (&quot;pointWise&quot;, None, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;interpret&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;arity&quot;, Some (Xsd.SimpleType &quot;arity&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;arithFunction&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some (Xsd.SimpleType &quot;arithFunction&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Unbounded); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;labeling&quot;, None, 0, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;rootLabeling&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.Sequence [Xsd.GroupRef (&quot;symbol&quot;, 0, Xsd.Bound 1)]), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;patternTerm&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;patternRule&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;patternTerm&quot;, Some (Xsd.SimpleType &quot;patternTerm&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;patternTerm&quot;, Some (Xsd.SimpleType &quot;patternTerm&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>[Xsd.Elt (&quot;originalRule&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;isPair&quot;, Some (Xsd.SimpleType &quot;boolean&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Xsd.Elt (&quot;initialPumping&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;patternRule&quot;, Some (Xsd.SimpleType &quot;patternRule&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Xsd.Elt (&quot;initialPumpingContext&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;patternRule&quot;, Some (Xsd.SimpleType &quot;patternRule&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;positionInTerm&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>Some (Xsd.SimpleType &quot;positionInTerm&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;var&quot;, Some (Xsd.SimpleType &quot;var&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Xsd.Elt (&quot;equivalence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;patternRule&quot;, Some (Xsd.SimpleType &quot;patternRule&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>[Xsd.Elt (&quot;left&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>Xsd.Elt (&quot;right&quot;, None, 1, Xsd.Bound 1)]; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;patternEquivalence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>[Xsd.Elt (&quot;domainRenaming&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>[Xsd.Elt (&quot;substitution&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Some (Xsd.SimpleType &quot;substitution&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>Xsd.Elt (&quot;irrelevant&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="21"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>[Xsd.Elt (&quot;substitution&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Some (Xsd.SimpleType &quot;substitution&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="25"/>Xsd.Elt (&quot;substitution&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Some (Xsd.SimpleType &quot;substitution&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>Xsd.Elt (&quot;simplification&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>[Xsd.Elt (&quot;substitution&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Some (Xsd.SimpleType &quot;substitution&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="25"/>Xsd.Elt (&quot;substitution&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Some (Xsd.SimpleType &quot;substitution&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Xsd.Elt (&quot;narrowing&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;patternRule&quot;, Some (Xsd.SimpleType &quot;patternRule&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;patternRule&quot;, Some (Xsd.SimpleType &quot;patternRule&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;positionInTerm&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>Some (Xsd.SimpleType &quot;positionInTerm&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Xsd.Elt (&quot;instantiation&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;patternRule&quot;, Some (Xsd.SimpleType &quot;patternRule&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>[Xsd.Elt (&quot;base&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>Xsd.Elt (&quot;pumping&quot;, Some (Xsd.Choice []), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>Xsd.Elt (&quot;closing&quot;, Some (Xsd.Choice []), 1, Xsd.Bound 1)]]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>Xsd.Elt (&quot;rewriting&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;patternRule&quot;, Some (Xsd.SimpleType &quot;patternRule&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;rewriteSequence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="16"/>Some (Xsd.SimpleType &quot;rewriteSequence&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>[Xsd.Elt (&quot;base&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>Xsd.Elt (&quot;pumping&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>[Xsd.Elt (&quot;var&quot;, Some (Xsd.SimpleType &quot;var&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>Xsd.Elt (&quot;closing&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>[Xsd.Elt (&quot;var&quot;, Some (Xsd.SimpleType &quot;var&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>1, Xsd.Bound 1)]]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="11"/>1, Xsd.Bound 1)]]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;substitution&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;substEntry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;var&quot;, Some (Xsd.SimpleType &quot;var&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Group (&quot;context&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;box&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;funContext&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;before&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.GroupRef (&quot;term&quot;, 0, Xsd.Unbounded)), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.GroupRef (&quot;context&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;after&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.GroupRef (&quot;term&quot;, 0, Xsd.Unbounded)), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;rewriteSequence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;startTerm&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.Sequence [Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)]), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;rewriteStep&quot;, Some (Xsd.SimpleType &quot;rewriteStep&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="9"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;rewriteStep&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;positionInTerm&quot;, Some (Xsd.SimpleType &quot;positionInTerm&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;relative&quot;, None, 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;state&quot;, Some (Xsd.SimpleType &quot;string&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;treeAutomaton&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;finalStates&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;state&quot;, Some (Xsd.SimpleType &quot;state&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;transitions&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;transition&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;lhs&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="25"/>Xsd.Elt (&quot;height&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="25"/>Xsd.Elt (&quot;state&quot;, Some (Xsd.SimpleType &quot;state&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="26"/>Xsd.Unbounded)]; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;state&quot;, Some (Xsd.SimpleType &quot;state&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;rhs&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;state&quot;, Some (Xsd.SimpleType &quot;state&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="3"/>Xsd.Elt (&quot;uncurryInformation&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;uncurriedSymbols&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;uncurriedSymbolEntry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;arity&quot;, Some (Xsd.SimpleType &quot;arity&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;uncurryRules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;etaRules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;loop&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;rewriteSequence&quot;, Some (Xsd.SimpleType &quot;rewriteSequence&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.GroupRef (&quot;context&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard">Xsd.Elt (&quot;nonLoop&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;patternRule&quot;, Some (Xsd.SimpleType &quot;patternRule&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;natural&quot;, Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;natural&quot;, Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="8"/>Xsd.Elt (&quot;positionInTerm&quot;, Some (Xsd.SimpleType &quot;positionInTerm&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;orderingConstraintElement&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;strict&quot;, Some (Xsd.SimpleType &quot;boolean&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;ceCompatible&quot;, Some (Xsd.SimpleType &quot;boolean&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;monotonePositions&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;argumentFilter&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some (Xsd.SimpleType &quot;argumentFilter&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;everySymbolAndPosition&quot;, None, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;ignoredPositions&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;argumentFilter&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some (Xsd.SimpleType &quot;argumentFilter&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;redPair&quot;, Some (Xsd.SimpleType &quot;redPair&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;satisfiableAssumption&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraints&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;url&quot;, Some (Xsd.SimpleType &quot;string&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;trsInput&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;strategy&quot;, Some (Xsd.SimpleType &quot;strategy&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;equations&quot;, Some (Xsd.SimpleType &quot;equations&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="8"/>Xsd.Elt (&quot;relativeRules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>0, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;dpInput&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;strategy&quot;, Some (Xsd.SimpleType &quot;strategy&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;minimal&quot;, Some (Xsd.SimpleType &quot;boolean&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;strategy&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;innermost&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;innermostLhss&quot;, Some (Xsd.SimpleType &quot;innermostLhss&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;outermost&quot;, None, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;equations&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;conversion&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;startTerm&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.Sequence [Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)]), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;equationStep&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;positionInTerm&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;position&quot;, Some (Xsd.SimpleType &quot;position&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;leftRight&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;rightLeft&quot;, None, 1, Xsd.Bound 1)]; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;subsumptionProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;ruleSubsumptionProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conversion&quot;, Some (Xsd.SimpleType &quot;conversion&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;innermostLhss&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some (Xsd.Sequence [Xsd.GroupRef (&quot;term&quot;, 0, Xsd.Unbounded)]), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Group (&quot;complexityMeasure&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;derivationalComplexity&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;signature&quot;, Some (Xsd.SimpleType &quot;signature&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;runtimeComplexity&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;signature&quot;, Some (Xsd.SimpleType &quot;signature&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;signature&quot;, Some (Xsd.SimpleType &quot;signature&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Group (&quot;equationalProofTree&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;refl&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.Sequence [Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)]), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;sym&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.GroupRef (&quot;equationalProofTree&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;trans&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.GroupRef (&quot;equationalProofTree&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.GroupRef (&quot;equationalProofTree&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;assm&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;cong&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.GroupRef (&quot;equationalProofTree&quot;, 0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;completionAndNormalization&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;completionProof&quot;, Some (Xsd.SimpleType &quot;completionProof&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;signature&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;symbol&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;arity&quot;, Some (Xsd.SimpleType &quot;arity&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;implication&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;constraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;rewrite&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;strict&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="15"/>Xsd.Elt (&quot;nonStrict&quot;, None, 1, Xsd.Bound 1)]; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;all&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;var&quot;, Some (Xsd.SimpleType &quot;string&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;conditionalConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;final&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;differentConstructor&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;sameConstructor&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conditionalConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;deleteCondition&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conditionalConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;variableEquation&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;var&quot;, Some (Xsd.SimpleType &quot;var&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conditionalConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;funargIntoVar&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;position&quot;, Some (Xsd.SimpleType &quot;position&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;var&quot;, Some (Xsd.SimpleType &quot;var&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conditionalConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;simplifyCondition&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;substitution&quot;, Some (Xsd.SimpleType &quot;substitution&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conditionalConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;induction&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;conjuncts&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;ruleConstraintProofs&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;ruleConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;subtermVarEntries&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="25"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="27"/>[Xsd.Elt (&quot;subtermVarEntry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="30"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="32"/>[Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="33"/>Xsd.Elt (&quot;var&quot;, Some (Xsd.SimpleType &quot;var&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="34"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;conditionalConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;conditionalConstraintProof&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Group (&quot;complexityClass&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;polynomial&quot;, Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s/>Xsd.Elt (&quot;complexityProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;rIsEmpty&quot;, Some (Xsd.Choice []), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;ruleShifting&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;complexityProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;complexityProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;removeNonApplicableRules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;complexityProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;complexityProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;completionProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;wcrProof&quot;, Some (Xsd.SimpleType &quot;wcrProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;equivalenceProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;subsumptionProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;subsumptionProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;subsumptionProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;subsumptionProof&quot;), 0, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;crProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;wcrAndSN&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;wcrProof&quot;, Some (Xsd.SimpleType &quot;wcrProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;orthogonal&quot;, None, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;crDisproof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;nonWcrAndSN&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;wcrDisproof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;nonJoinableCriticalPairsAuto&quot;, None, 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;nonJoinableFork&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;rewriteSequence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="14"/>Some (Xsd.SimpleType &quot;rewriteSequence&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;rewriteSequence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;rewriteSequence&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;distinctNormalForms&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;capNotUnif&quot;, None, 1, Xsd.Bound 1)]]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;dpNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;loop&quot;, Some (Xsd.SimpleType &quot;loop&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;dpRuleRemoval&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;dpNonterminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;infinitenessAssumption&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;dpInput&quot;, Some (Xsd.SimpleType &quot;dpInput&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;nonLoop&quot;, Some (Xsd.SimpleType &quot;nonLoop&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;innermostLhssRemovalProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;innermostLhss&quot;, Some (Xsd.SimpleType &quot;innermostLhss&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;dpNonterminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;innermostLhssIncreaseProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;innermostLhss&quot;, Some (Xsd.SimpleType &quot;innermostLhss&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;dpNonterminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;switchFullStrategyProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;wcrProof&quot;, Some (Xsd.SimpleType &quot;wcrProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="14"/>Some (Xsd.SimpleType &quot;dpNonterminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;instantiationProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;dpNonterminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;dpProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;pIsEmpty&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;depGraphProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;component&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;realScc&quot;, Some (Xsd.SimpleType &quot;boolean&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;arcs&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;forwardArc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;positiveInteger&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;redPairProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraints&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;redPairUrProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraints&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;usableRules&quot;, Some (Xsd.SimpleType &quot;usableRules&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;monoRedPairProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraints&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;monoRedPairUrProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraints&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;usableRules&quot;, Some (Xsd.SimpleType &quot;usableRules&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;subtermProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;argumentFilter&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;argumentFilter&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;projectedRewriteSequence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;rewriteSequence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some (Xsd.SimpleType &quot;rewriteSequence&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Unbounded); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;semlabProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;model&quot;, Some (Xsd.SimpleType &quot;model&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;innermostLhss&quot;, Some (Xsd.SimpleType &quot;innermostLhss&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;unlabProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;sizeChangeProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>[Xsd.Elt (&quot;subtermCriterion&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>Xsd.Elt (&quot;reductionPair&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>[Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>Some (Xsd.SimpleType &quot;orderingConstraints&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>Some (Xsd.SimpleType &quot;orderingConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>Xsd.Elt (&quot;usableRules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="21"/>Some (Xsd.SimpleType &quot;usableRules&quot;), 0, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="16"/>1, Xsd.Bound 1)]; </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;sizeChangeGraph&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="18"/>Xsd.Elt (&quot;edge&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;position&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;strict&quot;, Some (Xsd.SimpleType &quot;boolean&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;position&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;flatContextClosureProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;freshSymbol&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.Sequence [Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;flatContexts&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.GroupRef (&quot;context&quot;, 1, Xsd.Unbounded)), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;argumentFilterProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;argumentFilter&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;argumentFilter&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard"><text:s/>Xsd.Elt (&quot;uncurryProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;applicativeTop&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;positiveInteger&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;uncurryInformation&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;uncurryInformation&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;finitenessAssumption&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;dpInput&quot;, Some (Xsd.SimpleType &quot;dpInput&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;usableRulesProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;usableRules&quot;, Some (Xsd.SimpleType &quot;usableRules&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;innermostLhssRemovalProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;innermostLhss&quot;, Some (Xsd.SimpleType &quot;innermostLhss&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;switchInnermostProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;wcrProof&quot;, Some (Xsd.SimpleType &quot;wcrProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;rewritingProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;rewriteStep&quot;, Some (Xsd.SimpleType &quot;rewriteStep&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;usableRules&quot;, Some (Xsd.SimpleType &quot;usableRules&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;instantiationProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;instantiations&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;forwardInstantiationProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;instantiations&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;usableRules&quot;, Some (Xsd.SimpleType &quot;usableRules&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;narrowingProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;positionInTerm&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;positionInTerm&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;narrowings&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;splitProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;generalRedPairProc&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraints&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;strict&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;bound&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;rules&quot;, Some (Xsd.SimpleType &quot;rules&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;condRedPairProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.GroupRef (&quot;symbol&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;before&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;after&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;conditions&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;condition&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="25"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="27"/>[Xsd.Elt (&quot;conditionalConstraint&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>Some (Xsd.SimpleType &quot;conditionalConstraint&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="28"/>Xsd.Elt (&quot;dpSequence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="30"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="32"/>[Xsd.Elt (&quot;rules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="34"/>Some (Xsd.SimpleType &quot;rules&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="34"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="28"/>Xsd.Elt (&quot;conditionalConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="30"/>(Xsd.SimpleType &quot;conditionalConstraintProof&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="29"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="24"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;equationalProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;completionAndNormalization&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;completionAndNormalization&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;equationalProofTree&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.GroupRef (&quot;equationalProofTree&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;conversion&quot;, Some (Xsd.SimpleType &quot;conversion&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;equationalDisproof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;completionAndNormalization&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;completionAndNormalization&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;relativeNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;loop&quot;, Some (Xsd.SimpleType &quot;loop&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;trsNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;trsNonterminationProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;variableConditionViolated&quot;, Some (Xsd.Choice []), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;ruleRemoval&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;relativeNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;relativeNonterminationProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;nonterminationAssumption&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trsInput&quot;, Some (Xsd.SimpleType &quot;trsInput&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;relativeTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;rIsEmpty&quot;, Some (Xsd.Choice []), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;sIsEmpty&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;ruleRemoval&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraints&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;relativeTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;relativeTerminationProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;semlab&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;model&quot;, Some (Xsd.SimpleType &quot;model&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;relativeTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;relativeTerminationProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;unlab&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;relativeTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;relativeTerminationProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;stringReversal&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="12"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;relativeTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;relativeTerminationProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;relativeTerminationAssumption&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trsInput&quot;, Some (Xsd.SimpleType &quot;trsInput&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;uncurry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;uncurryInformation&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;uncurryInformation&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;relativeTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;relativeTerminationProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;equalityRemoval&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;relativeTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;relativeTerminationProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;trsNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;variableConditionViolated&quot;, Some (Xsd.Choice []), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;ruleRemoval&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsNonterminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;stringReversal&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsNonterminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;loop&quot;, Some (Xsd.SimpleType &quot;loop&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;dpTrans&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;markedSymbols&quot;, Some (Xsd.SimpleType &quot;boolean&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;dpNonterminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;nonLoop&quot;, Some (Xsd.SimpleType &quot;nonLoop&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;nonterminationAssumption&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trsInput&quot;, Some (Xsd.SimpleType &quot;trsInput&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard">Xsd.Elt (&quot;innermostLhssIncrease&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;innermostLhss&quot;, Some (Xsd.SimpleType &quot;innermostLhss&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsNonterminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;rIsEmpty&quot;, Some (Xsd.Choice []), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;ruleRemoval&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraints&quot;), 0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraintProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;dpTrans&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;dps&quot;, Some (Xsd.SimpleType &quot;dps&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;markedSymbols&quot;, Some (Xsd.SimpleType &quot;boolean&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="13"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;semlab&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;model&quot;, Some (Xsd.SimpleType &quot;model&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;innermostLhss&quot;, Some (Xsd.SimpleType &quot;innermostLhss&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;unlab&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;stringReversal&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;flatContextClosure&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;flatContexts&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.GroupRef (&quot;context&quot;, 1, Xsd.Unbounded)), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;terminationAssumption&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trsInput&quot;, Some (Xsd.SimpleType &quot;trsInput&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;uncurry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;uncurryInformation&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;uncurryInformation&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;bounds&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;type&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;roof&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;match&quot;, None, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;bound&quot;, Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;finalStates&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;state&quot;, Some (Xsd.SimpleType &quot;state&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;treeAutomaton&quot;, Some (Xsd.SimpleType &quot;treeAutomaton&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;switchInnermost&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;wcrProof&quot;, Some (Xsd.SimpleType &quot;wcrProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;split&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;removeNonApplicableRules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;wcrProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;joinableCriticalPairs&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;joinableCriticalPair&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;rewriteSequence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some (Xsd.SimpleType &quot;rewriteSequence&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;rewriteSequence&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some (Xsd.SimpleType &quot;rewriteSequence&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;joinableCriticalPairsAuto&quot;, None, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;joinableCriticalPairsBFS&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;nonNegativeInteger&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;quasiReductiveProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;unraveling&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;unravelingInformation&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;unravelingEntry&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;conditionalRule&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Some (Xsd.SimpleType &quot;conditionalRule&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;rule&quot;, Some (Xsd.SimpleType &quot;rule&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;proof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;trsTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;trsTerminationProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;trsNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;trsNonterminationProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;relativeTerminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="9"/>Some (Xsd.SimpleType &quot;relativeTerminationProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;relativeNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;relativeNonterminationProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;dpProof&quot;, Some (Xsd.SimpleType &quot;dpProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;dpNonterminationProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;dpNonterminationProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;orderingConstraintProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;orderingConstraintProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;wcrProof&quot;, Some (Xsd.SimpleType &quot;wcrProof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;crProof&quot;, Some (Xsd.SimpleType &quot;crProof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;crDisproof&quot;, Some (Xsd.SimpleType &quot;crDisproof&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;completionProof&quot;, Some (Xsd.SimpleType &quot;completionProof&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;equationalProof&quot;, Some (Xsd.SimpleType &quot;equationalProof&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;equationalDisproof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;equationalDisproof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;complexityProof&quot;, Some (Xsd.SimpleType &quot;complexityProof&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;quasiReductiveProof&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some (Xsd.SimpleType &quot;quasiReductiveProof&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="3"/>Xsd.Elt (&quot;certificationProblem&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="5"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="7"/>[Xsd.Elt (&quot;input&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Choice </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;trsInput&quot;, Some (Xsd.SimpleType &quot;trsInput&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;dpInput&quot;, Some (Xsd.SimpleType &quot;dpInput&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;orderingConstraints&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some (Xsd.SimpleType &quot;orderingConstraints&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;completionInput&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;equations&quot;, Some (Xsd.SimpleType &quot;equations&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;trs&quot;, Some (Xsd.SimpleType &quot;trs&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;equationalReasoningInput&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;equations&quot;, Some (Xsd.SimpleType &quot;equations&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="18"/>Xsd.Elt (&quot;equation&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.GroupRef (&quot;term&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;complexityInput&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;trsInput&quot;, Some (Xsd.SimpleType &quot;trsInput&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.GroupRef (&quot;complexityMeasure&quot;, 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.GroupRef (&quot;complexityClass&quot;, 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;ctrsInput&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;conditionalRules&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some (Xsd.SimpleType &quot;conditionalRules&quot;), 1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;cpfVersion&quot;, Some (Xsd.SimpleType &quot;string&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;proof&quot;, Some (Xsd.SimpleType &quot;proof&quot;), 1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="8"/>Xsd.Elt (&quot;origin&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="10"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="12"/>[Xsd.Elt (&quot;proofOrigin&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;tool&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;name&quot;, Some (Xsd.SimpleType &quot;string&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;version&quot;, Some (Xsd.SimpleType &quot;string&quot;), 1, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;strategy&quot;, Some (Xsd.SimpleType &quot;string&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;url&quot;, Some (Xsd.SimpleType &quot;url&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>1, Xsd.Unbounded); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;toolUser&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;firstName&quot;, Some (Xsd.SimpleType &quot;string&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;lastName&quot;, Some (Xsd.SimpleType &quot;string&quot;), </text:p>
   <text:p text:style-name="Standard"><text:soft-page-break/><text:s text:c="24"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;url&quot;, Some (Xsd.SimpleType &quot;url&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>0, Xsd.Unbounded)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="13"/>Xsd.Elt (&quot;inputOrigin&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="15"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="17"/>[Xsd.Elt (&quot;tpdbReference&quot;, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Some </text:p>
   <text:p text:style-name="Standard"><text:s text:c="20"/>(Xsd.Sequence </text:p>
   <text:p text:style-name="Standard"><text:s text:c="22"/>[Xsd.Elt (&quot;fileName&quot;, Some (Xsd.SimpleType &quot;string&quot;), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>1, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="23"/>Xsd.Elt (&quot;tpdbId&quot;, Some (Xsd.SimpleType &quot;long&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="24"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>0, Xsd.Bound 1); </text:p>
   <text:p text:style-name="Standard"><text:s text:c="18"/>Xsd.Elt (&quot;source&quot;, Some (Xsd.SimpleType &quot;string&quot;), 0, </text:p>
   <text:p text:style-name="Standard"><text:s text:c="19"/>Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="14"/>0, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="9"/>1, Xsd.Bound 1)]), </text:p>
   <text:p text:style-name="Standard"><text:s text:c="4"/>1, Xsd.Bound 1)] </text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">(******************************************************************************)</text:p>
   <text:p text:style-name="P7">Printing function </text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="P7">let defn_of =</text:p>
   <text:p text:style-name="P7"><text:s text:c="2"/>List.iter (fun (_, xs) -&gt; </text:p>
   <text:p text:style-name="P7"><text:s text:c="4"/>List.iter (fun t -&gt; Printf.printf &quot;%s&quot; t) xs)</text:p>
   <text:p text:style-name="P7"/>
   <text:p text:style-name="Standard">First, I correct <text:span text:style-name="T5">defn_of</text:span> function to return string representation of relations of a label by looking up entries:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P7">let defn_of label =</text:p>
   <text:p text:style-name="P7"><text:s text:c="4"/>try</text:p>
   <text:p text:style-name="P7"><text:s text:c="7"/>let (_, xs) = List.find (fun (l, ys) -&gt; l = label) entries in</text:p>
   <text:p text:style-name="P7"><text:s text:c="7"/>String.concat &quot;-&gt;&quot; xs</text:p>
   <text:p text:style-name="P7"><text:s text:c="4"/>with</text:p>
   <text:p text:style-name="P7"><text:s text:c="8"/>Not_found -&gt; &quot;&quot;</text:p>
   <text:p text:style-name="Standard">Second, what you returned in new_sort (which supposed to be newordered) is plainly wrong. What you really wanted is filtering out all lists with one element occuring in undefined:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P7">let newordered = List.filter (function [x] -&gt; List.for_all((&lt;&gt;) x) undefined</text:p>
   <text:p text:style-name="P7"><text:s text:c="39"/>| _ -&gt; true) ordered</text:p>
   <text:p text:style-name="Standard">As usual, printing functions are based on functions in Printf module and String.concat. There are two cases in your printing task:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Case 1: for all labels in undefined, use your print_undfined function above.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Case 2: for any list xs in newordered, if xs has only one element, that means no equivalence class <text:soft-page-break/>exists. If xs has at least two elements, equivalence classes should be printed:</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="P7">let print_defined_equivalence xs = </text:p>
   <text:p text:style-name="P7"><text:s text:c="4"/>match xs with</text:p>
   <text:p text:style-name="P7"><text:s text:c="4"/>| [] -&gt; ()</text:p>
   <text:p text:style-name="P7"><text:s text:c="4"/>| [x] -&gt; Printf.printf &quot;\nInductive %s := %s.&quot; x (defn_of x)</text:p>
   <text:p text:style-name="P7"><text:s text:c="4"/>| _ -&gt;</text:p>
   <text:p text:style-name="P7"><text:s text:c="8"/>let ys = String.concat &quot;\nwith&quot; </text:p>
   <text:p text:style-name="P7"><text:s text:c="18"/>(List.map (fun x -&gt; </text:p>
   <text:p text:style-name="P7"><text:s text:c="21"/>Printf.sprintf &quot;%s := %s&quot; x (defn_of x)) </text:p>
   <text:p text:style-name="P7"><text:s text:c="24"/>xs) in</text:p>
   <text:p text:style-name="P7"><text:s text:c="8"/>Printf.printf &quot;\nInductive %s.&quot; ys</text:p>
   <text:p text:style-name="Standard">As a side note, I chose to handle empty list as an element of newordered although it didn&apos;t occur in your test case. Another thing is entries is traversed many times to look up elements, it should be changed to Map datatype, especially when entries is big.</text:p>
   <text:p text:style-name="Standard"/>
   <text:p text:style-name="Standard">Given the fact that I have stated clearly a condition for each case, your should be able to plug these functions into your program.</text:p>
  </office:text>
 </office:body>
</office:document>