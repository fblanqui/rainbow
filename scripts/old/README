# Rainbow, a termination proof certification tool
# See the COPYRIGHTS and LICENSE files.

Rainbow is available on the CoLoR web page http://color.inria.fr/.

The aim of Rainbow is to check the correctness of termination
certificates for various existing formats. The certification is done
by generating a Coq file based on the CoLoR library. Coq is a powerful
proof assistant and checker (see http://coq.inria.fr) and CoLoR is a
Coq library on rewriting and termination (see http://color.inria.fr).

LICENSE: this file describes the license governing this tool.
COPYRIGHTS: this file describes the copyrights holders.
INSTALL: this file describes a compilation procedure.
THANKS: thanks to various people for their comments or help.

TPDB is the Termination Problem Data Base available at
http://dev.aspsimon.org/projects/termcomp/downloads/.

Various useful bash scripts are provided in the directory scripts/. Do
"scripts/usage" to get the list of these scripts and their usage. For
every script "cmd", you can do "scripts/cmd -h" to get help on this
script. In particular, there are:

- tpdb2pb: to convert a file.[trs|srs|xtc] into a file.pb,
- cpf2prf: to convert a file.cpf into a file.prf,
- prf2coq: to convert a file.prf into a file.v,
- check: to check the correctness of a file.[cpf|prf]
  wrt a file.[trs|srs|xtc|pb].

Finally, various examples are provided in the directory "examples". Do
"[g]make" in this directory to compile them.

For checking proofs with CoLoR, make sure that your ~/.coqrc file
contains the following line, where <dir> is the directory where CoLoR
files have been compiled:

  Add Rec LoadPath "<dir>" as CoLoR.

-------------------------------------------------------
TPDB termination problems supported by Rainbow
-------------------------------------------------------

- TRS standard
- TRS relative
- TRS modulo equations l=r with Var(l)=Var(r) (e.g. associativity
  and commutativity) are translated into TRS relative
- SRS standard
- SRS relative

-------------------------------------------------------
Proof techniques supported by Rainbow
-------------------------------------------------------

- root labelling
- flat context closure
- loops
- dependency pair transformation with or without marked symbols
- dependency graph decomposition based on unification
- polynomial interpretation
- matrix interpretation (standard, arctic and below-zero)
- argument filtering
- SRS or unary TRS reversal

See grammar/proof.xsd for details.

-------------------------------------------------------
Termination problems formats supported by Rainbow
-------------------------------------------------------

- the old TPDB format grammar/tpdb.html (file extensions .trs and .srs)
- the new TPDB format grammar/xtc.xsd (file extension .xtc)
- its own format grammar/problem.xsd (file extension .pb)

-------------------------------------------------------
Termination certificates formats supported by Rainbow
-------------------------------------------------------

- the new common format grammar/cpf.xsd (file extension .cpf)
- its own format grammar/proof.xsd (file extension .prf)

-------------------------------------------------------
Running a prover outputing Rainbow certificates on TPDB
-------------------------------------------------------

Rainbow provides various scripts for running a prover on a TPDB and
analyzing its results. In particular, it provides a script for
generating a Makefile given a prover, a file extension for proof files
generated by the prover, and a program converting such proof files
into Coq files.

1) Because of Coq limitations on module names, it is necessary to
first rename filenames that do not conform to Coq naming conventions:

Do "scripts/rename_tpdb".

2) Check that the prover and the converter conform to the requirements
of scripts/create_makefile:

Do "script/create_makefile -h".

Define scripts if necessary. Such scripts and Makefile generators are
already provided for some provers (Aprove, CiME3). Do "scripts/usage -h".

3) Generate a Makefile for running your prover:

Do "scripts/create_makefile prover extension extension2coq [dir]".

Let MAKE be "[g]make [-r] [-j ...] -k".

Do $MAKE to see the possible targets.

4) Generate all pb files corresponding to termination problems:

Do "$MAKE pb".

5) Run your prover:

Do "$MAKE prover".

6) Run your converter:

Do "$MAKE coq".

7) Run Coq to check Coq files:

Do "$MAKE check".

8) Build a log file of all the results:

Do "get_log [-ext extension] > log_file".

9) Compute statistics from the log file:

Do "get_stat log_file".

-------------------------------------------------------
Log files
-------------------------------------------------------

Each line of a log file is as follows:

filename sort kind strategy prover_result prover_time proof_file coq_file check_result check_time

sort:
- T: Term rewrite system
- S: String rewrite system (or TRS with unary symbols only)

kind:
- S: standard system (no relative rule or equation)
- R: relative system
- A: system modulo AC

strategy:
- F: full (no strategy)
- I: innermost
- O: outermost
- C: context sensitive

prover_result:
- Y: YES
- M: MAYBE
- N: NO
- K: KILLED
- E: ERROR

proof_file/coq_file:
- Y: YES
- N: NO

check_result:
- O: OK
- E: ERROR
- T: TIMEOUT
